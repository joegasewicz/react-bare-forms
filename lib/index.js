!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports["react-bare-lib"]=e(require("react")):t["react-bare-lib"]=e(t.react)}(window,(function(t){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(e,n){e.exports=t},function(t,e,n){"use strict";n.r(e),n.d(e,"createFileRef",(function(){return l})),n.d(e,"getFileFromRef",(function(){return h})),n.d(e,"areFieldsEqual",(function(){return _t})),n.d(e,"customValidator",(function(){return xt})),n.d(e,"isChecked",(function(){return St})),n.d(e,"isEmailValid",(function(){return Ft})),n.d(e,"isFieldEmpty",(function(){return Et})),n.d(e,"isFile",(function(){return Pt})),n.d(e,"isRadioChecked",(function(){return jt})),n.d(e,"FormConsumer",(function(){return bt})),n.d(e,"CheckBoxField",(function(){return $})),n.d(e,"EmailField",(function(){return Y})),n.d(e,"FileField",(function(){return nt})),n.d(e,"Form",(function(){return gt})),n.d(e,"PasswordField",(function(){return Z})),n.d(e,"RadioField",(function(){return tt})),n.d(e,"RadioGroup",(function(){return Q})),n.d(e,"SubmitButton",(function(){return rt})),n.d(e,"TextAreaField",(function(){return J})),n.d(e,"TextInputField",(function(){return q})),n.d(e,"SelectField",(function(){return et}));var r=n(0),o=n.n(r);function a(t){var e=t.results,n=t.styles;return o.a.createElement(o.a.Fragment,null,e.map((function(t){return t.messages.map((function(t,e){return o.a.createElement("div",{key:e,className:n},t)}))})))}var i,u=function(t){var e=Object(r.useContext)(yt).bare?t.className:"alert mt-2 alert-danger "+t.className;return t.isTouched?o.a.createElement(a,{results:t.results,styles:e||""}):null},s=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),c=function(t,e,n){return"React Bare Forms ERROR:\n\t"+t+" - "+e+"\n\t- "+n},p=(c("Function","isFieldEmpty()","Missing argument: minLength (number)"),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e}(Error)),f=c("Required Props","context","You must pass in a context prop. Class components use 'state' & functional components must use useState hook. See https://joegasewicz.github.io/react-bare-forms/modules/_form_.html");function l(){return o.a.createRef()}function h(t){return t&&t.current&&Object.keys(t.current.files).length?t.current.files[0]:null}function m(t){var e=h(t);return e?{name:e.name,lastModified:e.lastModified,lastModifiedDate:e.lastModifiedDate,size:e.size,type:e.type}:null}var d=function(){return(d=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function y(t,e,n){var r;return void 0===e&&(e=""),void 0===n&&(n={}),e?((r={})[e]=d(d({},t[e]),n),r):d(d({},t),n)}function v(t,e,n){return void 0===n&&(n=""),function(r,o){var a;e(d(d({},t),y(t,n,((a={})[o]=r.target.value,a))))}}function b(t,e,n){return void 0===n&&(n=""),function(r,o,a){var i,u;if(a){for(var s=d(d({},t),y(t,n,((i={})[o]=!0,i))),c=0,p=a.children;c<p.length;c++){var f=p[c];f.props.name!==o&&(s=d(d({},s),y(s,n,((u={})[f.props.name]=!1,u))))}e(s)}}}var O=function(){function t(){this.GROUP_TYPES=["radioGroups"]}return t.prototype.isGroup=function(t){return this.GROUP_TYPES.includes(t)},t.prototype.create=function(){var t=this;return function(e){for(var n=Object(r.useContext)(yt),a=e.className,i=void 0===a?"btn btn-success btn-lg":a,u=(e.disabled,!1),s=(n.metadata.inputs.state,0),c=Object.keys(n.metadata);s<c.length;s++){var p=c[s],f=n.metadata[p].state;if(t.isGroup(n.metadata[p].metaType))for(var l=0,h=Object.keys(f);l<h.length;l++){_=h[l];for(var m=0,d=Object.keys(f[_]);m<d.length;m++)for(var y=d[m],v=0,b=f[_][y].validation;v<b.length;v++){b[v].isValid||(u=!0)}}else for(var O=0,g=Object.keys(f);O<g.length;O++)for(var _,E=0,F=f[_=g[O]].validation;E<F.length;E++){F[E].isValid||(u=!0)}}return o.a.createElement("button",{disabled:u,className:i},e.children)}},t}(),g=function(){return(g=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},_=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};function E(t,e){return o.a.createElement("div",{className:"form-group"},t.labelText&&o.a.createElement("label",null,t.labelText),e,t.hint&&o.a.createElement("small",{className:"form-text text-muted"},t.hint))}var F,P=function(){function t(t,e){this.type=e,this.props=t,this.init()}return Object.defineProperty(t.prototype,"bare",{get:function(){return Boolean(this._bare)},set:function(t){this._bare=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"metadata",{get:function(){return this._metadata},set:function(t){this._metadata=t},enumerable:!0,configurable:!0}),t.prototype.init=function(){this.context=Object(r.useContext)(yt),this.metadata=this.context.metadata[at(this.type)],this.metadata.init(this.props.name,this.type),this.bare=Boolean(this.context.bare)},t.prototype.getProps=function(){return this.props},t.prototype.createField=function(t){var e=this.props.validators||this.parentName?o.a.createElement(u,{isTouched:this.metadata.isFieldTouched(),results:this.validate(),name:this.props.name,type:at(this.type),parent:this.parent}):null;return this.bare?o.a.createElement(o.a.Fragment,null,t(this.metadata.state),e):o.a.createElement(o.a.Fragment,null,this.formGroup(t(this.metadata.state)),e)},t.prototype.doValidation=function(t){var e=[];if(this.props.validators)for(var n=0,r=this.props.validators;n<r.length;n++){var o=r[n];e=_(e,[o(t,this.context)])}return e},t.prototype.validate=function(){var t=this.getFieldValue(this.props),e=this.doValidation(t);return this.metadata.update(t,e),e},t.prototype.getFieldValue=function(t){var e=it(this.type);return this.props[e]},t.mergeDefaultCssWithProps=function(t,e,n){var r="";return n||(r+=t+" "),e&&(r+=""+e),r},t.prototype.overrideEvent=function(t,e){return g(g({},t),{target:g(g({},t.target),{value:!e})})},t.prototype.getStatePositionFromFormKey=function(){var t,e;return(null===(t=this.context)||void 0===t?void 0:t.formKey)?this.context.state[this.context.formKey]:null===(e=this.context)||void 0===e?void 0:e.state},t}(),j=function(){function t(t,e,n){this.state=t,this.updateState=e,this.metaType=n}return Object.defineProperty(t.prototype,"name",{get:function(){return this._name},set:function(t){this._name=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fieldType",{get:function(){return this._fieldType},set:function(t){this._fieldType=t},enumerable:!0,configurable:!0}),t.prototype.isFieldTouched=function(){return!!this.state[this.name]&&this.state[this.name].isTouched},t}(),S=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),x=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return S(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return o.a.createElement("div",{className:"form-group form-check"},t,this.props.labelText&&o.a.createElement("label",{className:"form-check-label"},this.props.labelText),this.props.hint&&o.a.createElement("small",{className:"form-text text-muted"},this.props.hint))},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",{type:t.type,checked:t.getStatePositionFromFormKey()[t.props.name]||!1,onChange:function(e){return t.context.updateParentState(t.overrideEvent(e,t.getStatePositionFromFormKey()[t.props.name]),t.props.name)},name:t.props.name,className:P.mergeDefaultCssWithProps("form-check-input",t.props.className,t.context.bare)}))}},e}(P),T=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),w=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r._updateFieldValidation=function(){r.file=m(r.props.ref),void 0!==r.file&&r.validate()},r.type=e,r.props=n,r}return T(e,t),Object.defineProperty(e.prototype,"file",{get:function(){return this._file},set:function(t){this._file=t},enumerable:!0,configurable:!0}),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return E(this.props,t)},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",{ref:t.props.ref,type:t.type,onChange:t._updateFieldValidation.bind(t),className:P.mergeDefaultCssWithProps("form-control-file",t.props.className,t.context.bare)}))}},e.prototype.getFieldValue=function(t){return this.props.ref.current?m(this.props.ref):null},e}(P),C=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),N=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return C(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return E(this.props,t)},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",{type:t.type,value:t.getStatePositionFromFormKey()[t.props.name]||"",onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name,className:P.mergeDefaultCssWithProps("form-control",t.props.className,t.bare)}))}},e}(P),A=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),R=function(){return(R=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},V=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return A(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype.update=function(t,e){var n,o,a,i=this;this.name in this.state?this.state[this.name]&&t!==this.state[this.name].fieldValues.currentValue&&(a=R(R({},this.state),((o={})[this.name]={name:this.name,validation:e,fieldValues:{type:it(this.fieldType),currentValue:t},isTouched:!0},o)),Object(r.useEffect)((function(){i.updateState(a)}),[a])):(a=R(R({},this.state),((n={})[this.name]={name:this.name,validation:e,isTouched:!1,fieldValues:{type:it(this.fieldType),currentValue:t}},n)),Object(r.useEffect)((function(){i.updateState(a)}),[a]))},e}(j),I=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),k=function(){return(k=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},K=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return I(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype.update=function(t,e){var n,o,a,i=this;if(!(this.name in this.state))return a=k(k({},this.state),((n={})[this.name]={name:this.name,validation:e,isTouched:!1,fieldValues:{type:it(this.fieldType),currentValue:{}}},n)),void Object(r.useEffect)((function(){i.updateState(a)}),[a]);if(this.state[this.name]){var u=this.state[this.name].fieldValues.currentValue;(null===t&&Object.keys(u).length||t&&t.name!==u.name)&&(a=k(k({},this.state),((o={})[this.name]={name:this.name,validation:e,fieldValues:{type:it(this.fieldType),currentValue:t||{}},isTouched:!0},o)),this.updateState(a))}},e}(j),G=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),D=function(){return(D=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},L=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return G(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype._createGroupState=function(t,e,n){var r,o;return void 0===n&&(n=!0),D(D({},this.state),((r={})[t.parentName]=D(D({},this.state[t.parentName]),((o={})[this.name]={parent:t.parentName,name:this.name,validation:e||[],isTouched:n,fieldValues:{type:it(this.fieldType),value:t.value}},o)),r))},e.prototype.update=function(t,e){var n=this,o={};this.state[t.parentName]?(this.state[t.parentName]&&!(this.name in this.state[t.parentName])||this.state[t.parentName][this.name]&&this.state[t.parentName][this.name].fieldValues.value!==t.value)&&(o=this._createGroupState(t,e),Object(r.useEffect)((function(){n.updateState(o)}))):(o=this._createGroupState(t,e,!1),Object(r.useEffect)((function(){n.updateState(o)})))},e.prototype.isFieldTouched=function(){if(this.state&&this.parentName&&this.name&&this.state[this.parentName]){var t=this.state[this.parentName][this.name];if(t)return t.isTouched}return!1},e}(j),M=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),X=function(t){function e(e,n){var o=t.call(this,n,e)||this;return o.handleOnChange=function(t,e){var n=o.overrideEvent(t,t.target.value);o.context.updateRadioGroupStateFromPassedInContext(n,o.props.name,e)},o.props=n,o.type=e,o.radioContext=Object(r.useContext)(dt),o.radioContext&&o.radioContext.parent&&(o.parentName=o.radioContext.parent.name,o.metadata.parentName=o.parentName),o}return M(e,t),Object.defineProperty(e.prototype,"parentName",{get:function(){return this._parentName},set:function(t){this._parentName=t},enumerable:!0,configurable:!0}),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return o.a.createElement("div",{className:"form-group form-check"},t,this.props.labelText&&o.a.createElement("label",{className:"form-check-label"},this.props.labelText),this.props.hint&&o.a.createElement("small",{className:"form-text text-muted"},this.props.hint))},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement("input",{type:t.type,checked:t.getStatePositionFromFormKey()[t.props.name]||!1,name:t.props.name,onChange:function(e){return t.handleOnChange(e,t.radioContext)},className:P.mergeDefaultCssWithProps("form-check-input",t.props.className,t.context.bare)})}},e.prototype.validate=function(){var t=this.getFieldValue(this.props),e=this.doValidation(t);return this.metadata.update({value:t,parentName:this.parentName,name:this.props.name},e),e},e}(P),B=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),U=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return B(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return E(this.props,t)},e.prototype._getOptions=function(t){var e=this;return void 0===t&&(t=[]),this.props.objectKey&&this.props.objectValue?t.map((function(t,n){return o.a.createElement("option",{value:t[e.props.objectKey],key:n},t[e.props.objectValue])})):t.map((function(t,e){return o.a.createElement("option",{value:t,key:e},t)}))},e.prototype.getField=function(){var t=this,e=this.props,n=e.options,r=void 0===n?[]:n,a=(e.size,this._getOptions(r));return function(){return o.a.createElement("select",{onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name,className:P.mergeDefaultCssWithProps(t.getSelectCssName(t.props.size),t.props.className,t.context.bare)},a||null)}},e.prototype.getSelectCssName=function(t){return"default"===t?"form-control":"form-control form-control-"+t},e}(P),W=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),z=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return W(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return E(this.props,t)},e.prototype.getField=function(){var t=this,e=this.props.rows,n=void 0===e?5:e;return function(){return o.a.createElement("textarea",{className:ot("form-control",t.props.className,t.context.bare),rows:n,value:t.getStatePositionFromFormKey()[t.props.name]||"",onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name})}},e}(P),H=function(){return(H=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(t){t.TEXT="text",t.EMAIL="email",t.PASSWORD="password",t.TEXTAREA="textArea",t.RADIO="radio",t.CHECKBOX="checkbox",t.SELECT="select",t.FILE="file"}(F||(F={}));var q=function(t){return new N(F.TEXT,t).create()},Y=function(t){return new N(F.EMAIL,t).create()},Z=function(t){return new N(F.PASSWORD,t).create()},$=function(t){return new x(F.CHECKBOX,t).create()},J=function(t){return new z(F.TEXTAREA,t).create()};function Q(t){var e={parent:{name:t.name},children:t.children};return o.a.createElement(dt.Provider,{value:e},t.children)}var tt=function(t){return new X(F.RADIO,t).create()},et=function(t){return new U(F.SELECT,t).create()},nt=o.a.forwardRef((function(t,e){var n=H(H({},t),{ref:e});return new w(F.FILE,n).create()})),rt=(new O).create();function ot(t,e,n){var r="";return n||(r+=t+" "),e&&(r+=""+e),r}function at(t){switch(t){case F.TEXT:case F.EMAIL:case F.PASSWORD:case F.TEXTAREA:return ut.INPUTS;case F.RADIO:return ut.RADIO_GROUPS;case F.CHECKBOX:return ut.CHECKBOXES;case F.SELECT:return ut.INPUTS;case F.FILE:return ut.FILES;default:return ut.INPUTS}}function it(t){switch(t){case F.TEXT:case F.EMAIL:case F.PASSWORD:case F.TEXTAREA:return"value";case F.CHECKBOX:return"checked";case F.SELECT:return"value";case F.FILE:return"file";case F.RADIO:return"checked";default:return"value"}}var ut,st=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,ct=function(){return(ct=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(t){t.INPUTS="inputs",t.RADIO_GROUPS="radioGroups",t.FILES="files",t.CHECKBOXES="checkboxes"}(ut||(ut={}));var pt={},ft={},lt={},ht={},mt={bare:!1,state:{},formKey:null,debug:!1,dynamic:!0,metadata:{inputs:null,radioGroups:null,files:null,checkboxes:null}},dt=o.a.createContext(ft),yt=o.a.createContext(mt),vt=yt.Provider,bt=yt.Consumer,Ot=function(t){return function(e){e.preventDefault();var n=t.callback;"function"==typeof n&&n()&&n()}},gt=function(t){var e,n=Object(r.useState)(t.state),a=n[0],i=n[1],u=Object(r.useState)(mt),s=u[0],c=(u[1],Object(r.useState)(pt)),l=c[0],h=c[1],m=Object(r.useState)(ht),d=m[0],y=m[1],O=Object(r.useState)(lt),g=O[0],_=O[1],E=Object(r.useState)(ft),F=E[0],P=E[1];if(t.context&&"setState"in t.context)Object(r.useEffect)((function(){t.context.setState(ct({},a))}),[a]);else{if(!t.context)throw new p(f);Object(r.useEffect)((function(){t.context(ct({},a))}),[a])}var j={bare:t.bare||s.bare,state:t.state,formKey:t.formKey,debug:t.debug||s.debug,dynamic:t.dynamic||s.dynamic,updateParentState:v(a,i,t.formKey),updateRadioGroupStateFromPassedInContext:b(a,i,t.formKey),metadata:(e={},e[ut.INPUTS]=new V(l,h,ut.INPUTS),e[ut.CHECKBOXES]=new V(d,y,ut.CHECKBOXES),e[ut.FILES]=new K(g,_,ut.FILES),e[ut.RADIO_GROUPS]=new L(F,P,ut.RADIO_GROUPS),e)};return o.a.createElement(vt,{value:j},o.a.createElement("form",{onSubmit:Ot(t)},t.children))},_t=xt((function(t,e,n){var r=function(t){if(t.formKey)return t.state[t.formKey];return t.state}(n);if(!(t in r))throw new Error("React-BareForms Error: No Field with name of "+t+" exists when calling 'areFieldsEqual' validator function.\n For more info, visit: https://joegasewicz.github.io/react-bare-forms/modules/_validators_.html#arefieldsequal");if(!r[t]||!e||e!==r[t])return["Fields do not match"]})),Et=xt((function(t,e,n){if(!(void 0!==e&&e.length>=t))return["Must be at least "+t+" characters"]})),Ft=xt((function(t,e,n){if(!st.test(String(e).toLowerCase()))return["Must be a valid email"]})),Pt=xt((function(t,e,n){if(!e)return["Must be a file type"]})),jt=xt((function(t,e,n){if(!e)return["This option must be selected"]})),St=xt((function(t,e,n){if(!1===e)return["Must be checked"]}));function xt(t){return function(e){return void 0===e&&(e=null),function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=n[0],a=n[1],i=t(e,o,a);return Array.isArray(i)&&i.length>=1?{isValid:!1,messages:i}:{isValid:!0,messages:[]}}}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,