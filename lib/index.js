window["react-bare-lib"]=function(e){var t={};function r(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(a,i,function(t){return e[t]}.bind(null,i));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=10)}([function(e,t){e.exports=window.react},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValidationResults=t.updateRadioGroupStateFromPassedInContext=t.mergeDefaultCssWithProps=t.updateParentState=t.getMetadataNameType=t.getFieldValueType=t.FormElementValidators=t._FieldEmptyErrorMsg=t.EMAIL_REGEX=t.createFileObject=void 0;const a=r(11);Object.defineProperty(t,"FormElementValidators",{enumerable:!0,get:function(){return a.FormElementValidators}}),Object.defineProperty(t,"ValidationResults",{enumerable:!0,get:function(){return a.ValidationResults}});const i=r(5);Object.defineProperty(t,"_FieldEmptyErrorMsg",{enumerable:!0,get:function(){return i._FieldEmptyErrorMsg}});const n=r(12);Object.defineProperty(t,"createFileObject",{enumerable:!0,get:function(){return n.createFileObject}});const s=r(13);Object.defineProperty(t,"updateParentState",{enumerable:!0,get:function(){return s.updateParentState}}),Object.defineProperty(t,"updateRadioGroupStateFromPassedInContext",{enumerable:!0,get:function(){return s.updateRadioGroupStateFromPassedInContext}});const o=r(14);Object.defineProperty(t,"getFieldValueType",{enumerable:!0,get:function(){return o.getFieldValueType}}),Object.defineProperty(t,"getMetadataNameType",{enumerable:!0,get:function(){return o.getMetadataNameType}}),Object.defineProperty(t,"mergeDefaultCssWithProps",{enumerable:!0,get:function(){return o.mergeDefaultCssWithProps}});const u=r(24);Object.defineProperty(t,"EMAIL_REGEX",{enumerable:!0,get:function(){return u.EMAIL_REGEX}})},function(e,t,r){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,r,a){void 0===a&&(a=r),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,a){void 0===a&&(a=r),e[a]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&a(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Form=t.handleSubmit=t.FormConsumer=t.FormProvider=t.FormContext=t.RadioGroupContext=t.METADATA_NAMES=void 0;const s=n(r(0)),o=r(1),u=r(9),l=r(5);var d;!function(e){e.INPUTS="inputs",e.RADIO_GROUPS="radioGroups",e.FILES="files",e.CHECKBOXES="checkboxes"}(d=t.METADATA_NAMES||(t.METADATA_NAMES={}));const c={},p={},f={},m={},h={bare:!1,state:{},formKey:null,debug:!1,dynamic:!0,metadata:{inputs:null,radioGroups:null,files:null,checkboxes:null}};t.RadioGroupContext=s.default.createContext(p),t.FormContext=s.default.createContext(h),t.FormProvider=t.FormContext.Provider,t.FormConsumer=t.FormContext.Consumer,t.handleSubmit=e=>t=>{t.preventDefault();const{callback:r}=e;"function"==typeof r&&r()&&r()},t.Form=e=>{const[r,a]=s.useState(e.state),[i,n]=s.useState(h),[F,b]=s.useState(c),[E,_]=s.useState(m),[y,g]=s.useState(f),[v,O]=s.useState(p);if(e.context&&"setState"in e.context)s.useEffect(()=>{e.context.setState({...r})},[r]);else{if(!e.context)throw new o._FieldEmptyErrorMsg(l._noContextError);s.useEffect(()=>{e.context({...r})},[r])}const P={bare:e.bare||i.bare,state:e.state,formKey:e.formKey,debug:e.debug||i.debug,dynamic:e.dynamic||i.dynamic,updateParentState:o.updateParentState(r,a,e.formKey),updateRadioGroupStateFromPassedInContext:o.updateRadioGroupStateFromPassedInContext(r,a,e.formKey),metadata:{[d.INPUTS]:new u.Metadata(F,b,d.INPUTS),[d.CHECKBOXES]:new u.Metadata(E,_,d.CHECKBOXES),[d.FILES]:new u.MetadataFile(y,g,d.FILES),[d.RADIO_GROUPS]:new u.MetadataGroup(v,O,d.RADIO_GROUPS)}};return s.default.createElement(t.FormProvider,{value:P},s.default.createElement("form",{onSubmit:t.handleSubmit(e)},e.children))}},function(e,t,r){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,r,a){void 0===a&&(a=r),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,a){void 0===a&&(a=r),e[a]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&a(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractField=t._genericFormGroup=void 0;const s=n(r(0)),o=r(1),u=r(2);t._genericFormGroup=function(e,t){return s.default.createElement("div",{className:"form-group"},e.labeltext&&s.default.createElement("label",null,e.labeltext),t,e.hint&&s.default.createElement("small",{className:"form-text text-muted"},e.hint))};t.AbstractField=class{constructor(e,t){this.type=t,this.props=e,this.init()}get parentName(){return this._parentName}set parentName(e){this._parentName=e}get bare(){return Boolean(this._bare)}set bare(e){this._bare=e}get metadata(){return this._metadata}set metadata(e){this._metadata=e}init(){this.context=s.useContext(u.FormContext),this.metadata=this.context.metadata[o.getMetadataNameType(this.type)],this.metadata.init(this.props.name,this.type),this.bare=Boolean(this.context.bare)}getProps(){return this.props}createField(e){const t=this.props.validators||this.parentName?s.default.createElement(o.FormElementValidators,{isTouched:this.metadata.isFieldTouched(),results:this.validate(),name:this.props.name,type:o.getMetadataNameType(this.type),parent:this.parent}):null;return this.bare?s.default.createElement(s.default.Fragment,null,e(this.metadata.state),t):s.default.createElement(s.default.Fragment,null,this.formGroup(e(this.metadata.state)),t)}doValidation(e){let t=[];if(this.props.validators)for(let r of this.props.validators)t=[...t,r(e,this.context)];return t}validate(){let e=this.getFieldValue(this.props),t=this.doValidation(e);return this.metadata.update(e,t),t}getFieldValue(e){let t=o.getFieldValueType(this.type);return this.props[t]}static mergeDefaultCssWithProps(e,t,r){let a="";return r||(a+=e+" "),t&&(a+=""+t),a}overrideEvent(e,t){return{...e,target:{...e.target,value:!t}}}getStatePositionFromFormKey(){var e,t;return(null===(e=this.context)||void 0===e?void 0:e.formKey)?this.context.state[this.context.formKey]:null===(t=this.context)||void 0===t?void 0:t.state}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractMetadata=void 0;t.AbstractMetadata=class{constructor(e,t,r){this.state=e,this.updateState=t,this.metaType=r}get name(){return this._name}set name(e){this._name=e}get fieldType(){return this._fieldType}set fieldType(e){this._fieldType=e}isFieldTouched(){return!!this.state[this.name]&&this.state[this.name].isTouched}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t._noContextError=t._FieldEmptyErrorMsg=t._isFieldEmptyErrorMsg=t._throwNewErrorMsg=void 0,t._throwNewErrorMsg=(e,t,r)=>`React Bare Forms ERROR:\n\t${e} - ${t}\n\t- ${r}`,t._isFieldEmptyErrorMsg=t._throwNewErrorMsg("Function","isFieldEmpty()","Missing argument: minLength (number)");class a extends Error{}t._FieldEmptyErrorMsg=a,t._noContextError=t._throwNewErrorMsg("Required Props","context","You must pass in a context prop. Class components use 'state' & functional components must use useState hook. See https://joegasewicz.github.io/react-bare-forms/modules/_form_.html")},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getFileFromRef=t.createFileRef=void 0;const i=a(r(0));t.createFileRef=function(){return i.default.createRef()},t.getFileFromRef=function(e){return e&&e.current&&Object.keys(e.current.files).length?e.current.files[0]:null}},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SubmitButton=t.FileField=t.SelectField=t.RadioField=t.RadioGroup=t.TextAreaField=t.CheckBoxField=t.PasswordField=t.EmailField=t.TextInputField=t.FIELD_NAMES=void 0;const i=a(r(0)),n=r(2),s=r(8),o=r(9);var u;!function(e){e.TEXT="text",e.EMAIL="email",e.PASSWORD="password",e.TEXTAREA="textArea",e.RADIO="radio",e.CHECKBOX="checkbox",e.SELECT="select",e.FILE="file"}(u=t.FIELD_NAMES||(t.FIELD_NAMES={})),t.TextInputField=e=>new o.InputField(u.TEXT,e).create(),t.EmailField=e=>new o.InputField(u.EMAIL,e).create(),t.PasswordField=e=>new o.InputField(u.PASSWORD,e).create(),t.CheckBoxField=e=>new o.CheckBoxField(u.CHECKBOX,e).create(),t.TextAreaField=e=>new o.TextAreaField(u.TEXTAREA,e).create(),t.RadioGroup=function(e){const t={parent:{name:e.name},children:e.children};return i.default.createElement(n.RadioGroupContext.Provider,{value:t},e.children)},t.RadioField=e=>new o.RadioField(u.RADIO,e).create(),t.SelectField=e=>new o.SelectField(u.SELECT,e).create(),t.FileField=i.default.forwardRef((e,t)=>{let r={...e,ref:t};return new o.FileField(u.FILE,r).create()}),t.SubmitButton=(new s.SubmitButton).create()},function(e,t,r){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,r,a){void 0===a&&(a=r),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,a){void 0===a&&(a=r),e[a]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&a(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.SubmitButton=void 0;const s=n(r(0)),o=r(2);t.SubmitButton=class{constructor(){this.GROUP_TYPES=["radioGroups"]}isGroup(e){return this.GROUP_TYPES.includes(e)}create(){return e=>{const t=s.useContext(o.FormContext),{className:r="btn btn-success btn-lg",disabled:a=!0}=e;let i=!1;t.metadata.inputs.state;for(let e of Object.keys(t.metadata)){let r=t.metadata[e].state;if(this.isGroup(t.metadata[e].metaType))for(let e of Object.keys(r))for(let t of Object.keys(r[e])){let a=r[e][t];for(let e of a.validation)e.isValid||(i=!0)}else for(let e of Object.keys(r))for(let t of r[e].validation)t.isValid||(i=!0)}return s.default.createElement("button",Object.assign({},e,{disabled:i,className:r}),e.children)}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TextAreaField=t.SubmitButton=t.SelectField=t.RadioField=t.MetadataGroup=t.MetadataFile=t.Metadata=t.InputField=t.FileField=t.CheckBoxField=t.AbstractMetadata=t.AbstractField=void 0;const a=r(3);Object.defineProperty(t,"AbstractField",{enumerable:!0,get:function(){return a.AbstractField}});const i=r(4);Object.defineProperty(t,"AbstractMetadata",{enumerable:!0,get:function(){return i.AbstractMetadata}});const n=r(15);Object.defineProperty(t,"CheckBoxField",{enumerable:!0,get:function(){return n.CheckBoxField}});const s=r(16);Object.defineProperty(t,"FileField",{enumerable:!0,get:function(){return s.FileField}});const o=r(17);Object.defineProperty(t,"InputField",{enumerable:!0,get:function(){return o.InputField}});const u=r(18);Object.defineProperty(t,"Metadata",{enumerable:!0,get:function(){return u.Metadata}});const l=r(19);Object.defineProperty(t,"MetadataFile",{enumerable:!0,get:function(){return l.MetadataFile}});const d=r(20);Object.defineProperty(t,"MetadataGroup",{enumerable:!0,get:function(){return d.MetadataGroup}});const c=r(21);Object.defineProperty(t,"RadioField",{enumerable:!0,get:function(){return c.RadioField}});const p=r(22);Object.defineProperty(t,"SelectField",{enumerable:!0,get:function(){return p.SelectField}});const f=r(8);Object.defineProperty(t,"SubmitButton",{enumerable:!0,get:function(){return f.SubmitButton}});const m=r(23);Object.defineProperty(t,"TextAreaField",{enumerable:!0,get:function(){return m.TextAreaField}})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SelectField=t.TextInputField=t.TextAreaField=t.SubmitButton=t.RadioGroup=t.RadioField=t.PasswordField=t.Form=t.FileField=t.EmailField=t.CheckBoxField=t.FormConsumer=t.isRadioChecked=t.isFile=t.isFieldEmpty=t.isEmailValid=t.isChecked=t.customValidator=t.areFieldsEqual=t.getFileFromRef=t.createFileRef=void 0;const a=r(2);Object.defineProperty(t,"Form",{enumerable:!0,get:function(){return a.Form}}),Object.defineProperty(t,"FormConsumer",{enumerable:!0,get:function(){return a.FormConsumer}});const i=r(7);Object.defineProperty(t,"CheckBoxField",{enumerable:!0,get:function(){return i.CheckBoxField}}),Object.defineProperty(t,"EmailField",{enumerable:!0,get:function(){return i.EmailField}}),Object.defineProperty(t,"FileField",{enumerable:!0,get:function(){return i.FileField}}),Object.defineProperty(t,"PasswordField",{enumerable:!0,get:function(){return i.PasswordField}}),Object.defineProperty(t,"RadioField",{enumerable:!0,get:function(){return i.RadioField}}),Object.defineProperty(t,"RadioGroup",{enumerable:!0,get:function(){return i.RadioGroup}}),Object.defineProperty(t,"SelectField",{enumerable:!0,get:function(){return i.SelectField}}),Object.defineProperty(t,"SubmitButton",{enumerable:!0,get:function(){return i.SubmitButton}}),Object.defineProperty(t,"TextAreaField",{enumerable:!0,get:function(){return i.TextAreaField}}),Object.defineProperty(t,"TextInputField",{enumerable:!0,get:function(){return i.TextInputField}});const n=r(25);Object.defineProperty(t,"areFieldsEqual",{enumerable:!0,get:function(){return n.areFieldsEqual}}),Object.defineProperty(t,"customValidator",{enumerable:!0,get:function(){return n.customValidator}}),Object.defineProperty(t,"isChecked",{enumerable:!0,get:function(){return n.isChecked}}),Object.defineProperty(t,"isEmailValid",{enumerable:!0,get:function(){return n.isEmailValid}}),Object.defineProperty(t,"isFieldEmpty",{enumerable:!0,get:function(){return n.isFieldEmpty}}),Object.defineProperty(t,"isFile",{enumerable:!0,get:function(){return n.isFile}}),Object.defineProperty(t,"isRadioChecked",{enumerable:!0,get:function(){return n.isRadioChecked}});const s=r(6);Object.defineProperty(t,"createFileRef",{enumerable:!0,get:function(){return s.createFileRef}}),Object.defineProperty(t,"getFileFromRef",{enumerable:!0,get:function(){return s.getFileFromRef}})},function(e,t,r){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,r,a){void 0===a&&(a=r),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,a){void 0===a&&(a=r),e[a]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&a(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.FormElementValidators=t.ValidationResults=void 0;const s=n(r(0)),o=r(2);function u(e){const{results:t,styles:r}=e;return s.default.createElement(s.default.Fragment,null,t.map(e=>e.messages.map((e,t)=>s.default.createElement("div",{key:t,className:r},e))))}t.ValidationResults=u,t.FormElementValidators=e=>{const t=s.useContext(o.FormContext).bare?e.className:"alert mt-2 alert-danger "+e.className;return e.isTouched?s.default.createElement(u,{results:e.results,styles:t||""}):null}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createFileObject=void 0;const a=r(6);t.createFileObject=function(e){let t=a.getFileFromRef(e);if(t){let{name:e,lastModified:r,lastModifiedDate:a,size:i,type:n}=t;return{name:e,lastModified:r,lastModifiedDate:a,size:i,type:n}}return null}},function(e,t,r){"use strict";function a(e,t="",r={}){return t?{[t]:{...e[t],...r}}:{...e,...r}}Object.defineProperty(t,"__esModule",{value:!0}),t.updateRadioGroupStateFromPassedInContext=t.updateParentState=void 0,t.updateParentState=function(e,t,r=""){return(i,n)=>{t({...e,...a(e,r,{[n]:i.target.value})})}},t.updateRadioGroupStateFromPassedInContext=function(e,t,r=""){return(i,n,s)=>{if(s){let i={...e,...a(e,r,{[n]:!0})};for(let e of s.children)e.props.name!==n&&(i={...i,...a(i,r,{[e.props.name]:!1})});t(i)}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFieldValueType=t.getMetadataNameType=t.mergeDefaultCssWithProps=void 0;const a=r(2),i=r(7);t.mergeDefaultCssWithProps=function(e,t,r){let a="";return r||(a+=e+" "),t&&(a+=""+t),a},t.getMetadataNameType=function(e){switch(e){case i.FIELD_NAMES.TEXT:case i.FIELD_NAMES.EMAIL:case i.FIELD_NAMES.PASSWORD:case i.FIELD_NAMES.TEXTAREA:return a.METADATA_NAMES.INPUTS;case i.FIELD_NAMES.RADIO:return a.METADATA_NAMES.RADIO_GROUPS;case i.FIELD_NAMES.CHECKBOX:return a.METADATA_NAMES.CHECKBOXES;case i.FIELD_NAMES.SELECT:return a.METADATA_NAMES.INPUTS;case i.FIELD_NAMES.FILE:return a.METADATA_NAMES.FILES;default:return a.METADATA_NAMES.INPUTS}},t.getFieldValueType=function(e){switch(e){case i.FIELD_NAMES.TEXT:case i.FIELD_NAMES.EMAIL:case i.FIELD_NAMES.PASSWORD:case i.FIELD_NAMES.TEXTAREA:return"value";case i.FIELD_NAMES.CHECKBOX:return"checked";case i.FIELD_NAMES.SELECT:return"value";case i.FIELD_NAMES.FILE:return"file";case i.FIELD_NAMES.RADIO:return"checked";default:return"value"}}},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CheckBoxField=void 0;const i=a(r(0)),n=r(3);class s extends n.AbstractField{constructor(e,t){super(t,e),this.type=e,this.props=t}create(){return this.createField(this.getField())}formGroup(e){return i.default.createElement("div",{className:"form-group form-check"},e,this.props.labeltext&&i.default.createElement("label",{className:"form-check-label"},this.props.labeltext),this.props.hint&&i.default.createElement("small",{className:"form-text text-muted"},this.props.hint))}getField(){return()=>i.default.createElement(i.default.Fragment,null,i.default.createElement("input",Object.assign({},this.props,{type:this.type,checked:this.getStatePositionFromFormKey()[this.props.name]||!1,onChange:e=>this.context.updateParentState(this.overrideEvent(e,this.getStatePositionFromFormKey()[this.props.name]),this.props.name),name:this.props.name,className:n.AbstractField.mergeDefaultCssWithProps("form-check-input",this.props.className,this.context.bare)})))}}t.CheckBoxField=s},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FileField=void 0;const i=a(r(0)),n=r(3),s=r(1);class o extends n.AbstractField{constructor(e,t){super(t,e),this._updateFieldValidation=()=>{this.file=s.createFileObject(this.props.ref),void 0!==this.file&&this.validate()},this.type=e,this.props=t}get file(){return this._file}set file(e){this._file=e}create(){return this.createField(this.getField())}formGroup(e){return n._genericFormGroup(this.props,e)}getField(){return()=>i.default.createElement(i.default.Fragment,null,i.default.createElement("input",Object.assign({},this.props,{ref:this.props.ref,type:this.type,onChange:this._updateFieldValidation.bind(this),className:n.AbstractField.mergeDefaultCssWithProps("form-control-file",this.props.className,this.context.bare)})))}getFieldValue(e){return this.props.ref.current?s.createFileObject(this.props.ref):null}}t.FileField=o},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.InputField=void 0;const i=a(r(0)),n=r(3);class s extends n.AbstractField{constructor(e,t){super(t,e),this.type=e,this.props=t}create(){return this.createField(this.getField())}formGroup(e){return n._genericFormGroup(this.props,e)}getField(){return()=>i.default.createElement(i.default.Fragment,null,i.default.createElement("input",Object.assign({},this.props,{type:this.type,value:this.getStatePositionFromFormKey()[this.props.name]||"",onChange:e=>this.context.updateParentState(e,this.props.name),name:this.props.name,className:n.AbstractField.mergeDefaultCssWithProps("form-control",this.props.className,this.bare)})))}}t.InputField=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Metadata=void 0;const a=r(1),i=r(4),n=r(0);class s extends i.AbstractMetadata{constructor(e,t,r){super(e,t,r),this.defaultState={}}init(e,t){this.name=e,this.fieldType=t}update(e,t){let r;this.name in this.state?this.state[this.name]&&e!==this.state[this.name].fieldValues.currentValue&&(r={...this.state,[this.name]:{name:this.name,validation:t,fieldValues:{type:a.getFieldValueType(this.fieldType),currentValue:e},isTouched:!0}},n.useEffect(()=>{this.updateState(r)},[r])):(r={...this.state,[this.name]:{name:this.name,validation:t,isTouched:!1,fieldValues:{type:a.getFieldValueType(this.fieldType),currentValue:e}}},n.useEffect(()=>{this.updateState(r)},[r]))}}t.Metadata=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MetadataFile=void 0;const a=r(1),i=r(4),n=r(0);class s extends i.AbstractMetadata{constructor(e,t,r){super(e,t,r),this.defaultState={}}init(e,t){this.name=e,this.fieldType=t}update(e,t){let r;if(!(this.name in this.state))return r={...this.state,[this.name]:{name:this.name,validation:t,isTouched:!1,fieldValues:{type:a.getFieldValueType(this.fieldType),currentValue:{}}}},void n.useEffect(()=>{this.updateState(r)},[r]);if(this.state[this.name]){let i=this.state[this.name].fieldValues.currentValue;(null===e&&Object.keys(i).length||e&&e.name!==i.name)&&(r={...this.state,[this.name]:{name:this.name,validation:t,fieldValues:{type:a.getFieldValueType(this.fieldType),currentValue:e||{}},isTouched:!0}},this.updateState(r))}}}t.MetadataFile=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MetadataGroup=void 0;const a=r(1),i=r(4),n=r(0);class s extends i.AbstractMetadata{constructor(e,t,r){super(e,t,r),this.defaultState={}}init(e,t){this.name=e,this.fieldType=t}_createGroupState(e,t,r=!0){return{...this.state,[e.parentName]:{...this.state[e.parentName],[this.name]:{parent:e.parentName,name:this.name,validation:t||[],isTouched:r,fieldValues:{type:a.getFieldValueType(this.fieldType),value:e.value}}}}}update(e,t){let r={};this.state[e.parentName]?(this.state[e.parentName]&&!(this.name in this.state[e.parentName])||this.state[e.parentName][this.name]&&this.state[e.parentName][this.name].fieldValues.value!==e.value)&&(r=this._createGroupState(e,t),n.useEffect(()=>{this.updateState(r)})):(r=this._createGroupState(e,t,!1),n.useEffect(()=>{this.updateState(r)}))}isFieldTouched(){if(this.state&&this.parentName&&this.name&&this.state[this.parentName]){let e=this.state[this.parentName][this.name];if(e)return e.isTouched}return!1}}t.MetadataGroup=s},function(e,t,r){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,r,a){void 0===a&&(a=r),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,a){void 0===a&&(a=r),e[a]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&a(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.RadioField=void 0;const s=n(r(0)),o=r(3),u=r(2);class l extends o.AbstractField{constructor(e,t){super(t,e),this.handleOnChange=(e,t)=>{let r=this.overrideEvent(e,e.target.value);this.context.updateRadioGroupStateFromPassedInContext(r,this.props.name,t)},this.props=t,this.type=e,this.radioContext=s.useContext(u.RadioGroupContext),this.radioContext&&this.radioContext.parent&&(this.parentName=this.radioContext.parent.name,this.metadata.parentName=this.parentName)}get parentName(){return this.__parentName}set parentName(e){this.__parentName=e}create(){return this.createField(this.getField())}formGroup(e){return s.default.createElement("div",{className:"form-group form-check"},e,this.props.labeltext&&s.default.createElement("label",{className:"form-check-label"},this.props.labelText),this.props.hint&&s.default.createElement("small",{className:"form-text text-muted"},this.props.hint))}getField(){return()=>s.default.createElement("input",Object.assign({},this.props,{type:this.type,checked:this.getStatePositionFromFormKey()[this.props.name]||!1,name:this.props.name,onChange:e=>this.handleOnChange(e,this.radioContext),className:o.AbstractField.mergeDefaultCssWithProps("form-check-input",this.props.className,this.context.bare)}))}getFieldValue(e){var t,r,a;const i=null===(t=this.context)||void 0===t?void 0:t.formKey;return i?(null===(r=this.context)||void 0===r?void 0:r.state[i][this.props.name])||!1:(null===(a=this.context)||void 0===a?void 0:a.state[this.props.name])||!1}validate(){let e=this.getFieldValue(this.props),t=this.doValidation(e);return this.metadata.update({value:e,parentName:this.parentName,name:this.props.name},t),t}}t.RadioField=l},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectField=void 0;const i=a(r(0)),n=r(3);class s extends n.AbstractField{constructor(e,t){super(t,e),this.type=e,this.props=t}create(){return this.createField(this.getField())}formGroup(e){return n._genericFormGroup(this.props,e)}_getOptions(e=[]){return this.props.objectkey&&this.props.objectvalue?e.map((e,t)=>i.default.createElement("option",{value:e[this.props.objectkey],key:t},e[this.props.objectvalue])):e.map((e,t)=>i.default.createElement("option",{value:e,key:t},e))}getField(){const{options:e=[],size:t="default"}=this.props,r=this._getOptions(e);return()=>i.default.createElement("select",Object.assign({},this.props,{onChange:e=>this.context.updateParentState(e,this.props.name),name:this.props.name,className:n.AbstractField.mergeDefaultCssWithProps(this.getSelectCssName(this.props.size),this.props.className,this.context.bare)}),r||null)}getSelectCssName(e){return"default"===e?"form-control":"form-control form-control-"+e}}t.SelectField=s},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextAreaField=void 0;const i=a(r(0)),n=r(3),s=r(1);class o extends n.AbstractField{constructor(e,t){super(t,e),this.type=e,this.props=t}create(){return this.createField(this.getField())}formGroup(e){return n._genericFormGroup(this.props,e)}getField(){const{rows:e=5}=this.props;return()=>i.default.createElement("textarea",Object.assign({},this.props,{className:s.mergeDefaultCssWithProps("form-control",this.props.className,this.context.bare),rows:e,value:this.getStatePositionFromFormKey()[this.props.name]||"",onChange:e=>this.context.updateParentState(e,this.props.name),name:this.props.name}))}}t.TextAreaField=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EMAIL_REGEX=void 0,t.EMAIL_REGEX=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFormStateFromContext=t.customValidator=t.isChecked=t.isRadioChecked=t.isFile=t.isEmailValid=t.isFieldEmpty=t.areFieldsEqual=void 0;const a=r(1);function i(e){return(t=null)=>(...r)=>{const a=r[0],i=r[1],n=e(t,a,i);let s;return s=Array.isArray(n)&&n.length>=1?{isValid:!1,messages:n}:{isValid:!0,messages:[]},s}}function n(e){return e.formKey?e.state[e.formKey]:e.state}t.areFieldsEqual=i((e,t,r)=>{let a,i=["Fields do not match"],s=n(r);if(!(e in s))throw new Error(`React-BareForms Error: No Field with name of ${e} exists when calling 'areFieldsEqual' validator function.\n For more info, visit: https://joegasewicz.github.io/react-bare-forms/modules/_validators_.html#arefieldsequal`);if(a=s[e],!a||!t||t!==s[e])return i}),t.isFieldEmpty=i((e,t,r)=>{if(!(void 0!==t&&t.length>=e))return[`Must be at least ${e} characters`]}),t.isEmailValid=i((e,t,r)=>{if(!a.EMAIL_REGEX.test(String(t).toLowerCase()))return["Must be a valid email"]}),t.isFile=i((e,t,r)=>{if(!t)return["Must be a file type"]}),t.isRadioChecked=i((e,t,r)=>{if(!t)return["This option must be selected"]}),t.isChecked=i((e,t,r)=>{if(!1===t)return["Must be checked"]}),t.customValidator=i,t.getFormStateFromContext=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,