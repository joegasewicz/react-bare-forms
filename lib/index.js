!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports["react-bare-lib"]=e(require("react")):t["react-bare-lib"]=e(t.react)}(window,(function(t){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(e,n){e.exports=t},function(t,e,n){"use strict";n.r(e),n.d(e,"createFileRef",(function(){return l})),n.d(e,"getFileFromRef",(function(){return h})),n.d(e,"areFieldsEqual",(function(){return wt})),n.d(e,"customValidator",(function(){return Vt})),n.d(e,"isChecked",(function(){return Rt})),n.d(e,"isEmailValid",(function(){return Nt})),n.d(e,"isFieldEmpty",(function(){return Tt})),n.d(e,"isFile",(function(){return Ct})),n.d(e,"isRadioChecked",(function(){return At})),n.d(e,"FormConsumer",(function(){return Ft})),n.d(e,"CheckBoxField",(function(){return ot})),n.d(e,"EmailField",(function(){return nt})),n.d(e,"FileField",(function(){return ct})),n.d(e,"Form",(function(){return xt})),n.d(e,"PasswordField",(function(){return rt})),n.d(e,"RadioField",(function(){return ut})),n.d(e,"RadioGroup",(function(){return it})),n.d(e,"SubmitButton",(function(){return pt})),n.d(e,"TextAreaField",(function(){return at})),n.d(e,"TextInputField",(function(){return et})),n.d(e,"SelectField",(function(){return st}));var r=n(0),o=n.n(r);function a(t){var e=t.results,n=t.styles;return o.a.createElement(o.a.Fragment,null,e.map((function(t){return t.messages.map((function(t,e){return o.a.createElement("div",{key:e,className:n},t)}))})))}var i,u=function(t){var e=Object(r.useContext)(jt).bare?t.className:"alert mt-2 alert-danger "+t.className;return t.isTouched?o.a.createElement(a,{results:t.results,styles:e||""}):null},s=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),c=function(t,e,n){return"React Bare Forms ERROR:\n\t"+t+" - "+e+"\n\t- "+n},p=(c("Function","isFieldEmpty()","Missing argument: minLength (number)"),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e}(Error)),f=c("Required Props","context","You must pass in a context prop. Class components use 'state' & functional components must use useState hook. See https://joegasewicz.github.io/react-bare-forms/modules/_form_.html");function l(){return o.a.createRef()}function h(t){return t&&t.current&&Object.keys(t.current.files).length?t.current.files[0]:null}function m(t){var e=h(t);return e?{name:e.name,lastModified:e.lastModified,lastModifiedDate:e.lastModifiedDate,size:e.size,type:e.type}:null}var d=function(){return(d=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function y(t,e,n){var r;return void 0===e&&(e=""),void 0===n&&(n={}),e?((r={})[e]=d(d({},t[e]),n),r):d(d({},t),n)}function v(t,e,n){return void 0===n&&(n=""),function(r,o){var a;e(d(d({},t),y(t,n,((a={})[o]=r.target.value,a))))}}function b(t,e,n){return void 0===n&&(n=""),function(r,o,a){var i,u;if(a){for(var s=d(d({},t),y(t,n,((i={})[o]=!0,i))),c=0,p=a.children;c<p.length;c++){var f=p[c];f.props.name!==o&&(s=d(d({},s),y(s,n,((u={})[f.props.name]=!1,u))))}e(s)}}}var O=function(){return(O=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},g=function(){function t(){this.GROUP_TYPES=["radioGroups"]}return t.prototype.isGroup=function(t){return this.GROUP_TYPES.includes(t)},t.prototype.create=function(){var t=this;return function(e){for(var n=Object(r.useContext)(jt),a=e.className,i=void 0===a?"btn btn-success btn-lg":a,u=(e.disabled,!1),s=(n.metadata.inputs.state,0),c=Object.keys(n.metadata);s<c.length;s++){var p=c[s],f=n.metadata[p].state;if(t.isGroup(n.metadata[p].metaType))for(var l=0,h=Object.keys(f);l<h.length;l++){E=h[l];for(var m=0,d=Object.keys(f[E]);m<d.length;m++)for(var y=d[m],v=0,b=f[E][y].validation;v<b.length;v++){b[v].isValid||(u=!0)}}else for(var g=0,_=Object.keys(f);g<_.length;g++)for(var E,j=0,P=f[E=_[g]].validation;j<P.length;j++){P[j].isValid||(u=!0)}}return o.a.createElement("button",O({},e,{disabled:u,className:i}),e.children)}},t}(),_=function(){return(_=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},E=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};function j(t,e){return o.a.createElement("div",{className:"form-group"},t.labelText&&o.a.createElement("label",null,t.labelText),e,t.hint&&o.a.createElement("small",{className:"form-text text-muted"},t.hint))}var P,F=function(){function t(t,e){this.type=e,this.props=t,this.init()}return Object.defineProperty(t.prototype,"parentName",{get:function(){return this._parentName},set:function(t){this._parentName=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bare",{get:function(){return Boolean(this._bare)},set:function(t){this._bare=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"metadata",{get:function(){return this._metadata},set:function(t){this._metadata=t},enumerable:!1,configurable:!0}),t.prototype.init=function(){this.context=Object(r.useContext)(jt),this.metadata=this.context.metadata[lt(this.type)],this.metadata.init(this.props.name,this.type),this.bare=Boolean(this.context.bare)},t.prototype.getProps=function(){return this.props},t.prototype.createField=function(t){var e=this.props.validators||this.parentName?o.a.createElement(u,{isTouched:this.metadata.isFieldTouched(),results:this.validate(),name:this.props.name,type:lt(this.type),parent:this.parent}):null;return this.bare?o.a.createElement(o.a.Fragment,null,t(this.metadata.state),e):o.a.createElement(o.a.Fragment,null,this.formGroup(t(this.metadata.state)),e)},t.prototype.doValidation=function(t){var e=[];if(this.props.validators)for(var n=0,r=this.props.validators;n<r.length;n++){var o=r[n];e=E(e,[o(t,this.context)])}return e},t.prototype.validate=function(){var t=this.getFieldValue(this.props),e=this.doValidation(t);return this.metadata.update(t,e),e},t.prototype.getFieldValue=function(t){var e=ht(this.type);return this.props[e]},t.mergeDefaultCssWithProps=function(t,e,n){var r="";return n||(r+=t+" "),e&&(r+=""+e),r},t.prototype.overrideEvent=function(t,e){return _(_({},t),{target:_(_({},t.target),{value:!e})})},t.prototype.getStatePositionFromFormKey=function(){var t,e;return(null===(t=this.context)||void 0===t?void 0:t.formKey)?this.context.state[this.context.formKey]:null===(e=this.context)||void 0===e?void 0:e.state},t}(),S=function(){function t(t,e,n){this.state=t,this.updateState=e,this.metaType=n}return Object.defineProperty(t.prototype,"name",{get:function(){return this._name},set:function(t){this._name=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fieldType",{get:function(){return this._fieldType},set:function(t){this._fieldType=t},enumerable:!1,configurable:!0}),t.prototype.isFieldTouched=function(){return!!this.state[this.name]&&this.state[this.name].isTouched},t}(),x=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),w=function(){return(w=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},T=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return x(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return o.a.createElement("div",{className:"form-group form-check"},t,this.props.labelText&&o.a.createElement("label",{className:"form-check-label"},this.props.labelText),this.props.hint&&o.a.createElement("small",{className:"form-text text-muted"},this.props.hint))},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",w({},t.props,{type:t.type,checked:t.getStatePositionFromFormKey()[t.props.name]||!1,onChange:function(e){return t.context.updateParentState(t.overrideEvent(e,t.getStatePositionFromFormKey()[t.props.name]),t.props.name)},name:t.props.name,className:F.mergeDefaultCssWithProps("form-check-input",t.props.className,t.context.bare)})))}},e}(F),N=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),C=function(){return(C=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},A=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r._updateFieldValidation=function(){r.file=m(r.props.ref),void 0!==r.file&&r.validate()},r.type=e,r.props=n,r}return N(e,t),Object.defineProperty(e.prototype,"file",{get:function(){return this._file},set:function(t){this._file=t},enumerable:!1,configurable:!0}),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return j(this.props,t)},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",C({},t.props,{ref:t.props.ref,type:t.type,onChange:t._updateFieldValidation.bind(t),className:F.mergeDefaultCssWithProps("form-control-file",t.props.className,t.context.bare)})))}},e.prototype.getFieldValue=function(t){return this.props.ref.current?m(this.props.ref):null},e}(F),R=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),V=function(){return(V=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},I=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return R(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return j(this.props,t)},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",V({},t.props,{type:t.type,value:t.getStatePositionFromFormKey()[t.props.name]||"",onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name,className:F.mergeDefaultCssWithProps("form-control",t.props.className,t.bare)})))}},e}(F),k=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),K=function(){return(K=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},G=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return k(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype.update=function(t,e){var n,o,a,i=this;this.name in this.state?this.state[this.name]&&t!==this.state[this.name].fieldValues.currentValue&&(a=K(K({},this.state),((o={})[this.name]={name:this.name,validation:e,fieldValues:{type:ht(this.fieldType),currentValue:t},isTouched:!0},o)),Object(r.useEffect)((function(){i.updateState(a)}),[a])):(a=K(K({},this.state),((n={})[this.name]={name:this.name,validation:e,isTouched:!1,fieldValues:{type:ht(this.fieldType),currentValue:t}},n)),Object(r.useEffect)((function(){i.updateState(a)}),[a]))},e}(S),D=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),L=function(){return(L=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},M=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return D(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype.update=function(t,e){var n,o,a,i=this;if(!(this.name in this.state))return a=L(L({},this.state),((n={})[this.name]={name:this.name,validation:e,isTouched:!1,fieldValues:{type:ht(this.fieldType),currentValue:{}}},n)),void Object(r.useEffect)((function(){i.updateState(a)}),[a]);if(this.state[this.name]){var u=this.state[this.name].fieldValues.currentValue;(null===t&&Object.keys(u).length||t&&t.name!==u.name)&&(a=L(L({},this.state),((o={})[this.name]={name:this.name,validation:e,fieldValues:{type:ht(this.fieldType),currentValue:t||{}},isTouched:!0},o)),this.updateState(a))}},e}(S),X=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),B=function(){return(B=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},U=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return X(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype._createGroupState=function(t,e,n){var r,o;return void 0===n&&(n=!0),B(B({},this.state),((r={})[t.parentName]=B(B({},this.state[t.parentName]),((o={})[this.name]={parent:t.parentName,name:this.name,validation:e||[],isTouched:n,fieldValues:{type:ht(this.fieldType),value:t.value}},o)),r))},e.prototype.update=function(t,e){var n=this,o={};this.state[t.parentName]?(this.state[t.parentName]&&!(this.name in this.state[t.parentName])||this.state[t.parentName][this.name]&&this.state[t.parentName][this.name].fieldValues.value!==t.value)&&(o=this._createGroupState(t,e),Object(r.useEffect)((function(){n.updateState(o)}))):(o=this._createGroupState(t,e,!1),Object(r.useEffect)((function(){n.updateState(o)})))},e.prototype.isFieldTouched=function(){if(this.state&&this.parentName&&this.name&&this.state[this.parentName]){var t=this.state[this.parentName][this.name];if(t)return t.isTouched}return!1},e}(S),W=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),z=function(){return(z=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},H=function(t){function e(e,n){var o=t.call(this,n,e)||this;return o.handleOnChange=function(t,e){var n=o.overrideEvent(t,t.target.value);o.context.updateRadioGroupStateFromPassedInContext(n,o.props.name,e)},o.props=n,o.type=e,o.radioContext=Object(r.useContext)(Et),o.radioContext&&o.radioContext.parent&&(o.parentName=o.radioContext.parent.name,o.metadata.parentName=o.parentName),o}return W(e,t),Object.defineProperty(e.prototype,"parentName",{get:function(){return this.__parentName},set:function(t){this.__parentName=t},enumerable:!1,configurable:!0}),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return o.a.createElement("div",{className:"form-group form-check"},t,this.props.labelText&&o.a.createElement("label",{className:"form-check-label"},this.props.labelText),this.props.hint&&o.a.createElement("small",{className:"form-text text-muted"},this.props.hint))},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement("input",z({},t.props,{type:t.type,checked:t.getStatePositionFromFormKey()[t.props.name]||!1,name:t.props.name,onChange:function(e){return t.handleOnChange(e,t.radioContext)},className:F.mergeDefaultCssWithProps("form-check-input",t.props.className,t.context.bare)}))}},e.prototype.getFieldValue=function(t){var e,n,r,o=null===(e=this.context)||void 0===e?void 0:e.formKey;return o?(null===(n=this.context)||void 0===n?void 0:n.state[o][this.props.name])||!1:(null===(r=this.context)||void 0===r?void 0:r.state[this.props.name])||!1},e.prototype.validate=function(){var t=this.getFieldValue(this.props),e=this.doValidation(t);return this.metadata.update({value:t,parentName:this.parentName,name:this.props.name},e),e},e}(F),q=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Y=function(){return(Y=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},Z=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return q(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return j(this.props,t)},e.prototype._getOptions=function(t){var e=this;return void 0===t&&(t=[]),this.props.objectKey&&this.props.objectValue?t.map((function(t,n){return o.a.createElement("option",{value:t[e.props.objectKey],key:n},t[e.props.objectValue])})):t.map((function(t,e){return o.a.createElement("option",{value:t,key:e},t)}))},e.prototype.getField=function(){var t=this,e=this.props,n=e.options,r=void 0===n?[]:n,a=(e.size,this._getOptions(r));return function(){return o.a.createElement("select",Y({},t.props,{onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name,className:F.mergeDefaultCssWithProps(t.getSelectCssName(t.props.size),t.props.className,t.context.bare)}),a||null)}},e.prototype.getSelectCssName=function(t){return"default"===t?"form-control":"form-control form-control-"+t},e}(F),$=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),J=function(){return(J=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},Q=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return $(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return j(this.props,t)},e.prototype.getField=function(){var t=this,e=this.props.rows,n=void 0===e?5:e;return function(){return o.a.createElement("textarea",J({},t.props,{className:ft("form-control",t.props.className,t.context.bare),rows:n,value:t.getStatePositionFromFormKey()[t.props.name]||"",onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name}))}},e}(F),tt=function(){return(tt=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(t){t.TEXT="text",t.EMAIL="email",t.PASSWORD="password",t.TEXTAREA="textArea",t.RADIO="radio",t.CHECKBOX="checkbox",t.SELECT="select",t.FILE="file"}(P||(P={}));var et=function(t){return new I(P.TEXT,t).create()},nt=function(t){return new I(P.EMAIL,t).create()},rt=function(t){return new I(P.PASSWORD,t).create()},ot=function(t){return new T(P.CHECKBOX,t).create()},at=function(t){return new Q(P.TEXTAREA,t).create()};function it(t){var e={parent:{name:t.name},children:t.children};return o.a.createElement(Et.Provider,{value:e},t.children)}var ut=function(t){return new H(P.RADIO,t).create()},st=function(t){return new Z(P.SELECT,t).create()},ct=o.a.forwardRef((function(t,e){var n=tt(tt({},t),{ref:e});return new A(P.FILE,n).create()})),pt=(new g).create();function ft(t,e,n){var r="";return n||(r+=t+" "),e&&(r+=""+e),r}function lt(t){switch(t){case P.TEXT:case P.EMAIL:case P.PASSWORD:case P.TEXTAREA:return mt.INPUTS;case P.RADIO:return mt.RADIO_GROUPS;case P.CHECKBOX:return mt.CHECKBOXES;case P.SELECT:return mt.INPUTS;case P.FILE:return mt.FILES;default:return mt.INPUTS}}function ht(t){switch(t){case P.TEXT:case P.EMAIL:case P.PASSWORD:case P.TEXTAREA:return"value";case P.CHECKBOX:return"checked";case P.SELECT:return"value";case P.FILE:return"file";case P.RADIO:return"checked";default:return"value"}}var mt,dt=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,yt=function(){return(yt=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(t){t.INPUTS="inputs",t.RADIO_GROUPS="radioGroups",t.FILES="files",t.CHECKBOXES="checkboxes"}(mt||(mt={}));var vt={},bt={},Ot={},gt={},_t={bare:!1,state:{},formKey:null,debug:!1,dynamic:!0,metadata:{inputs:null,radioGroups:null,files:null,checkboxes:null}},Et=o.a.createContext(bt),jt=o.a.createContext(_t),Pt=jt.Provider,Ft=jt.Consumer,St=function(t){return function(e){e.preventDefault();var n=t.callback;"function"==typeof n&&n()&&n()}},xt=function(t){var e,n=Object(r.useState)(t.state),a=n[0],i=n[1],u=Object(r.useState)(_t),s=u[0],c=(u[1],Object(r.useState)(vt)),l=c[0],h=c[1],m=Object(r.useState)(gt),d=m[0],y=m[1],O=Object(r.useState)(Ot),g=O[0],_=O[1],E=Object(r.useState)(bt),j=E[0],P=E[1];if(t.context&&"setState"in t.context)Object(r.useEffect)((function(){t.context.setState(yt({},a))}),[a]);else{if(!t.context)throw new p(f);Object(r.useEffect)((function(){t.context(yt({},a))}),[a])}var F={bare:t.bare||s.bare,state:t.state,formKey:t.formKey,debug:t.debug||s.debug,dynamic:t.dynamic||s.dynamic,updateParentState:v(a,i,t.formKey),updateRadioGroupStateFromPassedInContext:b(a,i,t.formKey),metadata:(e={},e[mt.INPUTS]=new G(l,h,mt.INPUTS),e[mt.CHECKBOXES]=new G(d,y,mt.CHECKBOXES),e[mt.FILES]=new M(g,_,mt.FILES),e[mt.RADIO_GROUPS]=new U(j,P,mt.RADIO_GROUPS),e)};return o.a.createElement(Pt,{value:F},o.a.createElement("form",{onSubmit:St(t)},t.children))},wt=Vt((function(t,e,n){var r=function(t){if(t.formKey)return t.state[t.formKey];return t.state}(n);if(!(t in r))throw new Error("React-BareForms Error: No Field with name of "+t+" exists when calling 'areFieldsEqual' validator function.\n For more info, visit: https://joegasewicz.github.io/react-bare-forms/modules/_validators_.html#arefieldsequal");if(!r[t]||!e||e!==r[t])return["Fields do not match"]})),Tt=Vt((function(t,e,n){if(!(void 0!==e&&e.length>=t))return["Must be at least "+t+" characters"]})),Nt=Vt((function(t,e,n){if(!dt.test(String(e).toLowerCase()))return["Must be a valid email"]})),Ct=Vt((function(t,e,n){if(!e)return["Must be a file type"]})),At=Vt((function(t,e,n){if(!e)return["This option must be selected"]})),Rt=Vt((function(t,e,n){if(!1===e)return["Must be checked"]}));function Vt(t){return function(e){return void 0===e&&(e=null),function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=n[0],a=n[1],i=t(e,o,a);return Array.isArray(i)&&i.length>=1?{isValid:!1,messages:i}:{isValid:!0,messages:[]}}}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,