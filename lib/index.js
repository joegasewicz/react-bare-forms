!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports["react-bare-lib"]=e(require("react")):t["react-bare-lib"]=e(t.react)}(window,(function(t){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(e,n){e.exports=t},function(t,e,n){"use strict";n.r(e),n.d(e,"createFileRef",(function(){return l})),n.d(e,"getFileFromRef",(function(){return h})),n.d(e,"areFieldsEqual",(function(){return _t})),n.d(e,"customValidator",(function(){return xt})),n.d(e,"isChecked",(function(){return St})),n.d(e,"isEmailValid",(function(){return Ft})),n.d(e,"isFieldEmpty",(function(){return Et})),n.d(e,"isFile",(function(){return Pt})),n.d(e,"isRadioChecked",(function(){return jt})),n.d(e,"FormConsumer",(function(){return bt})),n.d(e,"CheckBoxField",(function(){return $})),n.d(e,"EmailField",(function(){return Y})),n.d(e,"FileField",(function(){return nt})),n.d(e,"Form",(function(){return gt})),n.d(e,"PasswordField",(function(){return Z})),n.d(e,"RadioField",(function(){return tt})),n.d(e,"RadioGroup",(function(){return Q})),n.d(e,"SubmitButton",(function(){return rt})),n.d(e,"TextAreaField",(function(){return J})),n.d(e,"TextInputField",(function(){return q})),n.d(e,"SelectField",(function(){return et}));var r=n(0),o=n.n(r);function a(t){var e=t.results,n=t.styles;return o.a.createElement(o.a.Fragment,null,e.map((function(t){return t.messages.map((function(t,e){return o.a.createElement("div",{key:e,className:n},t)}))})))}var i,u=function(t){var e=Object(r.useContext)(yt).bare?t.className:"alert mt-2 alert-danger "+t.className;return t.isTouched?o.a.createElement(a,{results:t.results,styles:e||""}):null},s=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),c=function(t,e,n){return"React Bare Forms ERROR:\n\t"+t+" - "+e+"\n\t- "+n},p=(c("Function","isFieldEmpty()","Missing argument: minLength (number)"),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e}(Error)),f=c("Required Props","context","You must pass in a context prop. Class components use 'state' & functional components must use useState hook. See https://joegasewicz.github.io/react-bare-forms/modules/_form_.html");function l(){return o.a.createRef()}function h(t){return t&&t.current&&Object.keys(t.current.files).length?t.current.files[0]:null}function d(t){var e=h(t);return e?{name:e.name,lastModified:e.lastModified,lastModifiedDate:e.lastModifiedDate,size:e.size,type:e.type}:null}var m=function(){return(m=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function y(t,e,n){var r;return void 0===e&&(e=""),void 0===n&&(n={}),e?((r={})[e]=m(m({},t[e]),n),r):m(m({},t),n)}function v(t,e,n){return void 0===n&&(n=""),function(r,o){var a;e(m(m({},t),y(t,n,((a={})[o]=r.target.value,a))))}}function b(t,e,n){return void 0===n&&(n=""),function(r,o,a){var i,u;if(a){for(var s=m(m({},t),y(t,n,((i={})[o]=!0,i))),c=0,p=a.children;c<p.length;c++){var f=p[c];f.props.name!==o&&(s=m(m({},s),y(s,n,((u={})[f.props.name]=!1,u))))}e(s)}}}var O=function(){function t(){this.GROUP_TYPES=["radioGroups"]}return t.prototype.isGroup=function(t){return this.GROUP_TYPES.includes(t)},t.prototype.create=function(){var t=this;return function(e){for(var n=Object(r.useContext)(yt),a=e.className,i=void 0===a?"btn btn-success btn-lg":a,u=(e.disabled,!1),s=(n.metadata.inputs.state,0),c=Object.keys(n.metadata);s<c.length;s++){var p=c[s],f=n.metadata[p].state;if(t.isGroup(n.metadata[p].metaType))for(var l=0,h=Object.keys(f);l<h.length;l++){_=h[l];for(var d=0,m=Object.keys(f[_]);d<m.length;d++)for(var y=m[d],v=0,b=f[_][y].validation;v<b.length;v++){b[v].isValid||(u=!0)}}else for(var O=0,g=Object.keys(f);O<g.length;O++)for(var _,E=0,F=f[_=g[O]].validation;E<F.length;E++){F[E].isValid||(u=!0)}}return o.a.createElement("button",{disabled:u,className:i},e.children)}},t}(),g=function(){return(g=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},_=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};function E(t,e){return o.a.createElement("div",{className:"form-group"},t.labelText&&o.a.createElement("label",null,t.labelText),e,t.hint&&o.a.createElement("small",{className:"form-text text-muted"},t.hint))}var F,P=function(){function t(t,e){this.type=e,this.props=t,this.init()}return Object.defineProperty(t.prototype,"bare",{get:function(){return Boolean(this._bare)},set:function(t){this._bare=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"metadata",{get:function(){return this._metadata},set:function(t){this._metadata=t},enumerable:!0,configurable:!0}),t.prototype.init=function(){this.context=Object(r.useContext)(yt),this.metadata=this.context.metadata[at(this.type)],this.metadata.init(this.props.name,this.type),this.bare=Boolean(this.context.bare)},t.prototype.getProps=function(){return this.props},t.prototype.createField=function(t){var e=this.props.validators||this.parentName?o.a.createElement(u,{isTouched:this.metadata.isFieldTouched(),results:this.validate(),name:this.props.name,type:at(this.type),parent:this.parent}):null;return this.bare?o.a.createElement(o.a.Fragment,null,t(this.metadata.state),e):o.a.createElement(o.a.Fragment,null,this.formGroup(t(this.metadata.state)),e)},t.prototype.doValidation=function(t){var e=[];if(this.props.validators)for(var n=0,r=this.props.validators;n<r.length;n++){var o=r[n];e=_(e,[o(t,this.context)])}return e},t.prototype.validate=function(){var t=this.getFieldValue(this.props),e=this.doValidation(t);return this.metadata.update(t,e),e},t.prototype.getFieldValue=function(t){var e=it(this.type);return this.props[e]},t.mergeDefaultCssWithProps=function(t,e,n){var r="";return n||(r+=t+" "),e&&(r+=""+e),r},t.prototype.overrideEvent=function(t,e){return g(g({},t),{target:g(g({},t.target),{value:!e})})},t.prototype.getStatePositionFromFormKey=function(){var t,e;return(null===(t=this.context)||void 0===t?void 0:t.formKey)?this.context.state[this.context.formKey]:null===(e=this.context)||void 0===e?void 0:e.state},t}(),j=function(){function t(t,e,n){this.state=t,this.updateState=e,this.metaType=n}return Object.defineProperty(t.prototype,"name",{get:function(){return this._name},set:function(t){this._name=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fieldType",{get:function(){return this._fieldType},set:function(t){this._fieldType=t},enumerable:!0,configurable:!0}),t.prototype.isFieldTouched=function(){return!!this.state[this.name]&&this.state[this.name].isTouched},t}(),S=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),x=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return S(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return o.a.createElement("div",{className:"form-group form-check"},t,this.props.labelText&&o.a.createElement("label",{className:"form-check-label"},this.props.labelText),this.props.hint&&o.a.createElement("small",{className:"form-text text-muted"},this.props.hint))},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",{type:t.type,checked:t.getStatePositionFromFormKey()[t.props.name]||!1,onChange:function(e){return t.context.updateParentState(t.overrideEvent(e,t.getStatePositionFromFormKey()[t.props.name]),t.props.name)},name:t.props.name,className:P.mergeDefaultCssWithProps("form-check-input",t.props.className,t.context.bare)}))}},e}(P),T=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),w=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r._updateFieldValidation=function(){r.file=d(r.props.ref),void 0!==r.file&&r.validate()},r.type=e,r.props=n,r}return T(e,t),Object.defineProperty(e.prototype,"file",{get:function(){return this._file},set:function(t){this._file=t},enumerable:!0,configurable:!0}),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return E(this.props,t)},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",{ref:t.props.ref,type:t.type,onChange:t._updateFieldValidation.bind(t),className:P.mergeDefaultCssWithProps("form-control-file",t.props.className,t.context.bare)}))}},e.prototype.getFieldValue=function(t){return this.props.ref.current?d(this.props.ref):null},e}(P),C=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),N=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return C(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return E(this.props,t)},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",{type:t.type,value:t.getStatePositionFromFormKey()[t.props.name]||"",onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name,className:P.mergeDefaultCssWithProps("form-control",t.props.className,t.bare)}))}},e}(P),A=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),R=function(){return(R=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},V=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return A(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype.update=function(t,e){var n,o,a,i=this;this.name in this.state?this.state[this.name]&&t!==this.state[this.name].fieldValues.currentValue&&(a=R(R({},this.state),((o={})[this.name]={name:this.name,validation:e,fieldValues:{type:it(this.fieldType),currentValue:t},isTouched:!0},o)),Object(r.useEffect)((function(){i.updateState(a)}),[a])):(a=R(R({},this.state),((n={})[this.name]={name:this.name,validation:e,isTouched:!1,fieldValues:{type:it(this.fieldType),currentValue:t}},n)),Object(r.useEffect)((function(){i.updateState(a)}),[a]))},e}(j),I=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),k=function(){return(k=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},K=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return I(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype.update=function(t,e){var n,o,a,i=this;if(!(this.name in this.state))return a=k(k({},this.state),((n={})[this.name]={name:this.name,validation:e,isTouched:!1,fieldValues:{type:it(this.fieldType),currentValue:{}}},n)),void Object(r.useEffect)((function(){i.updateState(a)}),[a]);if(this.state[this.name]){var u=this.state[this.name].fieldValues.currentValue;(null===t&&Object.keys(u).length||t&&t.name!==u.name)&&(a=k(k({},this.state),((o={})[this.name]={name:this.name,validation:e,fieldValues:{type:it(this.fieldType),currentValue:t||{}},isTouched:!0},o)),this.updateState(a))}},e}(j),G=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),D=function(){return(D=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},L=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return G(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype._createGroupState=function(t,e,n){var r,o;return void 0===n&&(n=!0),D(D({},this.state),((r={})[t.parentName]=D(D({},this.state[t.parentName]),((o={})[this.name]={parent:t.parentName,name:this.name,validation:e||[],isTouched:n,fieldValues:{type:it(this.fieldType),value:t.value}},o)),r))},e.prototype.update=function(t,e){var n=this,o={};this.state[t.parentName]?(this.state[t.parentName]&&!(this.name in this.state[t.parentName])||this.state[t.parentName][this.name]&&this.state[t.parentName][this.name].fieldValues.value!==t.value)&&(o=this._createGroupState(t,e),Object(r.useEffect)((function(){n.updateState(o)}))):(o=this._createGroupState(t,e,!1),Object(r.useEffect)((function(){n.updateState(o)})))},e.prototype.isFieldTouched=function(){if(this.state&&this.parentName&&this.name&&this.state[this.parentName]){var t=this.state[this.parentName][this.name];if(t)return t.isTouched}return!1},e}(j),M=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),X=function(t){function e(e,n){var o=t.call(this,n,e)||this;return o.handleOnChange=function(t,e){var n=o.overrideEvent(t,t.target.value);o.context.updateRadioGroupStateFromPassedInContext(n,o.props.name,e)},o.props=n,o.type=e,o.radioContext=Object(r.useContext)(mt),o.radioContext&&o.radioContext.parent&&(o.parentName=o.radioContext.parent.name,o.metadata.parentName=o.parentName),o}return M(e,t),Object.defineProperty(e.prototype,"parentName",{get:function(){return this._parentName},set:function(t){this._parentName=t},enumerable:!0,configurable:!0}),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return o.a.createElement("div",{className:"form-group form-check"},t,this.props.labelText&&o.a.createElement("label",{className:"form-check-label"},this.props.labelText),this.props.hint&&o.a.createElement("small",{className:"form-text text-muted"},this.props.hint))},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement("input",{type:t.type,checked:t.getStatePositionFromFormKey()[t.props.name]||!1,name:t.props.name,onChange:function(e){return t.handleOnChange(e,t.radioContext)},className:P.mergeDefaultCssWithProps("form-check-input",t.props.className,t.context.bare)})}},e.prototype.getFieldValue=function(t){var e,n,r,o=null===(e=this.context)||void 0===e?void 0:e.formKey;return o?(null===(n=this.context)||void 0===n?void 0:n.state[o][this.props.name])||!1:(null===(r=this.context)||void 0===r?void 0:r.state[this.props.name])||!1},e.prototype.validate=function(){var t=this.getFieldValue(this.props),e=this.doValidation(t);return this.metadata.update({value:t,parentName:this.parentName,name:this.props.name},e),e},e}(P),B=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),U=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return B(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return E(this.props,t)},e.prototype._getOptions=function(t){var e=this;return void 0===t&&(t=[]),this.props.objectKey&&this.props.objectValue?t.map((function(t,n){return o.a.createElement("option",{value:t[e.props.objectKey],key:n},t[e.props.objectValue])})):t.map((function(t,e){return o.a.createElement("option",{value:t,key:e},t)}))},e.prototype.getField=function(){var t=this,e=this.props,n=e.options,r=void 0===n?[]:n,a=(e.size,this._getOptions(r));return function(){return o.a.createElement("select",{onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name,className:P.mergeDefaultCssWithProps(t.getSelectCssName(t.props.size),t.props.className,t.context.bare)},a||null)}},e.prototype.getSelectCssName=function(t){return"default"===t?"form-control":"form-control form-control-"+t},e}(P),W=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),z=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return W(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return E(this.props,t)},e.prototype.getField=function(){var t=this,e=this.props.rows,n=void 0===e?5:e;return function(){return o.a.createElement("textarea",{className:ot("form-control",t.props.className,t.context.bare),rows:n,value:t.getStatePositionFromFormKey()[t.props.name]||"",onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name})}},e}(P),H=function(){return(H=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(t){t.TEXT="text",t.EMAIL="email",t.PASSWORD="password",t.TEXTAREA="textArea",t.RADIO="radio",t.CHECKBOX="checkbox",t.SELECT="select",t.FILE="file"}(F||(F={}));var q=function(t){return new N(F.TEXT,t).create()},Y=function(t){return new N(F.EMAIL,t).create()},Z=function(t){return new N(F.PASSWORD,t).create()},$=function(t){return new x(F.CHECKBOX,t).create()},J=function(t){return new z(F.TEXTAREA,t).create()};function Q(t){var e={parent:{name:t.name},children:t.children};return o.a.createElement(mt.Provider,{value:e},t.children)}var tt=function(t){return new X(F.RADIO,t).create()},et=function(t){return new U(F.SELECT,t).create()},nt=o.a.forwardRef((function(t,e){var n=H(H({},t),{ref:e});return new w(F.FILE,n).create()})),rt=(new O).create();function ot(t,e,n){var r="";return n||(r+=t+" "),e&&(r+=""+e),r}function at(t){switch(t){case F.TEXT:case F.EMAIL:case F.PASSWORD:case F.TEXTAREA:return ut.INPUTS;case F.RADIO:return ut.RADIO_GROUPS;case F.CHECKBOX:return ut.CHECKBOXES;case F.SELECT:return ut.INPUTS;case F.FILE:return ut.FILES;default:return ut.INPUTS}}function it(t){switch(t){case F.TEXT:case F.EMAIL:case F.PASSWORD:case F.TEXTAREA:return"value";case F.CHECKBOX:return"checked";case F.SELECT:return"value";case F.FILE:return"file";case F.RADIO:return"checked";default:return"value"}}var ut,st=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,ct=function(){return(ct=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(t){t.INPUTS="inputs",t.RADIO_GROUPS="radioGroups",t.FILES="files",t.CHECKBOXES="checkboxes"}(ut||(ut={}));var pt={},ft={},lt={},ht={},dt={bare:!1,state:{},formKey:null,debug:!1,dynamic:!0,metadata:{inputs:null,radioGroups:null,files:null,checkboxes:null}},mt=o.a.createContext(ft),yt=o.a.createContext(dt),vt=yt.Provider,bt=yt.Consumer,Ot=function(t){return function(e){e.preventDefault();var n=t.callback;"function"==typeof n&&n()&&n()}},gt=function(t){var e,n=Object(r.useState)(t.state),a=n[0],i=n[1],u=Object(r.useState)(dt),s=u[0],c=(u[1],Object(r.useState)(pt)),l=c[0],h=c[1],d=Object(r.useState)(ht),m=d[0],y=d[1],O=Object(r.useState)(lt),g=O[0],_=O[1],E=Object(r.useState)(ft),F=E[0],P=E[1];if(t.context&&"setState"in t.context)Object(r.useEffect)((function(){t.context.setState(ct({},a))}),[a]);else{if(!t.context)throw new p(f);Object(r.useEffect)((function(){t.context(ct({},a))}),[a])}var j={bare:t.bare||s.bare,state:t.state,formKey:t.formKey,debug:t.debug||s.debug,dynamic:t.dynamic||s.dynamic,updateParentState:v(a,i,t.formKey),updateRadioGroupStateFromPassedInContext:b(a,i,t.formKey),metadata:(e={},e[ut.INPUTS]=new V(l,h,ut.INPUTS),e[ut.CHECKBOXES]=new V(m,y,ut.CHECKBOXES),e[ut.FILES]=new K(g,_,ut.FILES),e[ut.RADIO_GROUPS]=new L(F,P,ut.RADIO_GROUPS),e)};return o.a.createElement(vt,{value:j},o.a.createElement("form",{onSubmit:Ot(t)},t.children))},_t=xt((function(t,e,n){var r=function(t){if(t.formKey)return t.state[t.formKey];return t.state}(n);if(!(t in r))throw new Error("React-BareForms Error: No Field with name of "+t+" exists when calling 'areFieldsEqual' validator function.\n For more info, visit: https://joegasewicz.github.io/react-bare-forms/modules/_validators_.html#arefieldsequal");if(!r[t]||!e||e!==r[t])return["Fields do not match"]})),Et=xt((function(t,e,n){if(!(void 0!==e&&e.length>=t))return["Must be at least "+t+" characters"]})),Ft=xt((function(t,e,n){if(!st.test(String(e).toLowerCase()))return["Must be a valid email"]})),Pt=xt((function(t,e,n){if(!e)return["Must be a file type"]})),jt=xt((function(t,e,n){if(!e)return["This option must be selected"]})),St=xt((function(t,e,n){if(!1===e)return["Must be checked"]}));function xt(t){return function(e){return void 0===e&&(e=null),function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=n[0],a=n[1],i=t(e,o,a);return Array.isArray(i)&&i.length>=1?{isValid:!1,messages:i}:{isValid:!0,messages:[]}}}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvZXh0ZXJuYWwgXCJyZWFjdFwiIiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2NvcmUvX2NvbXBvbmVudHMudHN4Iiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2NvcmUvX2Vycm9ycy50cyIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy91bmNyb250cm9sbGVkLnRzIiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2NvcmUvX2ZpbGUudHMiLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvY29yZS9faGFuZGxlcnMudHMiLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvZmllbGRfY2xhc3Nlcy9fU3VibWl0QnV0dG9uLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9maWVsZF9jbGFzc2VzL19BYnN0cmFjdEZpZWxkLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9lbGVtZW50cy50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvY29yZS9fQWJzdHJhY3RNZXRhZGF0YS50cyIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9maWVsZF9jbGFzc2VzL19DaGVja0JveEZpZWxkLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9maWVsZF9jbGFzc2VzL19GaWxlRmllbGQudHN4Iiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2ZpZWxkX2NsYXNzZXMvX0lucHV0RmllbGQudHN4Iiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2NvcmUvX01ldGFkYXRhLnRzIiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2NvcmUvX01ldGFkYXRhRmlsZS50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvY29yZS9fTWV0YWRhdGFHcm91cC50cyIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9maWVsZF9jbGFzc2VzL19SYWRpb0ZpZWxkLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9maWVsZF9jbGFzc2VzL19TZWxlY3RGaWVsZC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvZmllbGRfY2xhc3Nlcy9fVGV4dEFyZWFGaWVsZC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvY29yZS9faGVscGVycy50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvY29yZS9fcmVnZXgudHMiLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvZm9ybS50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvdmFsaWRhdG9ycy50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlZhbGlkYXRpb25SZXN1bHRzIiwicHJvcHMiLCJyZXN1bHRzIiwic3R5bGVzIiwibWFwIiwicmVzdWx0IiwibWVzc2FnZXMiLCJtc2ciLCJpbmRleCIsImNsYXNzTmFtZSIsIkZvcm1FbGVtZW50VmFsaWRhdG9ycyIsIkZvcm1Db250ZXh0IiwiYmFyZSIsImlzVG91Y2hlZCIsIl90aHJvd05ld0Vycm9yTXNnIiwidHlwZSIsIm1lc3NhZ2UiLCJFcnJvciIsIl9ub0NvbnRleHRFcnJvciIsImNyZWF0ZUZpbGVSZWYiLCJjcmVhdGVSZWYiLCJnZXRGaWxlRnJvbVJlZiIsImZpbGVSZWYiLCJjdXJyZW50Iiwia2V5cyIsImZpbGVzIiwibGVuZ3RoIiwiY3JlYXRlRmlsZU9iamVjdCIsInJlZiIsImZpbGVEYXRhIiwibGFzdE1vZGlmaWVkIiwibGFzdE1vZGlmaWVkRGF0ZSIsInNpemUiLCJfZ2V0Q29ycmVjdFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleSIsInBhcmVudFN0YXRlIiwiZm9ybUtleSIsIm9iaiIsInVwZGF0ZVBhcmVudFN0YXRlIiwic2V0UGFyZW50U3RhdGUiLCJlIiwidGFyZ2V0IiwidXBkYXRlUmFkaW9Hcm91cFN0YXRlRnJvbVBhc3NlZEluQ29udGV4dCIsInJhZGlvR3JvdXAiLCJuZXdTdGF0ZSIsImNoaWxkcmVuIiwiR1JPVVBfVFlQRVMiLCJpc0dyb3VwIiwibWV0YVR5cGUiLCJ0aGlzIiwiaW5jbHVkZXMiLCJjb250ZXh0IiwiaXNEaXNhYmxlZCIsImRpc2FibGVkIiwibWV0YWRhdGEiLCJpbnB1dHMiLCJzdGF0ZSIsIm1ldGEiLCJtZXRhRmllbGQiLCJmaWVsZCIsImNoaWxkRmllbGQiLCJ2YWxpZGF0aW9uIiwiaXNWYWxpZCIsIl9nZW5lcmljRm9ybUdyb3VwIiwibGFiZWxUZXh0IiwiaGludCIsIkZJRUxEX05BTUVTIiwiaW5pdCIsIkJvb2xlYW4iLCJfYmFyZSIsInZhbCIsIl9tZXRhZGF0YSIsImdldE1ldGFkYXRhTmFtZVR5cGUiLCJnZXRQcm9wcyIsImNyZWF0ZUZpZWxkIiwiZmllbGRDYWxsYmFjayIsIl92YWxpZGF0ZSIsInZhbGlkYXRvcnMiLCJwYXJlbnROYW1lIiwiaXNGaWVsZFRvdWNoZWQiLCJ2YWxpZGF0ZSIsInBhcmVudCIsImZvcm1Hcm91cCIsImRvVmFsaWRhdGlvbiIsImdldEZpZWxkVmFsdWUiLCJ1cGRhdGUiLCJnZXRGaWVsZFZhbHVlVHlwZSIsIm1lcmdlRGVmYXVsdENzc1dpdGhQcm9wcyIsImRlZmF1bHRWYWx1ZSIsImNzc1Byb3BzIiwiY3NzU3RyIiwib3ZlcnJpZGVFdmVudCIsImdldFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleSIsInVwZGF0ZVN0YXRlIiwiX25hbWUiLCJfZmllbGRUeXBlIiwiZ2V0RmllbGQiLCJjaGVja2VkIiwib25DaGFuZ2UiLCJfdXBkYXRlRmllbGRWYWxpZGF0aW9uIiwiZmlsZSIsIl9maWxlIiwiXyIsImRlZmF1bHRTdGF0ZSIsImZpZWxkVHlwZSIsImZpZWxkVmFsdWVzIiwiY3VycmVudFZhbHVlIiwiQWJzdHJhY3RNZXRhZGF0YSIsIl9jcmVhdGVHcm91cFN0YXRlIiwibWV0YUdyb3VwIiwiaGFuZGxlT25DaGFuZ2UiLCJyYWRpb0NvbnRleHQiLCJldmVudCIsIlJhZGlvR3JvdXBDb250ZXh0IiwiX3BhcmVudE5hbWUiLCJfZ2V0T3B0aW9ucyIsIm9wdGlvbnMiLCJvYmplY3RLZXkiLCJvYmplY3RWYWx1ZSIsIm9wdFZhbCIsInNlbGVjdERhdGEiLCJnZXRTZWxlY3RDc3NOYW1lIiwicm93cyIsIlRleHRJbnB1dEZpZWxkIiwiVEVYVCIsIkVtYWlsRmllbGQiLCJFTUFJTCIsIlBhc3N3b3JkRmllbGQiLCJQQVNTV09SRCIsIkNIRUNLQk9YIiwiVEVYVEFSRUEiLCJSYWRpb0dyb3VwIiwiY29udGV4dFZhbHVlIiwiUHJvdmlkZXIiLCJSQURJTyIsIlNFTEVDVCIsImZvcndhcmRSZWYiLCJfcHJvcHMiLCJGSUxFIiwiTUVUQURBVEFfTkFNRVMiLCJJTlBVVFMiLCJSQURJT19HUk9VUFMiLCJDSEVDS0JPWEVTIiwiRklMRVMiLCJFTUFJTF9SRUdFWCIsIklOUFVUU19TVEFURSIsIlJBRElPX0dST1VQU19TVEFURSIsIkZJTEVTX1NUQVRFIiwiQ0hFQ0tCT1hFU19TVEFURSIsInByb3ZpZGVyQ29udGV4dCIsImRlYnVnIiwiZHluYW1pYyIsInJhZGlvR3JvdXBzIiwiY2hlY2tib3hlcyIsImNyZWF0ZUNvbnRleHQiLCJGb3JtUHJvdmlkZXIiLCJGb3JtQ29uc3VtZXIiLCJDb25zdW1lciIsImhhbmRsZVN1Ym1pdCIsInByZXZlbnREZWZhdWx0IiwiY2FsbGJhY2siLCJGb3JtIiwiaW5wdXRTdGF0ZSIsInVwZGF0ZUlucHV0U3RhdGUiLCJjaGVja2JveGVzU3RhdGUiLCJ1cGRhdGVDaGVja2JveGVzU3RhdGUiLCJmaWxlU3RhdGUiLCJ1cGRhdGVGaWxlU3RhdGUiLCJyYWRpb1N0YXRlIiwidXBkYXRlUmFkaW9TdGF0ZSIsInNldFN0YXRlIiwiX0ZpZWxkRW1wdHlFcnJvck1zZyIsIl9wcm92aWRlckNvbnRleHQiLCJvblN1Ym1pdCIsImFyZUZpZWxkc0VxdWFsIiwiY3VzdG9tVmFsaWRhdG9yIiwiZmllbGRLZXkiLCJmaWVsZFZhbHVlIiwiY29udGV4dFN0YXRlIiwiZ2V0Rm9ybVN0YXRlRnJvbUNvbnRleHQiLCJpc0ZpZWxkRW1wdHkiLCJtaW5MZW5ndGgiLCJpc0VtYWlsVmFsaWQiLCJ0ZXN0IiwiU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJpc0ZpbGUiLCJpc1JhZGlvQ2hlY2tlZCIsImlzQ2hlY2tlZCIsImFyZyIsImFyZ3MiLCJBcnJheSIsImlzQXJyYXkiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxFQUFRRyxRQUFRLFVBQ1IsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxDQUFDLFNBQVVKLEdBQ1EsaUJBQVpDLFFBQ2RBLFFBQVEsa0JBQW9CRCxFQUFRRyxRQUFRLFVBRTVDSixFQUFLLGtC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LEVBQVk5SCxHQUU5RSxJQURnQjZGLEdBQVl1QyxLQUFLQyxPQUFPUCxHQUFZUSxlQUVoRCxNQUFPLENBQUMsNEJBeUJIQyxHQUE4QlgsSUFBZ0IsU0FBQ3pFLEVBQUc5SCxFQUFNMkUsR0FDakUsSUFBSTNFLEVBQ0EsTUFBTyxDQUFDLDBCQTRCSG1OLEdBQXNDWixJQUFnQixTQUFDekUsRUFBSXBILEVBQU9pRSxHQUMzRSxJQUFJakUsRUFDQSxNQUFPLENBQUMsbUNBcUJIME0sR0FBaUNiLElBQWdCLFNBQUN6RSxFQUFHMkUsRUFBWTlILEdBQzFFLElBQWtCLElBQWY4SCxFQUNDLE1BQU8sQ0FBQyxzQkFxQ1QsU0FBU0YsR0FBZ0JmLEdBQzVCLE9BQU8sU0FBQzZCLEdBQ0osWUFESSxJQUFBQSxNQUFBLE1BQ0csVyxJQUFDLHNEQUVKLElBQU1aLEVBQWtCYSxFQUFLLEdBQ3ZCM0ksRUFBd0IySSxFQUFLLEdBQzdCdkwsRUFBV3lKLEVBQVM2QixFQUFLWixFQUFZOUgsR0FhM0MsT0FYSTRJLE1BQU1DLFFBQVF6TCxJQUFhQSxFQUFTb0IsUUFBVSxFQUM3QixDQUNibUMsU0FBUyxFQUNUdkQsU0FBUSxHQUdLLENBQ2J1RCxTQUFTLEVBQ1R2RCxTQUFVIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wicmVhY3RcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wicmVhY3QtYmFyZS1saWJcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wicmVhY3QtYmFyZS1saWJcIl0gPSBmYWN0b3J5KHJvb3RbXCJyZWFjdFwiXSk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXykge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fOyIsImltcG9ydCB7ZGVmYXVsdCBhcyBSZWFjdCwgdXNlQ29udGV4dH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7SVZhbGlkYXRpb259IGZyb20gXCIuLi92YWxpZGF0b3JzXCI7XG5pbXBvcnQge1JlYWN0RWxlbWVudH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge0Zvcm1Db250ZXh0LCBJRm9ybUNvbnRleHQsIE1FVEFEQVRBX05BTUVTfSBmcm9tIFwiLi4vZm9ybVwiO1xuXG5cblxuLyoqIEBpbnRlcm5hbCAqL1xuaW50ZXJmYWNlIElGb3JtRWxlbWVudFZhbGlkYXRvcnMge1xuICAgIHJlYWRvbmx5IHJlc3VsdHM6IEFycmF5PElWYWxpZGF0aW9uPjtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgdHlwZTogTUVUQURBVEFfTkFNRVM7XG4gICAgcmVhZG9ubHkgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHBhcmVudD86IHN0cmluZztcbiAgICByZWFkb25seSBpc1RvdWNoZWQ6IGJvb2xlYW47XG59XG4vKiogQGludGVybmFsICovXG50eXBlIFR5cGVWYWxpZGF0aW9uRWxlbWVudCA9IHsgcmVzdWx0czogQXJyYXk8SVZhbGlkYXRpb24+LCBzdHlsZXM6IHN0cmluZyB9O1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gVmFsaWRhdGlvblJlc3VsdHMocHJvcHM6IFR5cGVWYWxpZGF0aW9uRWxlbWVudCk6IFJlYWN0RWxlbWVudDxUeXBlVmFsaWRhdGlvbkVsZW1lbnQ+IHtcbiAgICBjb25zdCB7IHJlc3VsdHMsIHN0eWxlcyB9ID0gcHJvcHM7XG4gICAgcmV0dXJuICg8PntyZXN1bHRzLm1hcCgocmVzdWx0OiBJVmFsaWRhdGlvbikgPT5cbiAgICAgICAgcmVzdWx0Lm1lc3NhZ2VzLm1hcCgobXNnOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+XG4gICAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9IGNsYXNzTmFtZT17c3R5bGVzfT57bXNnfTwvZGl2PlxuICAgICAgICApKX08Lz4pO1xufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgRm9ybUVsZW1lbnRWYWxpZGF0b3JzID0gKHByb3BzOiBJRm9ybUVsZW1lbnRWYWxpZGF0b3JzKTogUmVhY3RFbGVtZW50fG51bGwgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQ6IElGb3JtQ29udGV4dCA9IHVzZUNvbnRleHQoRm9ybUNvbnRleHQpO1xuICAgIGNvbnN0IHN0eWxlcyA9ICFjb250ZXh0LmJhcmUgPyBgYWxlcnQgbXQtMiBhbGVydC1kYW5nZXIgJHtwcm9wcy5jbGFzc05hbWV9YCA6IHByb3BzLmNsYXNzTmFtZTtcbiAgICBpZihwcm9wcy5pc1RvdWNoZWQpe1xuICAgICAgICByZXR1cm4gPFZhbGlkYXRpb25SZXN1bHRzIHJlc3VsdHM9e3Byb3BzLnJlc3VsdHN9IHN0eWxlcz17c3R5bGVzIHx8IFwiXCJ9IC8+XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcbiIsIi8vIEVSUk9SUyAmIEVYQ0VQVElPTiBNRVNTQUdFU1xuLy9cbi8vIFRoZSBiZWxvdyBmdW5jdGlvbnMgYXJlIG9ubHkgZGVzaWduZWQgdG8gY29uc3RydWN0IEVycm9yICYgRXhjZXB0aW9ucyBtZXNzYWdlcy5cbi8vIFRoaXMgbWFrZXMgaXQgbXVjaCBzaW1wbGVyIHRvIHRlc3QsIHdoaWxlIGxlYXZpbmcgdGhlIG9wdGlvbiB0byB0aHJvdyBlaXRoZXJcbi8vIGFuIEVycm9yIG9yIGFuIEV4Y2VwdGlvbiB0byB0aGUgY2FsbGVyLlxuXG5cbi8qKlxuICpcbiAqIEBwYXJhbSB0eXBlXG4gKiBAcGFyYW0gbmFtZVxuICogQHBhcmFtIG1lc3NhZ2VcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBfdGhyb3dOZXdFcnJvck1zZyA9ICh0eXBlOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKTogc3RyaW5nID0+XG4gICAgYFJlYWN0IEJhcmUgRm9ybXMgRVJST1I6XFxuXFx0JHt0eXBlfSAtICR7bmFtZX1cXG5cXHQtICR7bWVzc2FnZX1gO1xuXG5cbmV4cG9ydCBjb25zdCBfaXNGaWVsZEVtcHR5RXJyb3JNc2cgPSBfdGhyb3dOZXdFcnJvck1zZyhcbiAgICBcIkZ1bmN0aW9uXCIsXG4gICAgXCJpc0ZpZWxkRW1wdHkoKVwiLFxuICAgIFwiTWlzc2luZyBhcmd1bWVudDogbWluTGVuZ3RoIChudW1iZXIpXCJcbik7XG5cbmV4cG9ydCBjbGFzcyBfRmllbGRFbXB0eUVycm9yTXNnIGV4dGVuZHMgRXJyb3IgeyB9XG5cbmV4cG9ydCBjb25zdCBfbm9Db250ZXh0RXJyb3IgPSBfdGhyb3dOZXdFcnJvck1zZyhcbiAgICBcIlJlcXVpcmVkIFByb3BzXCIsXG4gICAgXCJjb250ZXh0XCIsXG4gICAgXCJZb3UgbXVzdCBwYXNzIGluIGEgY29udGV4dCBwcm9wLiBDbGFzcyBjb21wb25lbnRzIHVzZSAnc3RhdGUnIFwiICtcbiAgICBcIiYgZnVuY3Rpb25hbCBjb21wb25lbnRzIG11c3QgdXNlIHVzZVN0YXRlIGhvb2suIFNlZSBodHRwczovL2pvZWdhc2V3aWN6LmdpdGh1Yi5pby9yZWFjdC1iYXJlLWZvcm1zL21vZHVsZXMvX2Zvcm1fLmh0bWxcIlxuKTtcbiIsIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gUHVibGljIHVuY29udHJvbGxlZCBSZWFjdCBDb21wb25lbnQgSGVscGVyIGZ1bmN0aW9uc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5pbXBvcnQge2RlZmF1bHQgYXMgUmVhY3R9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtJRmlsZX0gZnJvbSBcIi4vY29yZVwiO1xuXG4vKipcbiAqIFJCRidzIHByb3ZpZGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgUmVhY3QgcmVmIHRvIGFjY2VzcyB5b3VyIGZpbGUgb2JqZWN0LlxuICogVG8gdXNlLCBzaW1wbHkgYXNzaWduIHRoZSByZXR1cm5lZCByZWYgZnJvbSB0aGUgY3JlYXRlRmlsZVJlZiBmdW5jdGlvbiB0byBhXG4gKiB2YXJpYWJsZSAmIHBhc3MgdGhpcyB2YXJpYWJsZSB0byBGaWxlRmllbGQncyByZWYgcHJvcC5cbiAqIEByZXR1cm5zXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKlxuICogIGltcG9ydCB7Y3JlYXRlRmlsZVJlZiwgRmlsZUZpZWxkLCBpc0ZpbGUsIGdldEZpbGVGcm9tUmVmfSBmcm9tIFwicmVhY3QtYmFyZS1mb3Jtc1wiO1xuICpcbiAqICBjb25zdCBteUZpbGVSZWYgPSBjcmVhdGVGaWxlUmVmKCk7XG4gKlxuICogIDxGaWxlRmllbGRcbiAqICAgICByZWY9e215RmlsZVJlZn1cbiAqICAgICBoaW50PVwiTXVzdCBiZSBhIGZpbGVcIlxuICogICAgIGxhYmVsVGV4dD1cIlVwbG9hZCB5b3VyIGZpbGVcIlxuICogICAgIG5hbWU9XCJteUZpbGVUZXN0XCJcbiAqICAgICB2YWxpZGF0b3JzPXtbaXNGaWxlKCldfVxuICogIC8+XG4gKlxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWxlUmVmKCk6IFJlYWN0LlJlZk9iamVjdDxIVE1MRm9ybUVsZW1lbnQ+IHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlUmVmPEhUTUxGb3JtRWxlbWVudD4oKTtcbn1cblxuLyoqXG4gKiBUbyBnZXQgYSBmaWxlIG9iamVjdCBiYWNrIGZyb20gdGhlIHJlYWN0IHJlZiwgeW91IGNhbiB1c2UgYGdldEZpbGVGcm9tUmVmYCBmdW5jdGlvbi5cbiAqIEBwYXJhbXMgVGhlIFJlYWN0IHJlZiByZXR1cm5lZCBmcm9tIHtAbGluayBjcmVhdGVGaWxlUmVmfVxuICogQHJldHVybnNcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqXG4gKiAgaW1wb3J0IHtjcmVhdGVGaWxlUmVmLCBGaWxlRmllbGQsIGlzRmlsZSwgZ2V0RmlsZUZyb21SZWZ9IGZyb20gXCJyZWFjdC1iYXJlLWZvcm1zXCI7XG4gKlxuICogIGNvbnN0IG15RmlsZVJlZiA9IGNyZWF0ZUZpbGVSZWYoKTtcbiAqXG4gKiAgPEZpbGVGaWVsZFxuICogICAgIHJlZj17bXlGaWxlUmVmfVxuICogICAgIGhpbnQ9XCJNdXN0IGJlIGEgZmlsZVwiXG4gKiAgICAgbGFiZWxUZXh0PVwiVXBsb2FkIHlvdXIgZmlsZVwiXG4gKiAgICAgbmFtZT1cIm15RmlsZVRlc3RcIlxuICogICAgIHZhbGlkYXRvcnM9e1tpc0ZpbGUoKV19XG4gKiAgLz5cbiAqXG4gKiAgbGV0IGZpbGVEYXRhID0ge1xuICogICAgICBteUZpbGU6IGdldEZpbGVGcm9tUmVmKG15RmlsZVJlZilcbiAqICB9O1xuICpcbiAqICAvLyBmaWxlRGF0YS5teUZpbGUgaXMgeW91ciBKYXZhc2NyaXB0IEZpbGUgb2JqZWN0LlxuICpcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsZUZyb21SZWYoZmlsZVJlZjogUmVhY3QuUmVmT2JqZWN0PEhUTUxGb3JtRWxlbWVudD4pOiBJRmlsZXxudWxsIHtcbiAgICBpZihmaWxlUmVmICYmIChmaWxlUmVmIGFzIGFueSkuY3VycmVudCAmJiBPYmplY3Qua2V5cygoZmlsZVJlZiBhcyBhbnkpLmN1cnJlbnQuZmlsZXMpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gKGZpbGVSZWYgYXMgYW55KS5jdXJyZW50LmZpbGVzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBSZWFjdH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge2dldEZpbGVGcm9tUmVmfSBmcm9tIFwiLi4vdW5jcm9udHJvbGxlZFwiO1xuXG5cbi8qKiBAaW50ZXJuYWwgKiovXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlIHtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgbGFzdE1vZGlmaWVkOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgbGFzdE1vZGlmaWVkRGF0ZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHNpemU6IHN0cmluZztcbiAgICByZWFkb25seSB0eXBlOiBzdHJpbmc7XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWxlT2JqZWN0KHJlZjogUmVhY3QuUmVmT2JqZWN0PEhUTUxGb3JtRWxlbWVudD4pOiBJRmlsZXxudWxsIHtcbiAgICBsZXQgZmlsZURhdGEgPSBnZXRGaWxlRnJvbVJlZihyZWYpO1xuICAgIGlmKGZpbGVEYXRhKSB7XG4gICAgICAgIGxldCB7bmFtZSwgbGFzdE1vZGlmaWVkLCBsYXN0TW9kaWZpZWREYXRlLCBzaXplLCB0eXBlfSA9IGZpbGVEYXRhO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZCxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZERhdGUsXG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4iLCIvLyBIYW5kbGVyc1xuLy8gSGFuZGxlcnMgYXJlIG1ldGhvZHMgb24gdGhlIGNvbnRleHQgb2JqZWN0IHRoYXQgdXBkYXRlIHN0YXRlLlxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge0lSYWRpb0dyb3VwUGFyZW50Q29udGV4dH0gZnJvbSBcIi4uL2Zvcm1cIjtcblxuLyoqIEBpbnRlcm5hbCAqL1xudHlwZSBUeXBlSGFuZGxlciA9IChlOiBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+LCBuYW1lOiBzdHJpbmcpID0+IHZvaWQ7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIF9nZXRDb3JyZWN0U3RhdGVQb3NpdGlvbkZyb21Gb3JtS2V5KHBhcmVudFN0YXRlOiBhbnksIGZvcm1LZXk6IHN0cmluZyA9IFwiXCIsIG9iajogYW55ID0ge30pOiB7W2tleTogc3RyaW5nXTogYW55fSB7XG4gICAgaWYoZm9ybUtleSkge1xuICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbZm9ybUtleV06IHtcbiAgICAgICAgICAgICAgICAuLi5wYXJlbnRTdGF0ZVtmb3JtS2V5XSxcbiAgICAgICAgICAgICAgICAuLi5vYmosXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5wYXJlbnRTdGF0ZSxcbiAgICAgICAgICAgIC4uLm9iaixcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVQYXJlbnRTdGF0ZShwYXJlbnRTdGF0ZTogYW55LCBzZXRQYXJlbnRTdGF0ZTogRnVuY3Rpb24sIGZvcm1LZXk6IHN0cmluZyA9IFwiXCIpOiBUeXBlSGFuZGxlciB7XG4gICAgcmV0dXJuIChlOiBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+LCBuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgc2V0UGFyZW50U3RhdGUoe1xuICAgICAgICAgICAgLi4ucGFyZW50U3RhdGUsXG4gICAgICAgICAgICAuLi5fZ2V0Q29ycmVjdFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleShwYXJlbnRTdGF0ZSwgZm9ybUtleSwge1tuYW1lXTogZS50YXJnZXQudmFsdWV9KSxcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVJhZGlvR3JvdXBTdGF0ZUZyb21QYXNzZWRJbkNvbnRleHQocGFyZW50U3RhdGU6IGFueSwgc2V0UGFyZW50U3RhdGU6IEZ1bmN0aW9uLCBmb3JtS2V5OiBzdHJpbmcgPSBcIlwiKSB7XG4gICAgcmV0dXJuIChlOiBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+LCBuYW1lOiBzdHJpbmcsIHJhZGlvR3JvdXA6IElSYWRpb0dyb3VwUGFyZW50Q29udGV4dCkgPT4ge1xuICAgICAgICBpZiAocmFkaW9Hcm91cCkge1xuICAgICAgICAgICAgbGV0IG5ld1N0YXRlID0ge1xuICAgICAgICAgICAgICAgIC4uLnBhcmVudFN0YXRlLFxuICAgICAgICAgICAgICAgICAuLi5fZ2V0Q29ycmVjdFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleShwYXJlbnRTdGF0ZSwgZm9ybUtleSwge1tuYW1lXTogdHJ1ZX0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvcihsZXQgY2hpbGRyZW4gb2YgcmFkaW9Hcm91cC5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGlmKGNoaWxkcmVuLnByb3BzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5uZXdTdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLl9nZXRDb3JyZWN0U3RhdGVQb3NpdGlvbkZyb21Gb3JtS2V5KG5ld1N0YXRlLCBmb3JtS2V5LCB7W2NoaWxkcmVuLnByb3BzLm5hbWVdOiBmYWxzZX0pLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0UGFyZW50U3RhdGUobmV3U3RhdGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIFJlYWN0LCBSZWFjdEVsZW1lbnQsIHVzZUNvbnRleHR9IGZyb20gXCJyZWFjdFwiO1xuXG5cbmltcG9ydCB7Rm9ybUNvbnRleHQsIElNZXRhZGF0YSwgTUVUQURBVEFfTkFNRVN9IGZyb20gXCIuLi9mb3JtXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJ1dHRvbjxUPiB7XG4gICAgY3JlYXRlKCk6IChwcm9wczogVCkgPT4gUmVhY3RFbGVtZW50PFQ+O1xufVxuXG5hYnN0cmFjdCBjbGFzcyBCdXR0b248VD4gaW1wbGVtZW50cyBJQnV0dG9uPFQ+IHtcblxuICAgIHB1YmxpYyBhYnN0cmFjdCBjcmVhdGUoKTogKHByb3BzOiBUKSA9PiBSZWFjdEVsZW1lbnQ8VD47XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU3VibWl0QnV0dG9uUHJvcHMge1xuICAgIHRleHQ/OiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ/OiBmYWxzZTtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgY2hpbGRyZW4/OiBhbnk7XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBTdWJtaXRCdXR0b24gaW1wbGVtZW50cyBCdXR0b248SVN1Ym1pdEJ1dHRvblByb3BzPiB7XG5cblxuICAgIHByaXZhdGUgcmVhZG9ubHkgR1JPVVBfVFlQRVMgPSBbXCJyYWRpb0dyb3Vwc1wiXTsgLy8gVE9ETy4uLlxuXG4gICAgcHJpdmF0ZSBpc0dyb3VwKG1ldGFUeXBlOiBNRVRBREFUQV9OQU1FUyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5HUk9VUF9UWVBFUy5pbmNsdWRlcyhtZXRhVHlwZSk7XG4gICAgfVxuXG5cbiAgICBjcmVhdGUoKSB7XG4gICAgICAgcmV0dXJuIChwcm9wczogSVN1Ym1pdEJ1dHRvblByb3BzKSA9PiB7XG4gICAgICAgICAgIC8vIENvbnRleHRcbiAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoRm9ybUNvbnRleHQpO1xuXG4gICAgICAgICAgIC8vIFN0eWxlc1xuICAgICAgICAgICBjb25zdCB7IGNsYXNzTmFtZSA9IFwiYnRuIGJ0bi1zdWNjZXNzIGJ0bi1sZ1wiLCBkaXNhYmxlZCA9IHRydWV9ID0gcHJvcHM7XG5cbiAgICAgICAgICAgbGV0IGlzRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgY29uc3QgaW5wdXRTdGF0ZSA9IGNvbnRleHQubWV0YWRhdGEuaW5wdXRzLnN0YXRlO1xuICAgICAgICAgICBmb3IgKGxldCBtZXRhIG9mIE9iamVjdC5rZXlzKGNvbnRleHQubWV0YWRhdGEpKSB7XG4gICAgICAgICAgICAgICBsZXQgbWV0YUZpZWxkID0gY29udGV4dC5tZXRhZGF0YVttZXRhIGFzIGtleW9mIElNZXRhZGF0YV0uc3RhdGU7XG4gICAgICAgICAgICAgICAvLyBJZiBhbGwgYWxsIGZpZWxkcyBhcmUgdmFsaWQgdGhlbiBwYXNzIHRocm91Z2ggdGhlIGRlZmF1bHQgaXNEaXNhYmxlZCB2YWx1ZVxuICAgICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIHRoYXQgdGhlIG1lbWJlciBpcyBub3QgcGFydCBvZiBhIG1ldGFkYXRhIGdyb3VwXG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuaXNHcm91cChjb250ZXh0Lm1ldGFkYXRhW21ldGEgYXMga2V5b2YgSU1ldGFkYXRhXS5tZXRhVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBmaWVsZCBvZiBPYmplY3Qua2V5cyhtZXRhRmllbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHZhbGlkYXRpb24gb2YgbWV0YUZpZWxkW2ZpZWxkXS52YWxpZGF0aW9uKSB7IC8vIFRPRE8gRFJZXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXZhbGlkYXRpb24uaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgZ3JvdXAgbWV0YWRhdGEgdmFsaWRhdGlvbiBjaGVja3NcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBmaWVsZCBvZiBPYmplY3Qua2V5cyhtZXRhRmllbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGNoaWxkRmllbGQgb2YgT2JqZWN0LmtleXMobWV0YUZpZWxkW2ZpZWxkXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgX2NoaWxkID0gKG1ldGFGaWVsZFtmaWVsZF0gYXMgYW55KVtjaGlsZEZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHZhbGlkYXRpb24gb2YgX2NoaWxkLnZhbGlkYXRpb24pIHsgLy8gVE9ETyBEUllcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXZhbGlkYXRpb24uaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgIHJldHVybiAoPGJ1dHRvblxuICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzRGlzYWJsZWR9XG4gICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgICAgPntwcm9wcy5jaGlsZHJlbn08L2J1dHRvbj4pO1xuICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3QsIFJlYWN0RWxlbWVudCwgdXNlQ29udGV4dCwgdXNlRWZmZWN0fSBmcm9tIFwicmVhY3RcIjtcblxuXG5pbXBvcnQge0ZJRUxEX05BTUVTLCBJRmllbGR9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuaW1wb3J0IHtJVmFsaWRhdGlvbn0gZnJvbSBcIi4uL3ZhbGlkYXRvcnNcIjtcbmltcG9ydCB7XG4gICAgRm9ybUVsZW1lbnRWYWxpZGF0b3JzLFxuICAgIGdldEZpZWxkVmFsdWVUeXBlLFxuICAgIGdldE1ldGFkYXRhTmFtZVR5cGUsXG59IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQge1xuICAgIEZvcm1Db250ZXh0LFxuICAgIElGb3JtQ29udGV4dCwgVHlwZUZpZWxkVmFsdWVUeXBlcyxcbiAgICBUeXBlRm9ybU1ldGFkYXRhLFxufSBmcm9tIFwiLi4vZm9ybVwiO1xuXG5cbi8qKlxuICogQGludGVybmFsXG4gKiBAY2hpbGQgY2xhc3MgSW5wdXRGaWVsZCBjbGFzcyBoYXMgYSAqZmlsZSogbWVtYmVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUFic3RyYWN0RmllbGQ8VD4ge1xuICAgIGNyZWF0ZTogKGNvbnRleHQ6IElGb3JtQ29udGV4dCkgPT4gUmVhY3RFbGVtZW50PFQ+O1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBwcm9wczogVDtcbiAgICBtZXRhZGF0YTogVHlwZUZvcm1NZXRhZGF0YTtcbiAgICBiYXJlOiBib29sZWFuO1xuICAgIG92ZXJyaWRlRXZlbnQ6IChlOiBhbnksIHZhbHVlOiBhbnkpID0+IFJlYWN0LkNoYW5nZUV2ZW50PGFueT47XG4gICAgZ2V0RmllbGRWYWx1ZTogKHByb3BzOiBhbnkpID0+IGFueVxuICAgIHZhbGlkYXRlOiAoKSA9PiBBcnJheTxJVmFsaWRhdGlvbj47XG4gICAgZG9WYWxpZGF0aW9uOiAodmFsdWU6IGFueSkgPT4gQXJyYXk8SVZhbGlkYXRpb24+O1xufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gX2dlbmVyaWNGb3JtR3JvdXA8VCBleHRlbmRzIElGaWVsZD4ocHJvcHM6IFQsIGNoaWxkcmVuOiBhbnkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgIHtwcm9wcy5sYWJlbFRleHQgJiYgPGxhYmVsPntwcm9wcy5sYWJlbFRleHR9PC9sYWJlbD59XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgICB7cHJvcHMuaGludCAmJiA8c21hbGwgY2xhc3NOYW1lPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj57cHJvcHMuaGludH08L3NtYWxsPn1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0RmllbGQ8VCBleHRlbmRzIElGaWVsZD4ge1xuICAgIHB1YmxpYyB0eXBlOiBGSUVMRF9OQU1FUztcbiAgICBwdWJsaWMgcHJvcHM6IFQ7XG4gICAgcHVibGljIHBhcmVudD86IHN0cmluZztcbiAgICBwdWJsaWMgX21ldGFkYXRhPzogVHlwZUZvcm1NZXRhZGF0YTtcbiAgICBwdWJsaWMgX2JhcmU/OiBib29sZWFuO1xuICAgIHB1YmxpYyBjb250ZXh0PzogSUZvcm1Db250ZXh0O1xuICAgIHB1YmxpYyBwYXJlbnROYW1lPzogc3RyaW5nO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3BzOiBULCB0eXBlOiBGSUVMRF9OQU1FUykge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIGdldCBiYXJlKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLl9iYXJlKTtcbiAgICB9XG5cbiAgICBzZXQgYmFyZSh2YWw6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fYmFyZSA9IHZhbDtcbiAgICB9XG5cbiAgICBnZXQgbWV0YWRhdGEoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fbWV0YWRhdGEgYXMgVHlwZUZvcm1NZXRhZGF0YSk7XG4gICAgfVxuXG4gICAgc2V0IG1ldGFkYXRhKHZhbDogVHlwZUZvcm1NZXRhZGF0YSkge1xuICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IHZhbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IHVzZUNvbnRleHQ8SUZvcm1Db250ZXh0PihGb3JtQ29udGV4dCk7XG4gICAgICAgIC8vIHRoaXMuc3RhdGVGcm9tRm9ybUtleSA9XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSB0aGlzLmNvbnRleHQubWV0YWRhdGFbZ2V0TWV0YWRhdGFOYW1lVHlwZSh0aGlzLnR5cGUpXTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5pbml0KHRoaXMucHJvcHMubmFtZSwgdGhpcy50eXBlKTtcbiAgICAgICAgdGhpcy5iYXJlID0gQm9vbGVhbih0aGlzLmNvbnRleHQuYmFyZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFByb3BzKCk6IFQge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcztcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlRmllbGQoZmllbGRDYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICAgICAgY29uc3QgX3ZhbGlkYXRlID0gdGhpcy5wcm9wcy52YWxpZGF0b3JzIHx8IHRoaXMucGFyZW50TmFtZSA/XG4gICAgICAgICAgICA8Rm9ybUVsZW1lbnRWYWxpZGF0b3JzXG4gICAgICAgICAgICAgICAgaXNUb3VjaGVkPXt0aGlzLm1ldGFkYXRhLmlzRmllbGRUb3VjaGVkKCl9XG4gICAgICAgICAgICAgICAgcmVzdWx0cz17dGhpcy52YWxpZGF0ZSgpfVxuICAgICAgICAgICAgICAgIG5hbWU9e3RoaXMucHJvcHMubmFtZX1cbiAgICAgICAgICAgICAgICB0eXBlPXtnZXRNZXRhZGF0YU5hbWVUeXBlKHRoaXMudHlwZSl9XG4gICAgICAgICAgICAgICAgcGFyZW50PXt0aGlzLnBhcmVudH1cbiAgICAgICAgICAgIC8+IDpcbiAgICAgICAgICAgIG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuYmFyZSkge1xuICAgICAgICAgICAgcmV0dXJuICg8PntmaWVsZENhbGxiYWNrKHRoaXMubWV0YWRhdGEuc3RhdGUpfXtfdmFsaWRhdGV9PC8+KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoPD57dGhpcy5mb3JtR3JvdXAoZmllbGRDYWxsYmFjayh0aGlzLm1ldGFkYXRhLnN0YXRlKSl9e192YWxpZGF0ZX08Lz4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICBwdWJsaWMgZG9WYWxpZGF0aW9uKHZhbHVlOiBhbnkpOiBBcnJheTxJVmFsaWRhdGlvbj4ge1xuICAgICAgIGxldCB2YWxpZGF0aW9uOiBBcnJheTxJVmFsaWRhdGlvbj4gPSBbXTtcbiAgICAgICAvLyBDYXJyeSBvdXQgdGhlIHZhbGlkYXRpb25cbiAgICAgICBpZih0aGlzLnByb3BzLnZhbGlkYXRvcnMpIHtcbiAgICAgICAgICAgZm9yKGxldCB2YWxpZGF0ZSBvZiB0aGlzLnByb3BzLnZhbGlkYXRvcnMpIHtcbiAgICAgICAgICAgICAgIHZhbGlkYXRpb24gPSBbXG4gICAgICAgICAgICAgICAgICAgLi4udmFsaWRhdGlvbixcbiAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZSh2YWx1ZSwgdGhpcy5jb250ZXh0KSxcbiAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgIH1cbiAgICAgICB9XG5cbiAgICAgICByZXR1cm4gdmFsaWRhdGlvbjtcbiAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBkZXNjcmlwdGlvbiBOb3JtYWxseSwgdGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgZnJvbSB0aGlzIHN1cGVyIGNsYXNzLiBCdXQgaXQgaXMgcHVibGljIGFzXG4gICAgICogdGhlcmUgYXJlIHNvbWUgZWRnZSBjYXNlcyB3aGVyZSBpdCBuZWVkcyB0byBiZSBjYWxsZWQgYnkgYSBjaGlsZCBjbGFzcyB0aGF0IGV4dGVuZHMgQWJzdHJhY3RGaWVsZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgdmFsaWRhdGUoKTogQXJyYXk8SVZhbGlkYXRpb24+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXRGaWVsZFZhbHVlKHRoaXMucHJvcHMpO1xuICAgICAgICAvLyBDYXJyeSBvdXQgdGhlIHZhbGlkYXRpb25cbiAgICAgICAgbGV0IHZhbGlkYXRpb24gPSB0aGlzLmRvVmFsaWRhdGlvbih2YWx1ZSk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgbWV0YWRhdGEgdHlwZSBzdGF0ZVxuICAgICAgICB0aGlzLm1ldGFkYXRhLnVwZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICAgIHJldHVybiB2YWxpZGF0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBwcm9wc1xuICAgICAqIEBkZXNjcmlwdGlvbiBUaGlzIGlzIG92ZXJyaWRkZW4gaW4gdGhlIFJhZGlvRmllbGQgc3ViIGNsYXNzXG4gICAgICovXG4gICAgcHVibGljIGdldEZpZWxkVmFsdWUocHJvcHM6IFQpOiBhbnkge1xuICAgICAgICBsZXQgdHlwZSA9IGdldEZpZWxkVmFsdWVUeXBlKHRoaXMudHlwZSk7XG4gICAgICAgIHJldHVybiAodGhpcy5wcm9wcyBhcyBUICYgVHlwZUZpZWxkVmFsdWVUeXBlcylbdHlwZSBhcyBhbnldO1xuICAgIH1cblxuICAgIHB1YmxpYyBhYnN0cmFjdCBmb3JtR3JvdXAoY2hpbGRyZW46IGFueSk6IFJlYWN0RWxlbWVudDtcblxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRGaWVsZCgpOiAoY29udGV4dDogSUZvcm1Db250ZXh0KSA9PiBSZWFjdEVsZW1lbnQ7XG5cbiAgICBzdGF0aWMgbWVyZ2VEZWZhdWx0Q3NzV2l0aFByb3BzKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBjc3NQcm9wczogYW55LCBiYXJlOiBib29sZWFuKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGNzc1N0ciA9IFwiXCI7XG4gICAgICAgIGlmICghYmFyZSkge1xuICAgICAgICAgICAgY3NzU3RyICs9IGAke2RlZmF1bHRWYWx1ZX0gYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3NzUHJvcHMpIHtcbiAgICAgICAgICAgIGNzc1N0ciArPSBgJHtjc3NQcm9wc31gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjc3NTdHI7XG4gICAgfVxuXG4gICAgcHVibGljIG92ZXJyaWRlRXZlbnQoZTogYW55LCB2YWx1ZTogYW55KTogUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5lLFxuICAgICAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICAgICAgLi4uZS50YXJnZXQsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICF2YWx1ZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTdGF0ZVBvc2l0aW9uRnJvbUZvcm1LZXkoKToge1trZXk6IHN0cmluZ106IGFueX0ge1xuICAgICAgICBpZiAodGhpcy5jb250ZXh0Py5mb3JtS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnN0YXRlW3RoaXMuY29udGV4dC5mb3JtS2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0Py5zdGF0ZTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBSZWFjdH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7SVZhbGlkYXRvcnN9IGZyb20gXCIuL3ZhbGlkYXRvcnNcIjtcbmltcG9ydCB7XG4gICAgSUZvcm0sXG4gICAgSVJhZGlvR3JvdXBQYXJlbnRDb250ZXh0LFxuICAgIFJhZGlvR3JvdXBDb250ZXh0LFxuICAgIFR5cGVSYWRpb0dyb3VwTWV0YWRhdGEsXG59IGZyb20gXCIuL2Zvcm1cIjtcbmltcG9ydCB7U3VibWl0QnV0dG9uIGFzIF9TdWJtaXRCdXR0b24sfSBmcm9tIFwiLi9maWVsZF9jbGFzc2VzL19TdWJtaXRCdXR0b25cIjtcbmltcG9ydCB7XG4gICAgQ2hlY2tCb3hGaWVsZCBhcyBfQ2hlY2tCb3hGaWVsZCxcbiAgICBGaWxlRmllbGQgYXMgX0ZpbGVGaWVsZCxcbiAgICBJbnB1dEZpZWxkLFxuICAgIFJhZGlvRmllbGQgYXMgX1JhZGlvRmllbGQsXG4gICAgU2VsZWN0RmllbGQgYXMgX1NlbGVjdEZpZWxkLFxuICAgIFRleHRBcmVhRmllbGQgYXMgX1RleHRBcmVhRmllbGQsXG59IGZyb20gXCIuL2ZpZWxkX2NsYXNzZXNcIjtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGVudW0gRklFTERfTkFNRVMge1xuICAgIFRFWFQgPSBcInRleHRcIixcbiAgICBFTUFJTCA9IFwiZW1haWxcIixcbiAgICBQQVNTV09SRCA9IFwicGFzc3dvcmRcIixcbiAgICBURVhUQVJFQSA9IFwidGV4dEFyZWFcIixcbiAgICBSQURJTyAgPSBcInJhZGlvXCIsXG4gICAgQ0hFQ0tCT1ggPSBcImNoZWNrYm94XCIsXG4gICAgU0VMRUNUID0gXCJzZWxlY3RcIixcbiAgICBGSUxFID0gXCJmaWxlXCIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZpZWxkIHtcbiAgICAvKiogVGhlIG5hbWUgb2YgdGhlIGZvcm0gZWxlbWVudCAodGhpcyBzaG91bGQgbWF0Y2ggdGhlIHN0YXRlIHByb3BlcnR5IHRoYXQgeW91IHdhbnQgYmUgdXBkYXRlZCBieSB0aGlzIGZvcm0gZWxlbWVudCkgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqIElmICpiYXJlKiAoc2VlIHtAbGluayBJRm9ybS5iYXJlfSkgaXMgc2V0IHRvIHRydWUgdGhlbiAqbGFiZWxUZXh0KiB3aWxsIGJlIGluc2VydGVkIHdpdGhpbiAqKmxhYmVsKiogdGFncy4gKi9cbiAgICBsYWJlbFRleHQ/OiBzdHJpbmc7XG4gICAgLyoqIElmICpiYXJlKiAoc2VlIHtAbGluayBGb3JtLmJhcmV9KSBpcyBzZXQgdG8gdHJ1ZSB0aGVuICpoaW50KiB3aWxsIGJlIGluc2VydGVkIHdpdGhpbiAqKnNtYWxsKiogdGFncy4gKi9cbiAgICBoaW50Pzogc3RyaW5nO1xuICAgIC8qKiBUaGVzZSBhcmUgdGhlIHtAbGluayBJVmFsaWRhdG9yc30gdGhhdCB5b3UgY2FuIHBhc3MgaW4gdGhlIHZhbGlkYXRlIHRoZSBmb3JtIGVsZW1lbnQuICovXG4gICAgdmFsaWRhdG9ycz86IElWYWxpZGF0b3JzO1xuICAgIC8qKiBBZGQgYWRkaXRpb25hbCBjc3MgKi9cbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRleHRJbnB1dEZpZWxkIGV4dGVuZHMgSUZpZWxkIHtcbiAgICAvKiogVGhlIHN0YXRlIHByb3BlcnR5IHRoYXQgZ2V0cyB1cGRhdGVkIGJ5IHRoaXMgaW5wdXQgZmllbGQgKi9cbiAgICB2YWx1ZTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQYXNzd29yZEZpZWxkIGV4dGVuZHMgSUZpZWxkIHtcbiAgICAvKiogVGhlIHN0YXRlIHByb3BlcnR5IHRoYXQgZ2V0cyB1cGRhdGVkIGJ5IHRoaXMgaW5wdXQgZmllbGQgKi9cbiAgICB2YWx1ZTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFbWFpbEZpZWxkIGV4dGVuZHMgSUZpZWxkIHtcbiAgICAvKiogVGhlIHN0YXRlIHByb3BlcnR5IHRoYXQgZ2V0cyB1cGRhdGVkIGJ5IHRoaXMgaW5wdXQgZmllbGQgKi9cbiAgICB2YWx1ZTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDaGVja0JveEZpZWxkIGV4dGVuZHMgSUZpZWxkIHtcbiAgICBjaGVja2VkOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUZXh0QXJlYUZpZWxkIGV4dGVuZHMgSUZpZWxkIHtcbiAgICByb3dzPzogbnVtYmVyO1xuICAgIC8qKiBUaGUgc3RhdGUgcHJvcGVydHkgdGhhdCBnZXRzIHVwZGF0ZWQgYnkgdGhpcyBpbnB1dCBmaWVsZCAqL1xuICAgIHZhbHVlOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJhZGlvRmllbGQgZXh0ZW5kcyBJRmllbGQge1xuICAgIGNoZWNrZWQ6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlRmllbGQgZXh0ZW5kcyBJRmllbGQge1xuICAgIHJlZjogUmVhY3QuUmVmT2JqZWN0PEhUTUxGb3JtRWxlbWVudD47XG59XG5cbmV4cG9ydCB0eXBlIFR5cGVTZWxlY3RDc3NTaXplTmFtZSA9IHxcInNtXCJ8XCJkZWZhdWx0XCJ8XCJsZ1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3RGaWVsZCBleHRlbmRzIElGaWVsZCB7XG4gICAgdmFsdWU6IGFueTtcbiAgICBvcHRpb25zOiBBcnJheTxzdHJpbmd8e1trOiBzdHJpbmddOiBhbnl9PjtcbiAgICBzaXplPzogVHlwZVNlbGVjdENzc1NpemVOYW1lO1xuICAgIG9iamVjdEtleT86IHN0cmluZztcbiAgICBvYmplY3RWYWx1ZT86IHN0cmluZztcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHByb3BzIHtAbGluayBJVGV4dElucHV0RmllbGR9XG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiAgaW1wb3J0IHtUZXh0SW5wdXRGaWVsZH0gZnJvbSBcInJlYWN0LWJhc2UtZm9ybXNcIlxuICpcbiAqICBjb25zdCBzdGF0ZSA9IHsgdXNlcm5hbWU6IFwiXCIgfVxuICpcbiAqIC8vIEEgYmFyZSBmb3JtIGV4YW1wbGUgLi4uIHJlbWVtYmVyIHRvIHNldCB0aGUge0BsaW5rIEZvcm0uYmFyZX0gcHJvcGVydHkgdG8gYHRydWVgXG4gKiA8VGV4dElucHV0RmllbGRcbiAqICAgIHZhbHVlPXtzdGF0ZS51c2VybmFtZX1cbiAqICAgIG5hbWU9XCJ1c2VybmFtZVwiXG4gKiAvPlxuICpcbiAqIC8vIEV4YW1wbGUgd2l0aCBCb290c3RyYXAgc3R5bGluZyAoQm9vdHN0cmFwIHN0eWxpbmcgY29tZXMgYXMgZGVmYXVsdClcbiAqXG4gKiA8VGV4dElucHV0RmllbGRcbiAqICAgIHZhbHVlPXtzdGF0ZS51c2VybmFtZX1cbiAqICAgIG5hbWU9XCJ1c2VybmFtZVwiXG4gKiAgICBoaW50PVwiTmVlZHMgdG8gYmUgYXQgbGVhc3QgNTAgY2hhcmFjdGVycyBsb25nXCJcbiAqICAgIGxhYmVsVGV4dD1cIlVzZXJuYW1lXCJcbiAqICAvPlxuICogYGBgXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IFRleHRJbnB1dEZpZWxkID0gKHByb3BzOiBJVGV4dElucHV0RmllbGQpID0+IHtcbiAgY29uc3QgdGV4dElucHV0ID0gbmV3IElucHV0RmllbGQ8SVRleHRJbnB1dEZpZWxkPihGSUVMRF9OQU1FUy5URVhULCBwcm9wcyk7XG4gIHJldHVybiB0ZXh0SW5wdXQuY3JlYXRlKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSBwcm9wcyB7QGxpbmsgSUVtYWlsRmllbGR9XG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiAgaW1wb3J0IHtFbWFpbEZpZWxkfSBmcm9tIFwicmVhY3QtYmFzZS1mb3Jtc1wiXG4gKlxuICogIGNvbnN0IHN0YXRlID0geyBlbWFpbDogXCJcIiB9XG4gKlxuICogLy8gQSBiYXJlIGZvcm0gZXhhbXBsZSAuLi4gcmVtZW1iZXIgdG8gc2V0IHRoZSB7QGxpbmsgRm9ybS5iYXJlfSBwcm9wZXJ0eSB0byBgdHJ1ZWBcbiAqIDxFbWFpbEZpZWxkXG4gKiAgICB2YWx1ZT17c3RhdGUuZW1haWx9XG4gKiAgICBuYW1lPVwiZW1haWxcIlxuICogLz5cbiAqXG4gKiAvLyBFeGFtcGxlIHdpdGggQm9vdHN0cmFwIHN0eWxpbmcgKEJvb3RzdHJhcCBzdHlsaW5nIGNvbWVzIGFzIGRlZmF1bHQpXG4gKlxuICogPEVtYWlsRmllbGRcbiAqICAgIHZhbHVlPXtzdGF0ZS5lbWFpbH1cbiAqICAgIG5hbWU9XCJlbWFpbFwiXG4gKiAgICBoaW50PVwiTmVlZHMgdG8gYmUgYXQgbGVhc3QgNTAgY2hhcmFjdGVycyBsb25nXCJcbiAqICAgIGxhYmVsVGV4dD1cIlVzZXJuYW1lXCJcbiAqICAvPlxuICogYGBgXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IEVtYWlsRmllbGQgPSAocHJvcHM6IElFbWFpbEZpZWxkKSA9PiB7XG4gICAgY29uc3QgZW1haWxJbnB1dCA9IG5ldyBJbnB1dEZpZWxkPElFbWFpbEZpZWxkPihGSUVMRF9OQU1FUy5FTUFJTCwgcHJvcHMpO1xuICAgIHJldHVybiBlbWFpbElucHV0LmNyZWF0ZSgpO1xufTtcblxuLyoqXG4gKiAgVGhlIGBQYXNzd29yZEZpZWxkYCB3b3JrcyB0aGUgc2FtZSBhcyB0aGUgYEVtYWlsRmllbGRgICYgYFRleHRJbnB1dEZpZWxkYCdzLlxuICogQHBhcmFtIHByb3BzIHtAbGluayBJUGFzc3dvcmRGaWVsZH1cbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqICBpbXBvcnQge2FyZUZpZWxkc0VxdWFsLCBpc0ZpZWxkRW1wdHksIFBhc3N3b3JkRmllbGR9IGZyb20gXCJyZWFjdC1iYXNlLWZvcm1zXCI7XG4gKlxuICogIGNvbnN0IHN0YXRlID0geyBwYXNzd29yZDogXCJcIiwgY29uZmlybVBhc3N3b3JkOiBcIlwiIH07XG4gKlxuICogLy8gQSBiYXJlIGZvcm0gZXhhbXBsZSAuLi4gcmVtZW1iZXIgdG8gc2V0IHRoZSB7QGxpbmsgRm9ybS5iYXJlfSBwcm9wZXJ0eSB0byBgdHJ1ZWBcbiAqIDxQYXNzd29yZEZpZWxkXG4gKiAgICB2YWx1ZT17c3RhdGUucGFzc3dvcmR9XG4gKiAgICBuYW1lPVwidXNlcm5hbWVcIlxuICogICAgdmFsaWRhdG9ycz17W2lzRmllbGRFbXB0eSg4KV19XG4gKiAvPlxuICpcbiAqIC8vIEV4YW1wbGUgd2l0aCBCb290c3RyYXAgc3R5bGluZyAoQm9vdHN0cmFwIHN0eWxpbmcgY29tZXMgYXMgZGVmYXVsdClcbiAqXG4gKiA8UGFzc3dvcmRGaWVsZFxuICogICAgdmFsdWU9e3N0YXRlLmNvbmZpcm1QYXNzd29yZH1cbiAqICAgIG5hbWU9XCJwYXNzd29yZFwiXG4gKiAgICBoaW50PVwiTmVlZHMgdG8gYmUgYXQgbGVhc3QgOCBjaGFyYWN0ZXJzIGxvbmdcIlxuICogICAgbGFiZWxUZXh0PVwiUGFzc3dvcmRcIlxuICogIC8+XG4gKiAgYGBgXG4gKiBBbHNvIHdlIGNhbiBjcmVhdGUgdHdvICpQYXNzd29yZEZpZWxkKiBjb21wb25lbnRzIHRvIGNvbmZpcm0gcGFzc3dvcmRzIGFyZSBlcXVhbC4gUGxlYXNlIHNlZVxuICoge0BsaW5rIGFyZUZpZWxkc0VxdWFsfSBmb3IgbW9yZSBpbmZvLlxuICogVGhlIGZpcnN0ICpQYXNzd29yZEZpZWxkKiBoYXMgaGFzIGEgKm5hbWUqIHByb3Agb2YgKipwYXNzd29yZCoqICYgdGhlIHNlY29uZCAqUGFzc3dvcmRGaWVsZCogYSBuYW1lXG4gKiBwcm9wIG9mICpjb25maXJtUGFzc3dvcmQqLiBUaGVuIHdlIGNhbiBhZGQgYSB7QGxpbmsgYXJlRmllbGRzRXF1YWx9IHZhbGlkYXRvciB0byB0aGUgKlBhc3N3b3JkRmllbGQqXG4gKiB3aXRoIHRoZSAqY29uZmlybVBhc3N3b3JkKiBuYW1lIHByb3BzIChhbHNvIG5vdGljZSBob3cge0BsaW5rIGFyZUZpZWxkc0VxdWFsfSB0YWtlcyB0aGUgZmlyc3QgKlBhc3N3b3JkRmllbGQqXG4gKiBuYW1lIGFzIGFuIGFyZ3VtZW50KS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiA8UGFzc3dvcmRGaWVsZFxuICogIG5hbWU9XCJwYXNzd29yZFwiXG4gKiAgLy8gb3RoZXIgcHJvcHMuLi5cbiAqXG4gKiAvPlxuICpcbiAqIDxQYXNzd29yZEZpZWxkXG4gKiAgbmFtZT1cImNvbmZpcm1QYXNzd29yZFwiXG4gKiAgLy8gb3RoZXIgcHJvcHMuLi5cbiAqICB2YWxpZGF0b3JzPXtbYXJlRmllbGRzRXF1YWwoXCJwYXNzd29yZFwiKV19XG4gKiAvPlxuICogYGBgXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBjb25zdCBQYXNzd29yZEZpZWxkID0gKHByb3BzOiBJUGFzc3dvcmRGaWVsZCkgPT4ge1xuICBjb25zdCBwYXNzd29yZElucHV0ID0gbmV3IElucHV0RmllbGQ8SVBhc3N3b3JkRmllbGQ+KEZJRUxEX05BTUVTLlBBU1NXT1JELCBwcm9wcyk7XG4gIHJldHVybiBwYXNzd29yZElucHV0LmNyZWF0ZSgpO1xufTtcblxuXG5cbi8qKlxuICogVGhlIENoZWNrQm94RmllbGQgcmVxdWlyZXMgYSAqY2hlY2tlZCogcHJvcCBpbnN0ZWFkIG9mIGEgKnZhbHVlKiBwcm9wLiBTZWVcbiAqIHtAbGluayBJQ2hlY2tCb3hGaWVsZH0uXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiAvLyBBIGJhcmUgZm9ybSBleGFtcGxlIC4uLiByZW1lbWJlciB0byBzZXQgdGhlIHtAbGluayBGb3JtLmJhcmV9IHByb3BlcnR5IHRvIGB0cnVlYFxuICogIGltcG9ydCB7Q2hlY2tCb3hGaWVsZH0gZnJvbSBcInJlYWN0LWJhc2UtZm9ybXNcIjtcbiAqXG4gKiAgY29uc3Qgc3RhdGUgPSB7IHBhc3N3b3JkOiBcIlwiLCBjb25maXJtUGFzc3dvcmQ6IFwiXCIgfTtcbiAqXG4gKiA8Q2hlY2tCb3hGaWVsZFxuICogICBuYW1lPVwidGVybXNcIlxuICogICBjaGVja2VkPXtzdGF0ZS50ZXJtc31cbiAqIC8+XG4gKlxuICogLy8gRXhhbXBsZSB3aXRoIEJvb3RzdHJhcCBzdHlsaW5nIChCb290c3RyYXAgc3R5bGluZyBjb21lcyBhcyBkZWZhdWx0KVxuICogPENoZWNrQm94RmllbGRcbiAqICAgbmFtZT1cInRlcm1zXCJcbiAqICAgY2hlY2tlZD17c3RhdGUudGVybXN9XG4gKiAgIGhpbnQ9XCJDbGljayB0byBhZ3JlZVwiXG4gKiAgIGxhYmVsVGV4dD1cIkFncmVlIHRvIHRlcm1zICYgY29uZGl0aW9uc1wiXG4gKiAvPlxuICogYGBgXG4gKiBAcGFyYW0gcHJvcHMge0BsaW5rIElDaGVja0JveEZpZWxkfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBjb25zdCBDaGVja0JveEZpZWxkID0gKHByb3BzOiBJQ2hlY2tCb3hGaWVsZCkgPT4ge1xuICBjb25zdCBjaGVja0JveCA9IG5ldyBfQ2hlY2tCb3hGaWVsZDxJQ2hlY2tCb3hGaWVsZD4oRklFTERfTkFNRVMuQ0hFQ0tCT1gsIHByb3BzKTtcbiAgcmV0dXJuIGNoZWNrQm94LmNyZWF0ZSgpO1xufTtcblxuLyoqXG4gKiBUaGUgVGV4dEFyZWFGaWVsZCB0YWtlcyBpbiBhbiBleHRyYSBwcm9wIG9mICpyb3cqIHdoaWNoIGlzIGEgbnVtYmVyICYgZGVjbGFyZXNcbiAqIHRoZSBudW1iZXIgb2Ygcm93cyBkaXNwbGF5ZWQgYnkgdGhlIHRleHRhcmVhIGVsZW1lbnQuIFRoZSBUZXh0QXJlYUZpZWxkIGFjY2VwdHNcbiAqIGFsbCB0aGUge0BsaW5rIElGaWVsZH0gcHJvcHMuXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiAgKiAgaW1wb3J0IHtDaGVja0JveEZpZWxkfSBmcm9tIFwicmVhY3QtYmFzZS1mb3Jtc1wiO1xuICpcbiAqICBjb25zdCBzdGF0ZSA9IHsgYWJvdXQ6IFwiXCIgfTtcbiAqIC8vIEEgYmFyZSBmb3JtIGV4YW1wbGUgLi4uIHJlbWVtYmVyIHRvIHNldCB0aGUge0BsaW5rIEZvcm0uYmFyZX0gcHJvcGVydHkgdG8gYHRydWVgXG4gKiA8VGV4dEFyZWFGaWVsZFxuICogICAgdmFsdWU9e3N0YXRlLmFib3V0fVxuICogICAgbmFtZT1cImFib3V0XCJcbiAqICAgIHZhbGlkYXRvcnM9e1tpc0ZpZWxkRW1wdHkoMjApXX1cbiAqIC8+XG4gKlxuICogLy8gRXhhbXBsZSB3aXRoIEJvb3RzdHJhcCBzdHlsaW5nIChCb290c3RyYXAgc3R5bGluZyBjb21lcyBhcyBkZWZhdWx0KVxuICpcbiAqIDxUZXh0QXJlYUZpZWxkXG4gKiAgICBuYW1lPVwiYWJvdXRcIlxuICogICAgdmFsdWU9e3N0YXRlLmFib3V0fVxuICogICAgaGludD1cIk11c3QgYmUgYXQgbGVhc3QgMjAgY2hhcmFjdGVyc1wiXG4gKiAgICBsYWJlbFRleHQ9XCJBYm91dCB5b3UuLi5cIlxuICogICAgdmFsaWRhdG9ycz17W2lzRmllbGRFbXB0eSgyMCldfVxuICogLz5cbiAqIGBgYFxuICogQHBhcmFtIHByb3BzIHtAbGluayBJVGV4dElucHV0RmllbGR9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IFRleHRBcmVhRmllbGQgPSAocHJvcHM6IElUZXh0QXJlYUZpZWxkKSA9PiB7XG4gIGNvbnN0IHRleHRBcmVhID0gbmV3IF9UZXh0QXJlYUZpZWxkPElUZXh0QXJlYUZpZWxkPihGSUVMRF9OQU1FUy5URVhUQVJFQSwgcHJvcHMpO1xuICByZXR1cm4gdGV4dEFyZWEuY3JlYXRlKCk7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIElSYWRpb0dyb3VwUHJvcHMge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjaGlsZHJlbjogYW55O1xufVxuXG4vKipcbiAqIEBwcm9wcyB7QGxpbmsgSVJhZGlvR3JvdXBQcm9wc31cbiAqIEBwYXJhbSBwcm9wcyBUaGUgYFJhZGlvR3JvdXBgIGNvbXBvbmVudCB0YWtlcyBhIHNpbmdsZSBwcm9wcyBvZiBgbmFtZWAsIHdoaWNoXG4gKiBtdXN0IGJlIGEgdW5pcXVlIHRvIGEgZm9ybS4gU2VlIHtAbGluayBSYWRpb0ZpZWxkfS5cbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqICBpbXBvcnQge0NoZWNrQm94RmllbGR9IGZyb20gXCJyZWFjdC1iYXNlLWZvcm1zXCI7XG4gKlxuICogIGNvbnN0IHN0YXRlID0geyBtYWxlOiB0cnVlLCBmZW1hbGU6IGZhbHNlIH07XG4gKlxuICogIDxSYWRpb0dyb3VwIG5hbWU9XCJncm91cDFcIj5cbiAqICAgIC8vIHBsYWNlIFJhZGlvRmllbGRzIGNvbXBvbmVudHMgaGVyZS4uLlxuICogIDwvUmFkaW9Hcm91cD5cbiAqIGBgYFxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJhZGlvR3JvdXAocHJvcHM6IElSYWRpb0dyb3VwUHJvcHMpIHtcbiAgICBjb25zdCBjb250ZXh0VmFsdWU6IElSYWRpb0dyb3VwUGFyZW50Q29udGV4dCA9IHtwYXJlbnQ6IHtuYW1lOiBwcm9wcy5uYW1lfSwgY2hpbGRyZW46IHByb3BzLmNoaWxkcmVufTtcbiAgICByZXR1cm4gPFJhZGlvR3JvdXBDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0VmFsdWUgYXMgVHlwZVJhZGlvR3JvdXBNZXRhZGF0YX0+e3Byb3BzLmNoaWxkcmVufTwvUmFkaW9Hcm91cENvbnRleHQuUHJvdmlkZXI+O1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gcHJvcHMge0BsaW5rIElSYWRpb0ZpZWxkfVxuICogQGNvbnN0cnVjdG9yXG4gKiBgUmFkaW9GaWVsZGAgaW5wdXRzIGFyZSBkZXNpZ25lZCB0byBiZSB1c2VkIHdpdGggdGhlIHtAbGluayBSYWRpb0dyb3VwfSBjb21wb25lbnQuXG4gKiAgVG8gdXNlIHRoaXMgY29tcG9uZW50LCBhZGQgb3IgbmVzdCBpdCB3aXRoaW4gYSB7QGxpbmsgUmFkaW9Hcm91cH0gY29tcG9uZW50IGFzIGNoaWxkcmVuLlxuICogIEl0J3MgcG9zc2libGUgdG8gYWxzbyB1c2UgdmFsaWRhdG9ycyB3aXRoIGEgUmFkaW9Hcm91cCwgYXMgc2hvd24gYmVsb3c6XG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiAgaW1wb3J0IHtpc1JhZGlvQ2hlY2tlZCwgUmFkaW9GaWVsZCwgUmFkaW9Hcm91cH0gZnJvbSBcInJlYWN0LWJhc2UtZm9ybXNcIjtcbiAqXG4gKiAgY29uc3Qgc3RhdGUgPSB7IG1hbGU6IHRydWUsIGZlbWFsZTogZmFsc2UgfTtcbiAqXG4gKiAgPFJhZGlvR3JvdXAgbmFtZT1cImdyb3VwMVwiPlxuICogICAgPFJhZGlvRmllbGRcbiAqICAgICAgbmFtZT1cIm1hbGVcIlxuICogICAgICBjaGVja2VkPXtzdGF0ZS5tYWxlfVxuICogICAgICBoaW50PVwiQ2xpY2sgdG8gYWdyZWVcIlxuICogICAgICBsYWJlbFRleHQ9XCJBZ3JlZSB0byB0ZXJtcyAmIGNvbmRpdGlvbnNcIlxuICogICAgLz5cbiAqXG4gKiAgICA8UmFkaW9GaWVsZFxuICogICAgICBuYW1lPVwiZmVtYWxlXCJcbiAqICAgICAgY2hlY2tlZD17c3RhdGUuZmVtYWxlfVxuICogICAgICBoaW50PVwiQ2xpY2sgdG8gYWdyZWVcIlxuICogICAgICBsYWJlbFRleHQ9XCJBZ3JlZSB0byB0ZXJtcyAmIGNvbmRpdGlvbnNcIlxuICogICAgICB2YWxpZGF0b3JzPXtbaXNSYWRpb0NoZWNrZWQoKV19XG4gKiAgICAvPlxuICpcbiAqICA8L1JhZGlvR3JvdXA+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IFJhZGlvRmllbGQgPSAocHJvcHM6IElSYWRpb0ZpZWxkKSA9PiB7XG4gICAgY29uc3QgcmFkaW8gPSBuZXcgX1JhZGlvRmllbGQoRklFTERfTkFNRVMuUkFESU8sIHByb3BzKTtcbiAgICByZXR1cm4gcmFkaW8uY3JlYXRlKCk7XG59O1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRvIHJlbmRlciBhIHNlbGVjdCBmaWVsZCBlbGVtZW50LlxuICogQHBhcmFtIHByb3BzIHtAbGluayBJU2VsZWN0RmllbGR9XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqICBpbXBvcnQge1NlbGVjdEZpZWxkfSBmcm9tIFwicmVhY3QtYmFzZS1mb3Jtc1wiO1xuICpcbiAqICBjb25zdCBzdGF0ZSA9IHsgZnJ1aXRDaG9pY2U6IFwiXCIgfTtcbiAqXG4gKiA8U2VsZWN0RmllbGRcbiAqICAgc2l6ZT1cImxnXCJcbiAqICAgdmFsdWU9e3N0YXRlLmZydWl0Q2hvaWNlfVxuICogICBuYW1lPVwiZnJ1aXRDaG9pY2VcIlxuICogICBvcHRpb25zPXtbXCJiYW5hbmFcIiwgXCJhcHBsZVwiLCBcIm9yYW5nZVwiXX1cbiAqICAvPlxuICogYGBgXG4gKlxuICogWW91IGNhbiBhbHNvIHBhc3MgYW4gYXJyYXkgb2Ygb2JqZWN0cyBidXQgeW91IG11c3QgdXNlIGJvdGggdGhlXG4gKiAqb2JqZWN0S2V5KiAmICpvYmplY3RWYWx1ZSogcHJvcHMuIHRoZSBgb2JqZWN0S2V5YCB3aWxsIHVwZGF0ZSB5b3VyIHN0YXRlXG4gKiB2YWx1ZSAmIHRoZSBgb2JqZWN0VmFsdWVgIGlzIHdoYXQgaXMgZGlzcGxheWVkIHRvIHRoZSB1c2VyIGFzIGFuIG9wdGlvbi5cbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIC8vIFRoaXMgaXMgeW91ciBvcHRpb24gZGF0YVxuICogbGV0IHNlbGVjdERhdGEgPSBbXG4gKiAgIHtpZDogMSwgbmFtZTogXCJmaXJzdFwifSxcbiAqICAge2lkOiAyLCBuYW1lOiBcInNlY29uZFwifSxcbiAqIF07XG4gKiAvLyBUaGUgc3RhdGUgd2hpY2ggd2lsbCByZWNlaXZlIHRoZSB1cGRhdGVcbiAqIGxldCBzdGF0ZSA9IHtcbiAqICAgIHNlbGVjdF9kYXRhX2lkOiB1bmRlZmluZWQgYXMgYW55LFxuICogfTtcbiAqXG4gKiA8U2VsZWN0RmllbGRcbiAqICAgc2l6ZT1cImxnXCJcbiAqICAgdmFsdWU9e3N0YXRlLnNlbGVjdF9kYXRhX2lkfVxuICogICBuYW1lPVwiZnJ1aXRDaG9pY2VcIlxuICogICBvYmplY3RLZXk9XCJpZFwiIC8vIFZhbHVlIHdpbGwgdXBkYXRlIHN0YXRlLnNlbGVjdF9kYXRhX2lkIGUuZyAqMSwgMi4uLipcbiAqICAgb2JqZWN0VmFsdWU9XCJuYW1lXCIgLy8gVmFsdWUgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIHNlbGVjdCBmaWVsZCBlLmcgKmZpcnN0LCBzZWNvbmQuLi4qXG4gKiAgIG9wdGlvbnM9e3NlbGVjdERhdGF9XG4gKiAvPlxuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RGaWVsZCA9IChwcm9wczogSVNlbGVjdEZpZWxkKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0ID0gbmV3IF9TZWxlY3RGaWVsZChGSUVMRF9OQU1FUy5TRUxFQ1QsIHByb3BzKTtcbiAgICByZXR1cm4gc2VsZWN0LmNyZWF0ZSgpO1xufTtcblxuLyoqXG4gKiBUaGUgU3VibWl0QnV0dG9uIG9ubHkgcmVxdWlyZXMgYSB0ZXh0IHN0cmluZyBhcyBjaGlsZHJlbiBwcm9wcyAoc2VlIGJlbG93IGV4YW1wbGUpLlxuICogVGhlIFN1Ym1pdEJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkIHVudGlsIGFsbCBmb3JtIGZpZWxkcyBhcmUgdmFsaWRhdGVkLlxuICogQHBhcmFtIHByb3BzIHtAbGluayBJU3VibWl0QnV0dG9uUHJvcHN9XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGltcG9ydCB7U3VibWl0QnV0dG9ufSBmcm9tIFwicmVhY3QtYmFzZS1mb3Jtc1wiO1xuICpcbiAqIDxTdWJtaXRCdXR0b24+U3VibWl0PC9TdWJtaXRCdXR0b24+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IEZpbGVGaWVsZCA9IFJlYWN0LmZvcndhcmRSZWYoKHByb3BzOiBJRmlsZUZpZWxkLCByZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MRm9ybUVsZW1lbnQ+fGFueSkgPT4ge1xuICAgIGxldCBfcHJvcHMgPSB7Li4ucHJvcHMsIHJlZiB9O1xuICAgIGNvbnN0IGZpbGUgPSBuZXcgX0ZpbGVGaWVsZDxJRmlsZUZpZWxkPihGSUVMRF9OQU1FUy5GSUxFLCBfcHJvcHMpO1xuICAgIHJldHVybiBmaWxlLmNyZWF0ZSgpO1xufSk7XG5cblxuZXhwb3J0IGNvbnN0IFN1Ym1pdEJ1dHRvbiA9IG5ldyBfU3VibWl0QnV0dG9uKCkuY3JlYXRlKCk7XG4iLCIvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBQUklWQVRFIFNFUlZJQ0UgQ0xBU1NFUyBUTyBDUkVBVEUgTUVUQURBVEEgT0JKRUNUU1xuLy8gIDEuIEFic3RyYWN0TWV0YWRhdGFcbi8vICAyLiBNZXRhZGF0YVxuLy8gIDMuIE1ldGFkYXRhR3JvdXBcbi8vXG4vLyAgSU1QT1JUQU5UOiBPYmplY3RzIHRoYXQgaW1wbGVtZW50IEFic3RyYWN0TWV0YWRhdGEgRE8gTk9UIGNhcmUgYWJvdXQgdGhlIElGb3JtQ29udGV4dC5cbi8vICBJTVBPUlRBTlQ6IE1ldGFkYXRhIG9iamVjdHMgb25seSBjYXJlIGFib3V0IHRoZWlyIG93biBJTWV0YWRhdGEgc3RhdGUgdHlwZSAoc2VlIE1FVEFEQVRBX05BTUVTKS5cbi8vICBJTVBPUlRBTlQ6IENoaWxkcmVuIG9iamVjdHMgb2YgTWV0YWRhdGFHcm91cCBjYXJlIGFib3V0IHRoZWlyIHBhcmVudE5hbWUgJiB0aGVpciBvd24gc3RhdGUgdHlwZSBvbmx5LlxuaW1wb3J0IHtNRVRBREFUQV9OQU1FU30gZnJvbSBcIi4uL2Zvcm1cIjtcbmltcG9ydCB7SVZhbGlkYXRpb259IGZyb20gXCIuLi92YWxpZGF0b3JzXCI7XG5pbXBvcnQge0ZJRUxEX05BTUVTfSBmcm9tIFwiLi4vZWxlbWVudHNcIjtcblxuLyoqIEBpbnRlcm5hbCAqKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU1ldGFkYXRhPFQ+IHtcbiAgICBzdGF0ZToge1trOiBzdHJpbmddOiBUfTtcbiAgICByZWFkb25seSB1cGRhdGVTdGF0ZTogRnVuY3Rpb247XG4gICAgcmVhZG9ubHkgbWV0YVR5cGU6IHN0cmluZztcbiAgICBmaWVsZFR5cGU6IEZJRUxEX05BTUVTO1xuICAgIHBhcmVudE5hbWU/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgIGRlZmF1bHRTdGF0ZToge307XG4gICAgaW5pdDogKG5hbWU6IHN0cmluZywgZmllbGRUeXBlOiBGSUVMRF9OQU1FUykgPT4gdm9pZDtcbiAgICB1cGRhdGU6IChwcm9wczogYW55LCB2YWxpZGF0aW9uOiBBcnJheTxJVmFsaWRhdGlvbj4pID0+IHZvaWQ7XG59XG5cbi8qKiBAaW50ZXJuYWwgKiovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RNZXRhZGF0YTxUPiBpbXBsZW1lbnRzIElNZXRhZGF0YTxUPiB7XG4gICAgcHVibGljIHN0YXRlOiB7W2s6IHN0cmluZ106IFR9O1xuICAgIHB1YmxpYyByZWFkb25seSB1cGRhdGVTdGF0ZTogRnVuY3Rpb247XG4gICAgcHVibGljIHJlYWRvbmx5IG1ldGFUeXBlOiBNRVRBREFUQV9OQU1FUztcbiAgICBwdWJsaWMgcGFyZW50TmFtZT86IHN0cmluZztcbiAgICBwcml2YXRlIF9maWVsZFR5cGU/OiBGSUVMRF9OQU1FUztcbiAgICBwcml2YXRlIF9uYW1lPzogc3RyaW5nO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBkZWZhdWx0U3RhdGU6IFQ7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3Ioc3RhdGU6IHtbazogc3RyaW5nXTogVH0sIHVwZGF0ZVN0YXRlOiBGdW5jdGlvbiwgbWV0YVR5cGU6IE1FVEFEQVRBX05BTUVTKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSA9IHVwZGF0ZVN0YXRlO1xuICAgICAgICB0aGlzLm1ldGFUeXBlID0gbWV0YVR5cGU7XG4gICAgfVxuXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lIGFzIHN0cmluZztcbiAgICB9XG5cbiAgICBzZXQgbmFtZSh2YWw6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9uYW1lID0gdmFsO1xuICAgIH1cblxuICAgIGdldCBmaWVsZFR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWVsZFR5cGUgYXMgYW55O1xuICAgIH1cblxuICAgIHNldCBmaWVsZFR5cGUodmFsOiBGSUVMRF9OQU1FUykge1xuICAgICAgICB0aGlzLl9maWVsZFR5cGUgPSB2YWw7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgaW5pdChuYW1lOiBzdHJpbmcsIGZpZWxkVHlwZTogRklFTERfTkFNRVMpOiB2b2lkXG5cbiAgICBhYnN0cmFjdCB1cGRhdGUocHJvcHM6IGFueSwgdmFsaWRhdGlvbjogQXJyYXk8SVZhbGlkYXRpb24+KTogdm9pZDtcblxuICAgIHB1YmxpYyBpc0ZpZWxkVG91Y2hlZCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYodGhpcy5zdGF0ZVt0aGlzLm5hbWVdKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuc3RhdGVbdGhpcy5uYW1lXSBhcyBhbnkpLmlzVG91Y2hlZCBhcyBib29sZWFuIC8vIFRPRE8gZml4IHR5cGVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3R9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtBYnN0cmFjdEZpZWxkLCBJQWJzdHJhY3RGaWVsZH0gZnJvbSBcIi4vX0Fic3RyYWN0RmllbGRcIjtcbmltcG9ydCB7SUZvcm1Db250ZXh0fSBmcm9tIFwiLi4vZm9ybVwiO1xuaW1wb3J0IHtGSUVMRF9OQU1FUywgSUZpZWxkfSBmcm9tIFwiLi4vZWxlbWVudHNcIjtcblxuXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBDaGVja0JveEZpZWxkPFQgZXh0ZW5kcyBJRmllbGQ+IGV4dGVuZHMgQWJzdHJhY3RGaWVsZDxUPiBpbXBsZW1lbnRzIElBYnN0cmFjdEZpZWxkPFQ+IHtcblxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IEZJRUxEX05BTUVTLCBwcm9wczogVCkge1xuICAgICAgICBzdXBlcihwcm9wcywgdHlwZSk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGaWVsZCh0aGlzLmdldEZpZWxkKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtR3JvdXAoY2hpbGRyZW46IGFueSk6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXAgZm9ybS1jaGVja1wiPlxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5sYWJlbFRleHQgJiYgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tY2hlY2stbGFiZWxcIj57dGhpcy5wcm9wcy5sYWJlbFRleHR9PC9sYWJlbD59XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuaGludCAmJiA8c21hbGwgY2xhc3NOYW1lPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj57dGhpcy5wcm9wcy5oaW50fTwvc21hbGw+fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZpZWxkKCkge1xuICAgICAgICByZXR1cm4gKCkgPT4gKDw+ezxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9e3RoaXMudHlwZX1cbiAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLmdldFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleSgpW3RoaXMucHJvcHMubmFtZV0gfHwgZmFsc2V9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiAodGhpcy5jb250ZXh0IGFzIGFueSkudXBkYXRlUGFyZW50U3RhdGUodGhpcy5vdmVycmlkZUV2ZW50KGUsIHRoaXMuZ2V0U3RhdGVQb3NpdGlvbkZyb21Gb3JtS2V5KClbdGhpcy5wcm9wcy5uYW1lXSksIHRoaXMucHJvcHMubmFtZSl9XG4gICAgICAgICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17QWJzdHJhY3RGaWVsZC5tZXJnZURlZmF1bHRDc3NXaXRoUHJvcHMoXCJmb3JtLWNoZWNrLWlucHV0XCIsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCAodGhpcy5jb250ZXh0IGFzIGFueSkuYmFyZSl9XG4gICAgICAgIC8+fTwvPik7XG4gICAgfVxufVxuXG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3R9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtfZ2VuZXJpY0Zvcm1Hcm91cCwgQWJzdHJhY3RGaWVsZCwgSUFic3RyYWN0RmllbGR9IGZyb20gXCIuL19BYnN0cmFjdEZpZWxkXCI7XG5pbXBvcnQge0ZJRUxEX05BTUVTLCBJRmllbGQsIElGaWxlRmllbGR9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuaW1wb3J0IHtjcmVhdGVGaWxlT2JqZWN0LCBJRmlsZX0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogVGhlIG1haW4gZGlmZmVyZW5jZSBvZiB0aGlzIGNsYXNzIGlzIHRoYXQgdGhlIG9uQ2hhbmdlIGV2ZW50IGlzIHVzZWQgb25seVxuICogdG8gY2Fycnkgb3V0IHRoZSB2YWxpZGF0aW9uICh3aGljaCBpcyBzZXQgbWFudWFsbHkgaW4gRmlsZUZpZWxkLl91cGRhdGVGaWVsZFZhbGlkYXRpb24pLlxuICovXG5leHBvcnQgY2xhc3MgRmlsZUZpZWxkPFQgZXh0ZW5kcyBJRmllbGQ+IGV4dGVuZHMgQWJzdHJhY3RGaWVsZDxUPiBpbXBsZW1lbnRzIElBYnN0cmFjdEZpZWxkPFQ+IHtcblxuICAgIF9maWxlPzogSUZpbGV8bnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IEZJRUxEX05BTUVTLCBwcm9wczogVCAmIElGaWxlRmllbGQpIHtcbiAgICAgICAgc3VwZXIocHJvcHMsIHR5cGUpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgfVxuXG4gICAgZ2V0IGZpbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWxlIGFzIElGaWxlfG51bGw7XG4gICAgfVxuXG4gICAgc2V0IGZpbGUodmFsOiBJRmlsZXxudWxsKSB7XG4gICAgICAgIHRoaXMuX2ZpbGUgPSB2YWw7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRmllbGQodGhpcy5nZXRGaWVsZCgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZm9ybUdyb3VwKGNoaWxkcmVuOiBhbnkpOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gX2dlbmVyaWNGb3JtR3JvdXA8VD4odGhpcy5wcm9wcywgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRGaWVsZCgpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IDw+ezxpbnB1dFxuICAgICAgICAgICAgcmVmPXsodGhpcy5wcm9wcyBhcyBhbnkpLnJlZn1cbiAgICAgICAgICAgIHR5cGU9e3RoaXMudHlwZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLl91cGRhdGVGaWVsZFZhbGlkYXRpb24uYmluZCh0aGlzKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17QWJzdHJhY3RGaWVsZC5tZXJnZURlZmF1bHRDc3NXaXRoUHJvcHMoXCJmb3JtLWNvbnRyb2wtZmlsZVwiLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwgKHRoaXMuY29udGV4dCBhcyBhbnkpLmJhcmUpfVxuICAgICAgICAvPn08Lz47XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfdXBkYXRlRmllbGRWYWxpZGF0aW9uID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmZpbGUgPSBjcmVhdGVGaWxlT2JqZWN0KCh0aGlzLnByb3BzIGFzIGFueSkucmVmKTtcbiAgICAgICAgaWYodHlwZW9mIHRoaXMuZmlsZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBfXG4gICAgICogQGRlc2NyaXB0aW9uIFRoaXMgb3ZlcnJpZGVzIHRoZSBzYW1lIGJlaGF2aW91ciBpbiB0aGUgcGFyZW50TmFtZSBjbGFzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RmllbGRWYWx1ZShfOiB1bmtub3duKTogYW55IHtcbiAgICAgICAgaWYoKHRoaXMucHJvcHMgYXMgVCAmIElGaWxlRmllbGQpLnJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRmlsZU9iamVjdCgodGhpcy5wcm9wcyBhcyBUICYgSUZpbGVGaWVsZCkucmVmKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQge0NvbnRleHQsIGRlZmF1bHQgYXMgUmVhY3QsIFJlYWN0RWxlbWVudH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7SUZvcm1Db250ZXh0fSBmcm9tIFwiLi4vZm9ybVwiO1xuaW1wb3J0IHtGSUVMRF9OQU1FUywgSUZpZWxkfSBmcm9tIFwiLi4vZWxlbWVudHNcIjtcbmltcG9ydCB7X2dlbmVyaWNGb3JtR3JvdXAsIEFic3RyYWN0RmllbGQsIElBYnN0cmFjdEZpZWxkfSBmcm9tIFwiLi9fQWJzdHJhY3RGaWVsZFwiO1xuXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBJbnB1dEZpZWxkPFQgZXh0ZW5kcyBJRmllbGQ+IGV4dGVuZHMgQWJzdHJhY3RGaWVsZDxUPiBpbXBsZW1lbnRzIElBYnN0cmFjdEZpZWxkPFQ+IHtcblxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IEZJRUxEX05BTUVTLCBwcm9wczogVCkge1xuICAgICAgICBzdXBlcihwcm9wcywgdHlwZSk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGaWVsZCh0aGlzLmdldEZpZWxkKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtR3JvdXAoY2hpbGRyZW46IGFueSk6IFJlYWN0RWxlbWVudCB7XG4gICAgICAgIHJldHVybiBfZ2VuZXJpY0Zvcm1Hcm91cDxUPih0aGlzLnByb3BzLCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZpZWxkKCkge1xuICAgICAgICByZXR1cm4gKCkgPT4gPD57PGlucHV0XG4gICAgICAgICAgICB0eXBlPXt0aGlzLnR5cGV9XG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5nZXRTdGF0ZVBvc2l0aW9uRnJvbUZvcm1LZXkoKVt0aGlzLnByb3BzLm5hbWVdfHwgXCJcIn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gKHRoaXMuY29udGV4dCBhcyBhbnkpLnVwZGF0ZVBhcmVudFN0YXRlKGUsIHRoaXMucHJvcHMubmFtZSl9XG4gICAgICAgICAgICBuYW1lPXt0aGlzLnByb3BzLm5hbWV9XG4gICAgICAgICAgICBjbGFzc05hbWU9e0Fic3RyYWN0RmllbGQubWVyZ2VEZWZhdWx0Q3NzV2l0aFByb3BzKFwiZm9ybS1jb250cm9sXCIsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCB0aGlzLmJhcmUpfVxuICAgICAgICAvPn08Lz47XG4gICAgfVxufVxuIiwiaW1wb3J0IHtJRmllbGRWYWxpZGF0aW9uLCBNRVRBREFUQV9OQU1FU30gZnJvbSBcIi4uL2Zvcm1cIjtcbmltcG9ydCB7SVZhbGlkYXRpb259IGZyb20gXCIuLi92YWxpZGF0b3JzXCI7XG5pbXBvcnQge2dldEZpZWxkVmFsdWVUeXBlfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHtGSUVMRF9OQU1FU30gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5pbXBvcnQge0Fic3RyYWN0TWV0YWRhdGF9IGZyb20gXCIuL19BYnN0cmFjdE1ldGFkYXRhXCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcblxuXG4vKiogQGludGVybmFsICoqL1xuZXhwb3J0IGNsYXNzIE1ldGFkYXRhPFQgZXh0ZW5kcyBJRmllbGRWYWxpZGF0aW9uPiBleHRlbmRzIEFic3RyYWN0TWV0YWRhdGE8VD4ge1xuICAgIHB1YmxpYyBkZWZhdWx0U3RhdGUgPSB7fSBhcyBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihzdGF0ZToge1trOiBzdHJpbmddOiBUfSwgdXBkYXRlU3RhdGU6IEZ1bmN0aW9uLCB0eXBlOiBNRVRBREFUQV9OQU1FUykge1xuICAgICAgIHN1cGVyKHN0YXRlLCB1cGRhdGVTdGF0ZSwgdHlwZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXQobmFtZTogc3RyaW5nLCBmaWVsZFR5cGU6IEZJRUxEX05BTUVTKTogdm9pZCB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuZmllbGRUeXBlID0gZmllbGRUeXBlO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUodmFsdWU6IGFueSwgdmFsaWRhdGlvbjogQXJyYXk8SVZhbGlkYXRpb24+KTogdm9pZCB7XG4gICAgICAgIGxldCBzdGF0ZToge1trOiBzdHJpbmddOiBJRmllbGRWYWxpZGF0aW9ufTtcbiAgICAgICAgaWYoISh0aGlzLm5hbWUgaW4gdGhpcy5zdGF0ZSkpe1xuICAgICAgICAgICAgc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgICAgICAgICAgICBbdGhpcy5uYW1lXToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGlzVG91Y2hlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkVmFsdWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBnZXRGaWVsZFZhbHVlVHlwZSh0aGlzLmZpZWxkVHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHN0YXRlKTtcbiAgICAgICAgICAgIH0sIFtzdGF0ZV0pO1xuICAgICAgICB9IGVsc2UgaWYodGhpcy5zdGF0ZVt0aGlzLm5hbWVdICYmIHZhbHVlICE9PSB0aGlzLnN0YXRlW3RoaXMubmFtZV0uZmllbGRWYWx1ZXMuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgIFt0aGlzLm5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGdldEZpZWxkVmFsdWVUeXBlKHRoaXMuZmllbGRUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlzVG91Y2hlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICB9LCBbc3RhdGVdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7SUZpZWxkVmFsaWRhdGlvbiwgTUVUQURBVEFfTkFNRVN9IGZyb20gXCIuLi9mb3JtXCI7XG5pbXBvcnQge0lWYWxpZGF0aW9ufSBmcm9tIFwiLi4vdmFsaWRhdG9yc1wiO1xuaW1wb3J0IHtnZXRGaWVsZFZhbHVlVHlwZSwgSUZpbGV9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0ZJRUxEX05BTUVTfSBmcm9tIFwiLi4vZWxlbWVudHNcIjtcbmltcG9ydCB7QWJzdHJhY3RNZXRhZGF0YX0gZnJvbSBcIi4vX0Fic3RyYWN0TWV0YWRhdGFcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG5cbi8qKiBAaW50ZXJuYWwgKiovXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFGaWxlPFQgZXh0ZW5kcyBJRmllbGRWYWxpZGF0aW9uPiBleHRlbmRzIEFic3RyYWN0TWV0YWRhdGE8VD4ge1xuICAgIHB1YmxpYyBkZWZhdWx0U3RhdGUgPSB7fSBhcyBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihzdGF0ZToge1trOiBzdHJpbmddOiBUfSwgdXBkYXRlU3RhdGU6IEZ1bmN0aW9uLCB0eXBlOiBNRVRBREFUQV9OQU1FUykge1xuICAgICAgICBzdXBlcihzdGF0ZSwgdXBkYXRlU3RhdGUsIHR5cGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0KG5hbWU6IHN0cmluZywgZmllbGRUeXBlOiBGSUVMRF9OQU1FUyk6IHZvaWQge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmZpZWxkVHlwZSA9IGZpZWxkVHlwZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlKHZhbHVlOiBhbnksIHZhbGlkYXRpb246IEFycmF5PElWYWxpZGF0aW9uPik6IHZvaWQge1xuICAgICAgICBsZXQgc3RhdGU6IHtbazogc3RyaW5nXTogSUZpZWxkVmFsaWRhdGlvbn07XG4gICAgICAgIGlmKCEodGhpcy5uYW1lIGluIHRoaXMuc3RhdGUpKXtcbiAgICAgICAgICAgIHN0YXRlID0ge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUsXG4gICAgICAgICAgICAgICAgW3RoaXMubmFtZV06IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBpc1RvdWNoZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZFZhbHVlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZ2V0RmllbGRWYWx1ZVR5cGUodGhpcy5maWVsZFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICB9LCBbc3RhdGVdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLnN0YXRlW3RoaXMubmFtZV0pIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50VmFsdWU6IElGaWxlID0gdGhpcy5zdGF0ZVt0aGlzLm5hbWVdLmZpZWxkVmFsdWVzLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgIGlmKHZhbHVlID09PSBudWxsICYmIE9iamVjdC5rZXlzKGN1cnJlbnRWYWx1ZSkubGVuZ3RoIHx8IHZhbHVlICYmIHZhbHVlLm5hbWUgIT09IGN1cnJlbnRWYWx1ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIFt0aGlzLm5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBnZXRGaWVsZFZhbHVlVHlwZSh0aGlzLmZpZWxkVHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlOiB2YWx1ZSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7SVJhZGlvR3JvdXBQYXJlbnRDb250ZXh0LCBNRVRBREFUQV9OQU1FU30gZnJvbSBcIi4uL2Zvcm1cIjtcbmltcG9ydCB7SVZhbGlkYXRpb259IGZyb20gXCIuLi92YWxpZGF0b3JzXCI7XG5pbXBvcnQge2dldEZpZWxkVmFsdWVUeXBlfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHtGSUVMRF9OQU1FU30gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5pbXBvcnQge0Fic3RyYWN0TWV0YWRhdGF9IGZyb20gXCIuL19BYnN0cmFjdE1ldGFkYXRhXCI7XG5pbXBvcnQge1R5cGVNZXRhZGF0YVJhZGlvR3JvdXBWYWx1ZX0gZnJvbSBcIi4uL2ZpZWxkX2NsYXNzZXMvX1JhZGlvRmllbGRcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG5cbi8qKiBAaW50ZXJuYWwgKiovXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFHcm91cDxUPiBleHRlbmRzIEFic3RyYWN0TWV0YWRhdGE8VD4ge1xuICAgIHB1YmxpYyBkZWZhdWx0U3RhdGUgPSB7fSBhcyBUO1xuICAgIHB1YmxpYyBwYXJlbnROYW1lPzogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3Ioc3RhdGU6IHtbazogc3RyaW5nXTogVH0sIHVwZGF0ZVN0YXRlOiBGdW5jdGlvbiwgdHlwZTogTUVUQURBVEFfTkFNRVMpIHtcbiAgICAgICAgc3VwZXIoc3RhdGUsIHVwZGF0ZVN0YXRlLCB0eXBlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdChuYW1lOiBzdHJpbmcsIGZpZWxkVHlwZTogRklFTERfTkFNRVMpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5maWVsZFR5cGUgPSBmaWVsZFR5cGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogQHBhcmFtIGN1cnJlbnRcbiAgICAgKiBAcGFyYW0gdmFsaWRhdGlvblxuICAgICAqIEBwYXJhbSBpc1RvdWNoZWQge0Jvb2xlYW59IC0gU2V0IHRoaXMgdG8gZmFsc2Ugb24gaW5pdFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY3JlYXRlR3JvdXBTdGF0ZShjdXJyZW50OiBUeXBlTWV0YWRhdGFSYWRpb0dyb3VwVmFsdWUsIHZhbGlkYXRpb246IEFycmF5PElWYWxpZGF0aW9uPiwgaXNUb3VjaGVkPXRydWUpOiBJUmFkaW9Hcm91cFBhcmVudENvbnRleHQge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIFtjdXJyZW50LnBhcmVudE5hbWVdOiB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZVtjdXJyZW50LnBhcmVudE5hbWVdLFxuICAgICAgICAgICAgICAgIFt0aGlzLm5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3VycmVudC5wYXJlbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IHZhbGlkYXRpb24gfHwgW10sXG4gICAgICAgICAgICAgICAgICAgIGlzVG91Y2hlZCxcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGdldEZpZWxkVmFsdWVUeXBlKHRoaXMuZmllbGRUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJyZW50LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgdXBkYXRlKGN1cnJlbnQ6IFR5cGVNZXRhZGF0YVJhZGlvR3JvdXBWYWx1ZSwgdmFsaWRhdGlvbjogQXJyYXk8SVZhbGlkYXRpb24+KTogdm9pZCB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHt9O1xuICAgICAgICBpZighdGhpcy5zdGF0ZVtjdXJyZW50LnBhcmVudE5hbWVdKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IHRoaXMuX2NyZWF0ZUdyb3VwU3RhdGUoY3VycmVudCwgdmFsaWRhdGlvbiwgZmFsc2UpO1xuICAgICAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHN0YXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYodGhpcy5zdGF0ZVtjdXJyZW50LnBhcmVudE5hbWVdICYmICEodGhpcy5uYW1lIGluIHRoaXMuc3RhdGVbY3VycmVudC5wYXJlbnROYW1lXSkpIHtcbiAgICAgICAgICAgIC8vIEZvciByZWFkYWJpbGl0eSAtIGtlZXAgdGhpcyBjbGF1c2UgJiB0aGUgbmV4dCwgc2VwYXJhdGUgcGxlYXNlXG4gICAgICAgICAgICBzdGF0ZSA9IHRoaXMuX2NyZWF0ZUdyb3VwU3RhdGUoY3VycmVudCwgdmFsaWRhdGlvbik7XG4gICAgICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoc3RhdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZigodGhpcy5zdGF0ZVtjdXJyZW50LnBhcmVudE5hbWVdIGFzIGFueSlbdGhpcy5uYW1lXSAmJlxuICAgICAgICAgICAgKHRoaXMuc3RhdGVbY3VycmVudC5wYXJlbnROYW1lXSBhcyBhbnkpW3RoaXMubmFtZV0uZmllbGRWYWx1ZXMudmFsdWUgIT09IGN1cnJlbnQudmFsdWUpIHtcbiAgICAgICAgICAgIHN0YXRlID0gdGhpcy5fY3JlYXRlR3JvdXBTdGF0ZShjdXJyZW50LCB2YWxpZGF0aW9uKTtcbiAgICAgICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpc0ZpZWxkVG91Y2hlZCgpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHBhcmVudFN0YXRlID0gKHRoaXMuc3RhdGUpO1xuICAgICAgICBpZihwYXJlbnRTdGF0ZSkge1xuICAgICAgICAgICAgaWYodGhpcy5wYXJlbnROYW1lICYmIHRoaXMubmFtZSAmJiB0aGlzLnN0YXRlW3RoaXMucGFyZW50TmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsZXQgbWV0YUdyb3VwID0gKHRoaXMuc3RhdGVbdGhpcy5wYXJlbnROYW1lXSBhcyBhbnkpW3RoaXMubmFtZSBhcyBrZXlvZiBUXTtcbiAgICAgICAgICAgICAgICBpZihtZXRhR3JvdXApIHJldHVybiBtZXRhR3JvdXAuaXNUb3VjaGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3QsIHVzZUNvbnRleHR9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtBYnN0cmFjdEZpZWxkLCBJQWJzdHJhY3RGaWVsZH0gZnJvbSBcIi4vX0Fic3RyYWN0RmllbGRcIjtcbmltcG9ydCB7RklFTERfTkFNRVMsIElSYWRpb0ZpZWxkfSBmcm9tIFwiLi4vZWxlbWVudHNcIjtcbmltcG9ydCB7SUZvcm1Db250ZXh0LCBJUmFkaW9Hcm91cFBhcmVudENvbnRleHQsIFJhZGlvR3JvdXBDb250ZXh0LCBUeXBlRmllbGRWYWx1ZVR5cGVzfSBmcm9tIFwiLi4vZm9ybVwiO1xuaW1wb3J0IHtJVmFsaWRhdGlvbn0gZnJvbSBcIi4uL3ZhbGlkYXRvcnNcIjtcbmltcG9ydCB7Z2V0RmllbGRWYWx1ZVR5cGV9IGZyb20gXCIuLi9jb3JlXCI7XG5cbmV4cG9ydCB0eXBlIFR5cGVNZXRhZGF0YVJhZGlvR3JvdXBWYWx1ZSA9IHsgdmFsdWU6IGJvb2xlYW4sIHBhcmVudE5hbWU6IHN0cmluZywgbmFtZTogc3RyaW5nIH07XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBSYWRpb0ZpZWxkPFQgZXh0ZW5kcyBJUmFkaW9GaWVsZD4gZXh0ZW5kcyBBYnN0cmFjdEZpZWxkPFQ+IGltcGxlbWVudHMgSUFic3RyYWN0RmllbGQ8VD4ge1xuICAgIHByaXZhdGUgX3BhcmVudE5hbWU/OiBzdHJpbmc7XG4gICAgcHVibGljIHByb3BzOiBhbnk7XG4gICAgcHVibGljIHR5cGU6IGFueTtcbiAgICBwdWJsaWMgcmFkaW9Db250ZXh0PzogSVJhZGlvR3JvdXBQYXJlbnRDb250ZXh0OyAvLyBUT0RPIGlmIG1vcmUgZ3JvdXBzIGFyZSByZXF1aXJlZCB0aGVuIG1ha2UgdGhpcyBhYnN0cmFjdFxuXG4gICAgY29uc3RydWN0b3IodHlwZTogRklFTERfTkFNRVMsIHByb3BzOiBUKSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCB0eXBlKTtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnJhZGlvQ29udGV4dCA9IHVzZUNvbnRleHQoUmFkaW9Hcm91cENvbnRleHQpIGFzIGFueTtcbiAgICAgICAgaWYodGhpcy5yYWRpb0NvbnRleHQgJiYgdGhpcy5yYWRpb0NvbnRleHQucGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudE5hbWUgPSB0aGlzLnJhZGlvQ29udGV4dC5wYXJlbnQubmFtZTtcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGEucGFyZW50TmFtZSA9IHRoaXMucGFyZW50TmFtZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBwYXJlbnROYW1lKCk6IHN0cmluZ3x1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50TmFtZTtcbiAgICB9XG5cbiAgICBzZXQgcGFyZW50TmFtZSh2YWw6IHN0cmluZ3x1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fcGFyZW50TmFtZSA9IHZhbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGaWVsZCh0aGlzLmdldEZpZWxkKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtR3JvdXAoY2hpbGRyZW46IGFueSk6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXAgZm9ybS1jaGVja1wiPlxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5sYWJlbFRleHQgJiYgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tY2hlY2stbGFiZWxcIj57dGhpcy5wcm9wcy5sYWJlbFRleHR9PC9sYWJlbD59XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuaGludCAmJiA8c21hbGwgY2xhc3NOYW1lPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj57dGhpcy5wcm9wcy5oaW50fTwvc21hbGw+fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZpZWxkKCkge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9e3RoaXMudHlwZX1cbiAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLmdldFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleSgpW3RoaXMucHJvcHMubmFtZV0gfHwgZmFsc2V9XG4gICAgICAgICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMuaGFuZGxlT25DaGFuZ2UoZSwgKHRoaXMucmFkaW9Db250ZXh0IGFzIElSYWRpb0dyb3VwUGFyZW50Q29udGV4dCkpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17QWJzdHJhY3RGaWVsZC5tZXJnZURlZmF1bHRDc3NXaXRoUHJvcHMoXCJmb3JtLWNoZWNrLWlucHV0XCIsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCAodGhpcy5jb250ZXh0IGFzIGFueSkuYmFyZSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlT25DaGFuZ2UgPSAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PiwgcmFkaW9Db250ZXh0OiBJUmFkaW9Hcm91cFBhcmVudENvbnRleHQpID0+IHtcbiAgICAgICAgbGV0IGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MRm9ybUVsZW1lbnQ+ID0gdGhpcy5vdmVycmlkZUV2ZW50KGUsIGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgKHRoaXMuY29udGV4dCBhcyBhbnkpLnVwZGF0ZVJhZGlvR3JvdXBTdGF0ZUZyb21QYXNzZWRJbkNvbnRleHQoZXZlbnQsIHRoaXMucHJvcHMubmFtZSwgcmFkaW9Db250ZXh0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogQHBhcmFtIHByb3BzXG4gICAgICogQGRlc2NyaXB0aW9uIFRoaXMgaXMgc28gdGhhdCBib3RoIGNsYXNzIGNvbXBvbmVudHMgJiBob29rIGJhc2VkXG4gICAgICogY29tcG9uZW50cyBnZXQgdXBkYXRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2VnYXNld2ljei9yZWFjdC1iYXJlLWZvcm1zL2lzc3Vlcy8xMDAuXG4gICAgICogVGhlIEFic3RyYWN0RmllbGQncyBnZXRGaWVsZFZhbHVlIGltcGxlbWVudGF0aW9uIGRpZmZlcnMgYmVjYXVzZSB0aGUgdmFsdWUgb2ZcbiAgICAgKiB0aGUgZm9ybSBlbGVtZW50IGNhbiBiZSBkZXJpdmVkIGRpcmVjdGx5IGZyb20gcHJvcHMuXG4gICAgICovXG4gICAgcHVibGljIGdldEZpZWxkVmFsdWUocHJvcHM6IFQpOiBhbnkge1xuICAgICAgICBjb25zdCBmb3JtS2V5ID0gdGhpcy5jb250ZXh0Py5mb3JtS2V5O1xuICAgICAgICBpZiAoZm9ybUtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dD8uc3RhdGVbZm9ybUtleV1bdGhpcy5wcm9wcy5uYW1lXSB8fCBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0Py5zdGF0ZVt0aGlzLnByb3BzLm5hbWVdIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyB2YWxpZGF0ZSgpOiBBcnJheTxJVmFsaWRhdGlvbj4ge1xuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmdldEZpZWxkVmFsdWUodGhpcy5wcm9wcyk7XG4gICAgICAgIC8vIENhcnJ5IG91dCB0aGUgdmFsaWRhdGlvblxuICAgICAgICBsZXQgdmFsaWRhdGlvbiA9IHRoaXMuZG9WYWxpZGF0aW9uKHZhbHVlKTtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBtZXRhZGF0YSB0eXBlIHN0YXRlXG4gICAgICAgIHRoaXMubWV0YWRhdGEudXBkYXRlKHsgdmFsdWUsIHBhcmVudE5hbWU6IHRoaXMucGFyZW50TmFtZSwgbmFtZTogdGhpcy5wcm9wcy5uYW1lfSBhcyBUeXBlTWV0YWRhdGFSYWRpb0dyb3VwVmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgICByZXR1cm4gdmFsaWRhdGlvbjtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBSZWFjdH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7X2dlbmVyaWNGb3JtR3JvdXAsIEFic3RyYWN0RmllbGQsIElBYnN0cmFjdEZpZWxkfSBmcm9tIFwiLi9fQWJzdHJhY3RGaWVsZFwiO1xuaW1wb3J0IHtGSUVMRF9OQU1FUywgSUZpZWxkLCBJU2VsZWN0RmllbGQsIFR5cGVTZWxlY3RDc3NTaXplTmFtZX0gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIFNlbGVjdEZpZWxkPFQgZXh0ZW5kcyBJRmllbGQgJiBJU2VsZWN0RmllbGQ+IGV4dGVuZHMgQWJzdHJhY3RGaWVsZDxUPiBpbXBsZW1lbnRzIElBYnN0cmFjdEZpZWxkPFQ+IHtcblxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IEZJRUxEX05BTUVTLCBwcm9wczogVCkge1xuICAgICAgICBzdXBlcihwcm9wcywgdHlwZSk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGaWVsZCh0aGlzLmdldEZpZWxkKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtR3JvdXAoY2hpbGRyZW46IGFueSk6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gICAgICAgIHJldHVybiBfZ2VuZXJpY0Zvcm1Hcm91cDxUPih0aGlzLnByb3BzLCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZ2V0T3B0aW9ucyhvcHRpb25zOiBBcnJheTxhbnk+ID0gW10pIHtcbiAgICAgICAgaWYodGhpcy5wcm9wcy5vYmplY3RLZXkgJiYgdGhpcy5wcm9wcy5vYmplY3RWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMubWFwKChvcHRWYWw6IHN0cmluZywgaTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxvcHRpb24gdmFsdWU9e29wdFZhbFt0aGlzLnByb3BzLm9iamVjdEtleSBhcyBhbnldfSBrZXk9e2l9XG4gICAgICAgICAgICAgICAgPntvcHRWYWxbdGhpcy5wcm9wcy5vYmplY3RWYWx1ZSBhcyBhbnldfTwvb3B0aW9uPlxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLm1hcCgob3B0VmFsOiBzdHJpbmcsIGk6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiA8b3B0aW9uIHZhbHVlPXtvcHRWYWx9IGtleT17aX0+e29wdFZhbH08L29wdGlvbj5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RmllbGQoKSB7XG4gICAgICAgIGNvbnN0IHtvcHRpb25zID0gW10sIHNpemUgPSBcImRlZmF1bHRcIn0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCBzZWxlY3REYXRhID0gdGhpcy5fZ2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHNlbGVjdFxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+ICh0aGlzLmNvbnRleHQgYXMgYW55KS51cGRhdGVQYXJlbnRTdGF0ZShlLCB0aGlzLnByb3BzLm5hbWUpfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPXt0aGlzLnByb3BzLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17QWJzdHJhY3RGaWVsZC5tZXJnZURlZmF1bHRDc3NXaXRoUHJvcHModGhpcy5nZXRTZWxlY3RDc3NOYW1lKCh0aGlzLnByb3BzIGFzIGFueSkuc2l6ZSksIHRoaXMucHJvcHMuY2xhc3NOYW1lLCAodGhpcy5jb250ZXh0IGFzIGFueSkuYmFyZSl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7c2VsZWN0RGF0YSA/IHNlbGVjdERhdGE6IG51bGx9XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRTZWxlY3RDc3NOYW1lKG5hbWU6IFR5cGVTZWxlY3RDc3NTaXplTmFtZSkge1xuICAgICAgICBpZihuYW1lID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC0ke25hbWV9YDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBSZWFjdCwgUmVhY3RFbGVtZW50fSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7X2dlbmVyaWNGb3JtR3JvdXAsIEFic3RyYWN0RmllbGQsIElBYnN0cmFjdEZpZWxkfSBmcm9tIFwiLi9fQWJzdHJhY3RGaWVsZFwiO1xuaW1wb3J0IHtGSUVMRF9OQU1FUywgSUZpZWxkLCBJVGV4dEFyZWFGaWVsZH0gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5pbXBvcnQge0lGb3JtQ29udGV4dH0gZnJvbSBcIi4uL2Zvcm1cIjtcbmltcG9ydCB7bWVyZ2VEZWZhdWx0Q3NzV2l0aFByb3BzfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgVGV4dEFyZWFGaWVsZDxUIGV4dGVuZHMgSVRleHRBcmVhRmllbGQ+IGV4dGVuZHMgQWJzdHJhY3RGaWVsZDxUPiBpbXBsZW1lbnRzIElBYnN0cmFjdEZpZWxkPFQ+IHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBGSUVMRF9OQU1FUywgcHJvcHM6IFQgJiBJVGV4dEFyZWFGaWVsZCkge1xuICAgICAgICBzdXBlcihwcm9wcywgdHlwZSk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGaWVsZCh0aGlzLmdldEZpZWxkKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtR3JvdXAoY2hpbGRyZW46IGFueSk6IFJlYWN0RWxlbWVudCB7XG4gICAgICAgIHJldHVybiBfZ2VuZXJpY0Zvcm1Hcm91cDxUPih0aGlzLnByb3BzLCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZpZWxkKCkge1xuICAgICAgICBjb25zdCB7cm93cyA9IDV9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17bWVyZ2VEZWZhdWx0Q3NzV2l0aFByb3BzKFwiZm9ybS1jb250cm9sXCIsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCAodGhpcy5jb250ZXh0IGFzIGFueSkuYmFyZSl9XG4gICAgICAgICAgICAgICAgICAgIHJvd3M9e3Jvd3N9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLmdldFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleSgpW3RoaXMucHJvcHMubmFtZV0gfHwgXCJcIn1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiAodGhpcy5jb250ZXh0IGFzIGFueSkudXBkYXRlUGFyZW50U3RhdGUoZSwgdGhpcy5wcm9wcy5uYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7TUVUQURBVEFfTkFNRVMsIFR5cGVGaWVsZFZhbHVlVHlwZXN9IGZyb20gXCIuLi9mb3JtXCI7XG5pbXBvcnQge0ZJRUxEX05BTUVTfSBmcm9tIFwiLi4vZWxlbWVudHNcIjtcblxuXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZURlZmF1bHRDc3NXaXRoUHJvcHMoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGNzc1Byb3BzOiBhbnksIGJhcmU6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIGxldCBjc3NTdHIgPSBcIlwiO1xuICAgIGlmKCFiYXJlKSB7XG4gICAgICAgIGNzc1N0ciArPSBgJHtkZWZhdWx0VmFsdWV9IGA7XG4gICAgfVxuICAgIGlmIChjc3NQcm9wcykge1xuICAgICAgICBjc3NTdHIgKz0gYCR7Y3NzUHJvcHN9YDtcbiAgICB9XG4gICAgcmV0dXJuIGNzc1N0cjtcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1ldGFkYXRhTmFtZVR5cGUodHlwZTogRklFTERfTkFNRVMpOiBNRVRBREFUQV9OQU1FUyB7XG4gICAgc3dpdGNoKHR5cGUpIHtcbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5URVhUOiB7XG4gICAgICAgICAgICByZXR1cm4gTUVUQURBVEFfTkFNRVMuSU5QVVRTO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuRU1BSUw6IHtcbiAgICAgICAgICAgIHJldHVybiBNRVRBREFUQV9OQU1FUy5JTlBVVFM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5QQVNTV09SRDoge1xuICAgICAgICAgICAgcmV0dXJuIE1FVEFEQVRBX05BTUVTLklOUFVUUztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEZJRUxEX05BTUVTLlRFWFRBUkVBOiB7XG4gICAgICAgICAgICByZXR1cm4gTUVUQURBVEFfTkFNRVMuSU5QVVRTO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuUkFESU86IHtcbiAgICAgICAgICAgIHJldHVybiBNRVRBREFUQV9OQU1FUy5SQURJT19HUk9VUFM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5DSEVDS0JPWDoge1xuICAgICAgICAgICAgcmV0dXJuIE1FVEFEQVRBX05BTUVTLkNIRUNLQk9YRVM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5TRUxFQ1Q6IHtcbiAgICAgICAgICAgIHJldHVybiBNRVRBREFUQV9OQU1FUy5JTlBVVFM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5GSUxFOiB7XG4gICAgICAgICAgICByZXR1cm4gTUVUQURBVEFfTkFNRVMuRklMRVM7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgcmV0dXJuIE1FVEFEQVRBX05BTUVTLklOUFVUUztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpZWxkVmFsdWVUeXBlKHR5cGU6IEZJRUxEX05BTUVTKTogVHlwZUZpZWxkVmFsdWVUeXBlcyB7XG4gICAgc3dpdGNoKHR5cGUpIHtcbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5URVhUOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJ2YWx1ZVwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuRU1BSUw6IHtcbiAgICAgICAgICAgIHJldHVybiBcInZhbHVlXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5QQVNTV09SRDoge1xuICAgICAgICAgICAgcmV0dXJuIFwidmFsdWVcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEZJRUxEX05BTUVTLlRFWFRBUkVBOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJ2YWx1ZVwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuQ0hFQ0tCT1g6IHtcbiAgICAgICAgICAgIHJldHVybiBcImNoZWNrZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEZJRUxEX05BTUVTLlNFTEVDVDoge1xuICAgICAgICAgICAgcmV0dXJuIFwidmFsdWVcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEZJRUxEX05BTUVTLkZJTEU6IHtcbiAgICAgICAgICAgIHJldHVybiBcImZpbGVcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEZJRUxEX05BTUVTLlJBRElPOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJjaGVja2VkXCJcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICByZXR1cm4gXCJ2YWx1ZVwiO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gRXhwb3J0IFJlZ2V4IGV4cHJlc3Npb25zIGhlcmVcblxuXG5leHBvcnQgY29uc3QgRU1BSUxfUkVHRVggPSAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBSZWFjdCwgdXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge3VwZGF0ZVJhZGlvR3JvdXBTdGF0ZUZyb21QYXNzZWRJbkNvbnRleHQsIHVwZGF0ZVBhcmVudFN0YXRlLCBfRmllbGRFbXB0eUVycm9yTXNnfSBmcm9tIFwiLi9jb3JlXCI7XG5pbXBvcnQge0lWYWxpZGF0aW9ufSBmcm9tIFwiLi92YWxpZGF0b3JzXCI7XG5pbXBvcnQge1xuICAgIEFic3RyYWN0TWV0YWRhdGEsXG4gICAgTWV0YWRhdGEsXG4gICAgTWV0YWRhdGFGaWxlLFxuICAgIE1ldGFkYXRhR3JvdXAsXG59IGZyb20gXCIuL2ZpZWxkX2NsYXNzZXNcIjtcbmltcG9ydCB7IF9ub0NvbnRleHRFcnJvciB9IGZyb20gXCIuL2NvcmUvX2Vycm9yc1wiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSBUeXBlRmllbGRWYWx1ZVR5cGVzID0gXCJ2YWx1ZVwifFwiY2hlY2tlZFwifFwiZmlsZVwiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGludGVyZmFjZSBJRmllbGRWYWx1ZXMge1xuICAgIGN1cnJlbnRWYWx1ZTogYW55O1xuICAgIHJlYWRvbmx5IHR5cGU6IFR5cGVGaWVsZFZhbHVlVHlwZXM7XG59XG4vKiogQGludGVybmFsICovXG5leHBvcnQgaW50ZXJmYWNlIElGaWVsZFZhbGlkYXRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICB2YWxpZGF0aW9uOiBBcnJheTxJVmFsaWRhdGlvbj47XG4gICAgZmllbGRWYWx1ZXM6IElGaWVsZFZhbHVlcztcbiAgICBpc1RvdWNoZWQ6IGJvb2xlYW47XG59XG4vKiogQGludGVybmFsICovXG5leHBvcnQgaW50ZXJmYWNlIElJbnB1dEZpZWxkTWV0YWRhdGEgZXh0ZW5kcyBJRmllbGRWYWxpZGF0aW9uIHt9XG4vKiogQGludGVybmFsICovXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlTWV0YURhdGEgZXh0ZW5kcyBJRmllbGRWYWxpZGF0aW9uIHtcbiAgICByZWFkb25seSByZWZOYW1lOiBzdHJpbmc7XG59XG4vKiogQGludGVybmFsICovXG5leHBvcnQgaW50ZXJmYWNlIElSYWRpb0dyb3VwQ2hpbGRyZW4gZXh0ZW5kcyBJRmllbGRWYWxpZGF0aW9uIHt9XG4vKiogQGludGVybmFsICovXG5leHBvcnQgaW50ZXJmYWNlIElDaGVja0JveGVzTWV0YWRhdGEgZXh0ZW5kcyBJRmllbGRWYWxpZGF0aW9uIHt9XG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSBUeXBlSW5wdXRNZXRhZGF0YSA9IEFic3RyYWN0TWV0YWRhdGE8SUlucHV0RmllbGRNZXRhZGF0YT47XG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSBUeXBlRmlsZU1ldGFkYXRhID0gQWJzdHJhY3RNZXRhZGF0YTxJRmlsZU1ldGFEYXRhPjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB0eXBlIFR5cGVSYWRpb0dyb3VwTWV0YWRhdGEgPSBBYnN0cmFjdE1ldGFkYXRhPElSYWRpb0dyb3VwQ2hpbGRyZW4+O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHR5cGUgVHlwZUNoZWNrYm94ZXNNZXRhZGF0YSA9IEFic3RyYWN0TWV0YWRhdGE8SUNoZWNrQm94ZXNNZXRhZGF0YT47XG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSBUeXBlRm9ybU1ldGFkYXRhID1cbiAgICB8IFR5cGVJbnB1dE1ldGFkYXRhXG4gICAgfCBUeXBlUmFkaW9Hcm91cE1ldGFkYXRhXG4gICAgfCBUeXBlQ2hlY2tib3hlc01ldGFkYXRhXG4gICAgfCBUeXBlRmlsZU1ldGFkYXRhO1xuXG5leHBvcnQgaW50ZXJmYWNlIElNZXRhZGF0YSB7XG4gICAgcmFkaW9Hcm91cHM6IFR5cGVSYWRpb0dyb3VwTWV0YWRhdGE7XG4gICAgaW5wdXRzOiBUeXBlSW5wdXRNZXRhZGF0YTtcbiAgICBmaWxlczogVHlwZUlucHV0TWV0YWRhdGE7XG4gICAgY2hlY2tib3hlczogVHlwZUNoZWNrYm94ZXNNZXRhZGF0YTtcblxufVxuLyoqIEBpbnRlcm5hbCAqKi9cbmV4cG9ydCBlbnVtIE1FVEFEQVRBX05BTUVTIHtcbiAgICBJTlBVVFMgPSBcImlucHV0c1wiLFxuICAgIFJBRElPX0dST1VQUyA9IFwicmFkaW9Hcm91cHNcIixcbiAgICBGSUxFUyA9IFwiZmlsZXNcIixcbiAgICBDSEVDS0JPWEVTID0gXCJjaGVja2JveGVzXCIsXG59XG4vKipcbiAqIEBpbnRlcmZhY2UgKipJRm9ybSoqIEV4cG9ydGVkIEZvcm0gaW50ZXJmYWNlIGF2YWlsYWJsZSB0byB0aGUgY2FsbGVyLiBDb250YWlucyBhbGwgdGhlIHByb3BlcnRpZXMgcmVxdWlyZWQgYnlcbiAqIHRoZSBGb3JtICpSQkYqIEZvcm0ncyBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZvcm0gZXh0ZW5kcyBSZWFjdC5Gb3JtSFRNTEF0dHJpYnV0ZXM8SFRNTEZvcm1FbGVtZW50PiB7XG4gICAgLyoqIFRoZSBwYXNzZWQgaW4gc3RhdGUgZnJvbSB0aGUgcGFyZW50TmFtZSBjb21wb25lbnQgKi9cbiAgICBzdGF0ZTogYW55O1xuICAgIC8qKiBJZiB0aGUgcGFyZW50TmFtZSBjb21wb25lbnQgaXMgYSBjbGFzcyBjb21wb25lbnQgdGhlbiB0aGUgY29udGV4dCBtdXN0IGNvbnRhaW4gdGhlIHBhcmVudE5hbWUncyAqKnRoaXMqKiBrZXl3b3JkLiAqL1xuICAgIGNvbnRleHQ/OiBhbnk7XG4gICAgLyoqIElmIHRoZSBmb3JtJ3Mgc3RhdGUgaXMgbm90IGRpcmVjdGx5IGNvbnRhaW5lZCBhdCBwYXJlbnROYW1lJ3Mgc3RhdGUgcm9vdCBvYmplY3QsIHRoZW4gZm9ybUtleSBuZWVkcyB0byByZXByZXNlbnQgdGhlIGtleS4gKi9cbiAgICByZWFkb25seSBmb3JtS2V5Pzogc3RyaW5nO1xuICAgIC8qKiBEZWZhdWx0IGlzIGZhbHNlLiBJZiBzZXQgdG8gdHJ1ZSB0aGVuIHRoZSBmb3JtIHN0YXRlIHdpbGwgYmUgZGlzcGxheWVkIGp1c3QgYmVsb3cgdGhlIGZvcm0gY29tcG9uZW50IGluIGBjb2RlYCB0YWdzLiAqL1xuICAgIHJlYWRvbmx5IGRlYnVnPzogYm9vbGVhbjtcbiAgICAvKiogRGVmYXVsdCBpcyBUcnVlLiBJZiBzZXQgdG8gZmFsc2UsIHRoZSAgdmFsaWRhdG9ycyB3aWxsIG5vdCBiZSBjYWxsZWQgdW50aWwgdGhlIGZvcm0gaXMgc3VibWl0dGVkLiAqL1xuICAgIHJlYWRvbmx5IGR5bmFtaWM/OiBib29sZWFuO1xuICAgIC8qKiBUaGUgcGFzc2VkIHRocm91Z2ggcHJvcHMgdG8gdGhlIEZvcm0gY29tcG9uZW50ICovXG4gICAgY2hpbGRyZW4/OiBhbnk7XG4gICAgLyoqIERlZmF1bHQgc2V0IHRvIGZhbHNlLiBJZiBzZXQgdG8gdHJ1ZSB0aGVuIGl0IHdpbGwgbm93IHVzZSBib290c3RyYXAgc3R5bGluZyBvciBhbnkgZXh0cmEgZWxlbWVudHMuICovXG4gICAgcmVhZG9ubHkgYmFyZT86IGJvb2xlYW47XG4gICAgLyoqIENhbGxiYWNrIGZ1bmN0aW9uIHdpbCBiZSBjYWxsZWQgb24gZm9ybSBzdWJtaXNzaW9uIGlmIGFsbCB2YWxpZGF0b3JzIHBhc3MgKi9cbiAgICByZWFkb25seSBjYWxsYmFjaz86IEZ1bmN0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGb3JtQ29udGV4dCB7XG4gICAgcmVhZG9ubHkgYmFyZT86IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZGVidWc/OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGR5bmFtaWM/OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGZvcm1LZXk/OiBzdHJpbmc7XG4gICAgbWV0YWRhdGE6IElNZXRhZGF0YTtcbiAgICBzdGF0ZTogYW55O1xuICAgIHVwZGF0ZVBhcmVudFN0YXRlPzogKGU6IFJlYWN0LkNoYW5nZUV2ZW50PGFueT4sIG5hbWU6IHN0cmluZywgZm9ybUtleT86IHN0cmluZykgPT4gdm9pZDtcbiAgICB1cGRhdGVSYWRpb0dyb3VwU3RhdGVGcm9tUGFzc2VkSW5Db250ZXh0PzogKGU6IFJlYWN0LkNoYW5nZUV2ZW50PGFueT4sIG5hbWU6IHN0cmluZywgcmFkaW9Hcm91cDogYW55LCBmb3JtS2V5Pzogc3RyaW5nKSA9PiB2b2lkO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgSU5QVVRTX1NUQVRFOiBUeXBlSW5wdXRNZXRhZGF0YSA9IHt9IGFzIGFueTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IFJBRElPX0dST1VQU19TVEFURTogVHlwZVJhZGlvR3JvdXBNZXRhZGF0YSA9IHt9IGFzIGFueTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IEZJTEVTX1NUQVRFOiBUeXBlRmlsZU1ldGFkYXRhID0ge30gYXMgYW55O1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgQ0hFQ0tCT1hFU19TVEFURTogVHlwZUNoZWNrYm94ZXNNZXRhZGF0YSA9IHt9IGFzIGFueTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IHByb3ZpZGVyQ29udGV4dDogSUZvcm1Db250ZXh0ID0ge1xuICAgIGJhcmU6IGZhbHNlLFxuICAgIHN0YXRlOiB7fSxcbiAgICBmb3JtS2V5OiBudWxsIGFzIGFueSxcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgZHluYW1pYzogdHJ1ZSxcbiAgICBtZXRhZGF0YToge1xuICAgICAgICBpbnB1dHM6IG51bGwgYXMgYW55LFxuICAgICAgICByYWRpb0dyb3VwczogbnVsbCBhcyBhbnksXG4gICAgICAgIGZpbGVzOiBudWxsIGFzIGFueSxcbiAgICAgICAgY2hlY2tib3hlczogbnVsbCBhcyBhbnksXG4gICAgfSxcbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgaW50ZXJmYWNlIElSYWRpb0dyb3VwUGFyZW50Q29udGV4dCB7XG4gICAgcGFyZW50PzogeyBuYW1lOiBzdHJpbmcgfTtcbiAgICBjaGlsZHJlbj86IGFueTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBSYWRpb0dyb3VwQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8VHlwZVJhZGlvR3JvdXBNZXRhZGF0YT4oUkFESU9fR1JPVVBTX1NUQVRFKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBGb3JtQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8SUZvcm1Db250ZXh0Pihwcm92aWRlckNvbnRleHQpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEZvcm1Qcm92aWRlciA9IEZvcm1Db250ZXh0LlByb3ZpZGVyO1xuLyoqXG4gKiBAdmFyIEFjY2VzcyB0aGUgZm9ybSBzdGF0ZSB3aXRoaW4gYSBSZWFjdCBDb250ZXh0IEFwaSBDb25zdW1lciBzY29wZVxuICogQGV4YW1wbGUgRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqIDxGb3JtIHN0YXRlPXt0aGlzLnN0YXRlfSBjb250ZXh0PXt0aGlzfT5cbiAqICAgICAgPEZvcm1Db25zdW1lcj5cbiAqICAgICAgeyh7c3RhdGV9KSA9PiB7XG4gKiAgICAgICAgICByZXR1cm4gPGRpdj57c3RhdGV9IGlzIGVxdWFsIHtteVN0YXRlfTwvZGl2PjtcbiAqICAgICAgfX1cbiAqICAgIDwvRm9ybUNvbnN1bWVyPlxuICogPC9Gb3JtPlxuICogYGBgXG4gKiAqL1xuZXhwb3J0IGNvbnN0IEZvcm1Db25zdW1lciA9IEZvcm1Db250ZXh0LkNvbnN1bWVyO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaGFuZGxlU3VibWl0ID0gKHByb3BzOiBJRm9ybSkgPT5cbiAgICAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PikgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHsgY2FsbGJhY2ssIH0gPSBwcm9wcztcbiAgICAgICAgaWYodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIgJiYgY2FsbGJhY2soKSkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRPRE8gdGhyb3cgZXJyb3JcbiAgICAgICAgfVxuICAgIH07XG5cbi8qKlxuICogVGhlIG1haW4gRm9ybSBjb21wb25lbnQgdGhhdCBpcyByZXF1aXJlZCB0byB3cmFwIGFsbCAqUkJGKiBjb21wb25lbnRzLlxuICogSWYgdGhlIGNvbXBvbmVudCB0aGF0IHVzZXMgdGhlIEZvcm0gY29tcG9uZW50IGlzIGEgZnVuY3Rpb25hbCBjb21wb25lbnQgdGhlblxuICogb25seSB0aGUgc3RhdGUgcHJvcHMgJiBzdGF0ZSB1cGRhdGUgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB0aGUgdXNlU3RhdGUgaG9vayBhcmVcbiAqIHJlcXVpcmVkLiBJZiB5b3UgYXJlIGNhbGxpbmcgRm9ybSBjb21wb25lbnQgZnJvbSBhIGNsYXNzIGNvbXBvbmVudCB0aGVuIHlvdSBtdXN0IFxuICogcGFzcyB5b3VyIGxvY2FsIGNvbnRleHQgb3IgYHRoaXNgIGtleXdvcmQgdG9cbiAqIHRoZSBgY29udGV4dGAgcHJvcC5cbiAqIEBwYXJhbSBwcm9wcyB7QGxpbmsgSUZvcm19XG4gKlxuICogQW4gZXhhbXBsZSB1c2luZyAqUkJGKiBGb3JtIGNvbXBvbmVudCBpbiBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiAvLyBNaW5pbWFsIHNldHVwIGZvciBhIFJCRidzIEZvcm0gY29tcG9uZW50XG4gKlxuICogIGNvbnN0IG15U3RhdGUgPSB7XG4gKiAgICAgIHVzZXJuYW1lOiAnJyxcbiAqICB9XG4gKiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZShzdGF0ZSk7XG4gKiAgPEZvcm0gc3RhdGU9e215U3RhdGV9IGNvbnRleHQ9e3NldFN0YXRlfT48L0Zvcm0+XG4gKiBgYGBcbiAqXG4gKiBUbyB1c2UgKlJCRiogRm9ybSBjb21wb25lbnQgZnJvbSBhIGNsYXNzIGNvbXBvbmVudCB5b3UgbXVzdCBwYXNzIGluIHlvdXJcbiAqIGxvY2FsIHN0YXRlIG9mIGB0aGlzYCBrZXl3b3JkLlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogLy8gTWluaW1hbCBzZXR1cCBmb3IgYSBSQkYncyBGb3JtIGNvbXBvbmVudCBmb3IgYSBjbGFzcyBjb21wb25lbnRcbiAqXG4gKiAgdGhpcy5zdGF0ZSA9IHsgLy8gaW4gdGhlIGNvbnN0cnVjdG9yXG4gKiAgICAgIHVzZXJuYW1lOiAnJyxcbiAqICB9XG4gKlxuICogIDxGb3JtIHN0YXRlPXt0aGlzLnN0YXRlfSBjb250ZXh0PXt0aGlzfT48L0Zvcm0+XG4gKiBgYGBcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgY29uc3QgRm9ybSA9IChwcm9wczogSUZvcm0pID0+IHtcbiAgICBjb25zdCBbcGFyZW50U3RhdGUsIHNldFBhcmVudFN0YXRlXSA9IHVzZVN0YXRlKHByb3BzLnN0YXRlKTtcbiAgICBjb25zdCBbY29udGV4dCwgX10gPSB1c2VTdGF0ZShwcm92aWRlckNvbnRleHQpO1xuICAgIGNvbnN0IFtpbnB1dFN0YXRlLCB1cGRhdGVJbnB1dFN0YXRlXSA9IHVzZVN0YXRlKElOUFVUU19TVEFURSk7XG4gICAgY29uc3QgW2NoZWNrYm94ZXNTdGF0ZSwgdXBkYXRlQ2hlY2tib3hlc1N0YXRlXSA9IHVzZVN0YXRlKENIRUNLQk9YRVNfU1RBVEUpO1xuICAgIGNvbnN0IFtmaWxlU3RhdGUsIHVwZGF0ZUZpbGVTdGF0ZV0gPSB1c2VTdGF0ZShGSUxFU19TVEFURSk7XG4gICAgY29uc3QgW3JhZGlvU3RhdGUsIHVwZGF0ZVJhZGlvU3RhdGVdID0gdXNlU3RhdGUoUkFESU9fR1JPVVBTX1NUQVRFKTtcbiAgICAvLyBJZiB0aGUgcGFyZW50TmFtZSBjb21wb25lbnQgaXMgYSBjbGFzcyBjb21wb25lbnQsIHRoZW4gdGhlIHN0YXRlIG5lZWRzIHRvIGJlIHVwZGF0ZWQgZnJvbSB0aGUgcGFyZW50TmFtZSBjb250ZXh0XG4gICAgLy8gRnVuY3Rpb25zIGNvbXBvbmVudCBtdXN0IHVzZSB1c2VTdGF0ZSBob29rLiBTZWUgaHR0cHM6Ly9qb2VnYXNld2ljei5naXRodWIuaW8vcmVhY3QtYmFyZS1mb3Jtcy9tb2R1bGVzL19mb3JtXy5odG1sXG4gICAgaWYocHJvcHMuY29udGV4dCAmJiBcInNldFN0YXRlXCIgaW4gcHJvcHMuY29udGV4dCkge1xuICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgcHJvcHMuY29udGV4dC5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgLi4ucGFyZW50U3RhdGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgW3BhcmVudFN0YXRlXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5jb250ZXh0KSB7XG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBwcm9wcy5jb250ZXh0KHtcbiAgICAgICAgICAgICAgICAuLi5wYXJlbnRTdGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBbcGFyZW50U3RhdGVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgX0ZpZWxkRW1wdHlFcnJvck1zZyhfbm9Db250ZXh0RXJyb3IpO1xuICAgIH1cbiAgICAvLyBTdGF0ZSBIb29rc1xuICAgIGNvbnN0IF9wcm92aWRlckNvbnRleHQ6IElGb3JtQ29udGV4dCA9IHtcbiAgICAgICAgYmFyZTogcHJvcHMuYmFyZSB8fCBjb250ZXh0LmJhcmUsXG4gICAgICAgIHN0YXRlOiBwcm9wcy5zdGF0ZSxcbiAgICAgICAgZm9ybUtleTogcHJvcHMuZm9ybUtleSxcbiAgICAgICAgZGVidWc6IHByb3BzLmRlYnVnIHx8IGNvbnRleHQuZGVidWcsXG4gICAgICAgIGR5bmFtaWM6IHByb3BzLmR5bmFtaWMgfHwgY29udGV4dC5keW5hbWljLFxuICAgICAgICB1cGRhdGVQYXJlbnRTdGF0ZTogdXBkYXRlUGFyZW50U3RhdGUocGFyZW50U3RhdGUsIHNldFBhcmVudFN0YXRlLCBwcm9wcy5mb3JtS2V5KSxcbiAgICAgICAgdXBkYXRlUmFkaW9Hcm91cFN0YXRlRnJvbVBhc3NlZEluQ29udGV4dDogdXBkYXRlUmFkaW9Hcm91cFN0YXRlRnJvbVBhc3NlZEluQ29udGV4dChwYXJlbnRTdGF0ZSwgc2V0UGFyZW50U3RhdGUsIHByb3BzLmZvcm1LZXkpLFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgW01FVEFEQVRBX05BTUVTLklOUFVUU106IG5ldyBNZXRhZGF0YTxJSW5wdXRGaWVsZE1ldGFkYXRhPihcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXRlIGFzIHt9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUlucHV0U3RhdGUsXG4gICAgICAgICAgICAgICAgTUVUQURBVEFfTkFNRVMuSU5QVVRTLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFtNRVRBREFUQV9OQU1FUy5DSEVDS0JPWEVTXTogbmV3IE1ldGFkYXRhPElDaGVja0JveGVzTWV0YWRhdGE+KFxuICAgICAgICAgICAgICAgIGNoZWNrYm94ZXNTdGF0ZSBhcyB7fSxcbiAgICAgICAgICAgICAgICB1cGRhdGVDaGVja2JveGVzU3RhdGUsXG4gICAgICAgICAgICAgICAgTUVUQURBVEFfTkFNRVMuQ0hFQ0tCT1hFUyxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBbTUVUQURBVEFfTkFNRVMuRklMRVNdOiBuZXcgTWV0YWRhdGFGaWxlPElGaWxlTWV0YURhdGE+KFxuICAgICAgICAgICAgICAgIGZpbGVTdGF0ZSBhcyB7fSxcbiAgICAgICAgICAgICAgICB1cGRhdGVGaWxlU3RhdGUsXG4gICAgICAgICAgICAgICAgTUVUQURBVEFfTkFNRVMuRklMRVMsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgW01FVEFEQVRBX05BTUVTLlJBRElPX0dST1VQU106IG5ldyBNZXRhZGF0YUdyb3VwPElSYWRpb0dyb3VwQ2hpbGRyZW4+KFxuICAgICAgICAgICAgICAgIHJhZGlvU3RhdGUgYXMgYW55LFxuICAgICAgICAgICAgICAgIHVwZGF0ZVJhZGlvU3RhdGUsXG4gICAgICAgICAgICAgICAgTUVUQURBVEFfTkFNRVMuUkFESU9fR1JPVVBTLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDxGb3JtUHJvdmlkZXIgdmFsdWU9e19wcm92aWRlckNvbnRleHR9PlxuICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdChwcm9wcyl9Pntwcm9wcy5jaGlsZHJlbn08L2Zvcm0+XG4gICAgICAgIDwvRm9ybVByb3ZpZGVyPlxuICAgICk7XG59O1xuIiwiaW1wb3J0IHtFTUFJTF9SRUdFWH0gZnJvbSBcIi4vY29yZVwiO1xuaW1wb3J0IHtJRm9ybUNvbnRleHR9IGZyb20gXCIuL2Zvcm1cIjtcbmltcG9ydCB7SUVtYWlsRmllbGQsIElGaWVsZCwgSVBhc3N3b3JkRmllbGQsIElUZXh0QXJlYUZpZWxkLCBJVGV4dElucHV0RmllbGR9IGZyb20gXCIuL2VsZW1lbnRzXCI7XG5cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGludGVyZmFjZSBJVmFsaWRhdGlvbiB7XG4gICAgaXNWYWxpZDogYm9vbGVhbjtcbiAgICBtZXNzYWdlczogWy4uLnN0cmluZ1tdXTtcbn1cbi8qKiBAaW50ZXJuYWwgVGhlIGlubmVyIHJldHVybmVkIGZ1bmN0aW9uIHR5cGUgdGhhdCBjdXN0b20gdmFsaWRhdG9ycyBtdXN0IGltcGxlbWVudCAqL1xuZXhwb3J0IHR5cGUgSVZhbGlkYXRpb25GdW5jdGlvbiA9ICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBJVmFsaWRhdGlvbjtcbi8qKiBAaW50ZXJuYWwgVGhlIGV4cGVjdGVkIHZhbGlkYXRvcidzIHR5cGUgdGhhdCB7QGxpbmsgSUZpZWxkfSBlbGVtZW50cyBjYW4gY29uc3VtZSAqL1xuZXhwb3J0IHR5cGUgSVZhbGlkYXRvcnMgPSBBcnJheTxJVmFsaWRhdGlvbkZ1bmN0aW9uPjtcbi8qKiBAaW50ZXJuYWwgVGhlIGN1c3RvbSB2YWxpZGF0b3IgdHlwZSBjYWxsYmFjayAqL1xuZXhwb3J0IHR5cGUgSUN1c3RvbVZhbGlkYXRvckNhbGxiYWNrID0gKGFyZzogYW55LCBmaWVsZFZhbHVlOiBhbnksIGNvbnRleHQ6IElGb3JtQ29udGV4dCkgPT4gQXJyYXk8c3RyaW5nPnx1bmRlZmluZWQ7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSBJVmFsaWRhdGlvblZhcmlhYmxlID0gKGFyZz86IGFueSkgPT4gSVZhbGlkYXRpb25GdW5jdGlvbjtcbi8qKlxuICogVGhlIGBwYXNzd29yZEtleWAgaXMgbm9ybWFsbHkgdGhlIGZpcnN0IHBhc3N3b3JkIGZvcm0gZmllbGQgdGhlIHVzZXIgZmlsbHMgaW4gYmVmb3JlXG4gKiB0aGVuIGNvbmZpcm1pbmcgdGhhdCB0aGUgcGFzc3dvcmQgaXMgY29ycmVjdCB3aXRoIGEgY29uZmlybSBwYXNzd29yZCBmaWVsZC4gdGhpcyB2YWxpZGF0b3JcbiAqIGNoZWNrIHRoYXQgYm90aCBwYXNzd29yZCBmaWVsZHMgYXJlIGVxdWFsIG9yIGVsc2Ugd2lsbCByZXR1cm4gYW4gZXJyb3IgbWVzc2FnZSBhbmQgc2V0IHRoaXNcbiAqIGZpZWxkIHRvIGludmFsaWQuYFxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogIDxQYXNzd29yZEZpZWxkXG4gKiAgICAgIC8vIG90aGVyIHByb3BzLi4uXG4gKiAgICAgIG5hbWU9XCJteVBhc3N3b3JkXCJcbiAqICAvPlxuICpcbiAqICA8Q29uZmlybVBhc3N3b3JkRmllbGRcbiAqICAgICAgICAvLyBvdGhlciBwcm9wcy4uLlxuICogICAgICAgIHZhbGlkYXRvcnM9e1thcmVGaWVsZHNFcXVhbChcIm15UGFzc3dvcmRcIildfVxuICogICAvPlxuICogICAvLyBtZXNzYWdlOiBGaWVsZHMgZG8gbm90IG1hdGNoXG4gKiBgYGBcbiAqIEBwYXJhbSBgcGFzc3dvcmRLZXlgIFRoZSBuYW1lIG9mIHRoZSBwYXNzd29yZCBmb3JtIGVsZW1lbnQgeW91IHdhdGNoIHRvIG1hdGNoIGFnYWluc3RcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgYXJlRmllbGRzRXF1YWw6IElWYWxpZGF0aW9uVmFyaWFibGUgPSBjdXN0b21WYWxpZGF0b3IoKGZpZWxkS2V5LCBmaWVsZFZhbHVlLCBjb250ZXh0OiBJRm9ybUNvbnRleHQpID0+IHtcbiAgICBsZXQgdGVzdEZpZWxkOiBJRmllbGQ7XG4gICAgbGV0IG1lc3NhZ2UgPSBbYEZpZWxkcyBkbyBub3QgbWF0Y2hgXTtcbiAgICBsZXQgY29udGV4dFN0YXRlID0gZ2V0Rm9ybVN0YXRlRnJvbUNvbnRleHQoY29udGV4dCk7XG4gICAgaWYoZmllbGRLZXkgaW4gY29udGV4dFN0YXRlKSB7XG4gICAgICAgIHRlc3RGaWVsZCA9IGNvbnRleHRTdGF0ZVtmaWVsZEtleV07XG4gICAgICAgIGlmKCF0ZXN0RmllbGQgfHwgIWZpZWxkVmFsdWUgIHx8IGZpZWxkVmFsdWUgIT09IGNvbnRleHRTdGF0ZVtmaWVsZEtleV0pIHtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYFJlYWN0LUJhcmVGb3JtcyBFcnJvcjogTm8gRmllbGQgd2l0aCBuYW1lIG9mICR7ZmllbGRLZXl9IGV4aXN0cyB3aGVuIGNhbGxpbmcgJ2FyZUZpZWxkc0VxdWFsJyBgXG4gICAgICAgICAgICArIGB2YWxpZGF0b3IgZnVuY3Rpb24uXFxuIEZvciBtb3JlIGluZm8sIHZpc2l0OiBgXG4gICAgICAgICAgICArIGBodHRwczovL2pvZWdhc2V3aWN6LmdpdGh1Yi5pby9yZWFjdC1iYXJlLWZvcm1zL21vZHVsZXMvX3ZhbGlkYXRvcnNfLmh0bWwjYXJlZmllbGRzZXF1YWxgLFxuICAgICAgICApO1xuICAgIH1cbn0pO1xuXG5cbi8qKlxuICogVGhlIGBpc0ZpZWxkRW1wdHlgIHZhbGlkYXRvciBwZXJmb3JtcyBhIGNvbXBhcmlzb24gYWdhaW5zdCBgbWluTGVuZ3RoYCAmIHRoZSBmaWVsZCBlbGVtZW50XG4gKiB2YWx1ZS4gSWYgdGhleSBhcmUgZXF1YWwgb3IgdGhlIGBtaW5MZW5ndGhgIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZm9ybSBlbGVtZW50IHZhbHVlIHRoZW5cbiAqIHRoaXMgZWxlbWVudCBpcyBub3QgdmFsaWQgJiBhIG1lc3NhZ2UgaXMgZGlzcGxheWVkLlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7VGV4dElucHV0RmllbGQsIGlzRmllbGRFbXB0eX0gZnJvbSBcInJlYWN0LWJhc2UtZm9ybXNcIlxuICpcbiAqIGNvbnN0IHN0YXRlID0geyB1c2VybmFtZTogXCJcIiB9XG4gKiBgYGBcbiAqICA8VGV4dElucHV0RmllbGRcbiAqICAgICAgICB2YWx1ZT17c3RhdGUudXNlcm5hbWV9XG4gKiAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcbiAqICAgICAgICB2YWxpZGF0b3JzPXtbaXNGaWVsZEVtcHR5KDUpXX1cbiAqICAgLz5cbiAqICAgLy8gbWVzc2FnZTogTXVzdCBiZSBhdCBsZWFzdCA1IGNoYXJhY3RlcnNcbiAqIGBgYFxuICogQHBhcmFtIG1pbkxlbmd0aCBUaGUgbWluaW11bSBsZW5ndGggb2YgdGhlIGZvcm0gZmllbGQgdmFsdWVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgaXNGaWVsZEVtcHR5OiBJVmFsaWRhdGlvblZhcmlhYmxlID0gY3VzdG9tVmFsaWRhdG9yKChtaW5MZW5ndGgsIGZpZWxkVmFsdWUsIGNvbnRleHQ6IElGb3JtQ29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGlzVmFsaWQgPSAodHlwZW9mIGZpZWxkVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZmllbGRWYWx1ZS5sZW5ndGggPj0gbWluTGVuZ3RoKTtcbiAgICBpZighaXNWYWxpZCkge1xuICAgICAgICByZXR1cm4gW2BNdXN0IGJlIGF0IGxlYXN0ICR7bWluTGVuZ3RofSBjaGFyYWN0ZXJzYF07XG4gICAgfVxufSk7XG5cbi8qKlxuICogVGhpcyB2YWxpZGF0b3IgZG9lc24ndCByZXF1aXJlIGFueSBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIGluLlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7RW1haWxGaWVsZCwgaXNFbWFpbFZhbGlkfSBmcm9tIFwicmVhY3QtYmFzZS1mb3Jtc1wiXG4gKlxuICogY29uc3Qgc3RhdGUgPSB7IHRlcm1zOiBmYWxzZSB9XG4gKiBgYGBcbiAqICA8RW1haWxGaWVsZFxuICogICAgLy8gb3RoZXIgcHJvcHMuLi5cbiAqICAgIHZhbGlkYXRvcnM9e1tpc0VtYWlsVmFsaWQoKV19XG4gKiAgLz5cbiAqICAvLyBtZXNzYWdlOiBNdXN0IGJlIGEgdmFsaWQgZW1haWxcbiAqIGBgYFxuICpcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgaXNFbWFpbFZhbGlkOiBJVmFsaWRhdGlvblZhcmlhYmxlID0gY3VzdG9tVmFsaWRhdG9yKChfICwgZmllbGRWYWx1ZSwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGlzVmFsaWQgPSBFTUFJTF9SRUdFWC50ZXN0KFN0cmluZyhmaWVsZFZhbHVlKS50b0xvd2VyQ2FzZSgpKTtcbiAgICBpZighaXNWYWxpZCkge1xuICAgICAgICByZXR1cm4gW2BNdXN0IGJlIGEgdmFsaWQgZW1haWxgXTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBUaGlzIHZhbGlkYXRvciB3aWxsIGRpc3BsYXkgdGhlIHdhcm5pbmcgaWYgYSB1c2VyIGhhcyBzZWxlY3RlZCBhIGZpbGUgYnV0IHRoZW4gcmVzZWxlY3RlZFxuICogbm90aGluZyAoYnkgY2xpY2tpbmcgdGhlIGNhbmNlbCBidXR0b24gaW4gdGhlIGZpbGUgcG9wdXAgd2luZG93KS4gVGhpcyB2YWxpZGF0b3IgZG9lc24ndFxuICogcmVxdWlyZSBhbnkgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCBpbi5cbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGltcG9ydCB7Y3JlYXRlRmlsZVJlZiwgRmlsZUZpZWxkLCBpc0ZpbGV9IGZyb20gXCJyZWFjdC1iYXJlLWZvcm1zXCI7XG4gKlxuICogY29uc3QgbXlGaWxlUmVmID0gY3JlYXRlRmlsZVJlZigpO1xuICpcbiAqIDxGaWxlRmllbGRcbiAqICAgIHJlZj17bXlGaWxlUmVmfVxuICogICAgaGludD1cIk11c3QgYmUgYSBmaWxlXCJcbiAqICAgIGxhYmVsVGV4dD1cIlVwbG9hZCB5b3VyIGZpbGVcIlxuICogICAgbmFtZT1cIm15RmlsZVRlc3RcIlxuICogICAgdmFsaWRhdG9ycz17W2lzRmlsZSgpXX1cbiAqIC8+XG4gKiBgYGBcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGlzRmlsZTogSVZhbGlkYXRpb25WYXJpYWJsZSA9IGN1c3RvbVZhbGlkYXRvcigoXywgbmFtZSwgY29udGV4dCkgPT4ge1xuICAgIGlmKCFuYW1lKSB7XG4gICAgICAgIHJldHVybiBbYE11c3QgYmUgYSBmaWxlIHR5cGVgXTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBUbyB1c2UgdGhlIGBpc1JhZGlvQ2hlY2tlZGAsIHNlbGVjdCB0aGUgYFJhZGlvRmllbGRgIGNvbXBvbmVudCB5b3Ugd2lzaCB0aGUgdXNlciB0byBzZWxlY3RcbiAqICYgYWRkIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb24gdG8gdGhlIGB2YWxpZGF0b3JzYCBwcm9wLiBUaGlzIHdpbGwgbm93IGRpc3BsYXkgYSB3YXJuaW5nIGlmXG4gKiB0aGUgdXNlciBoYXMgZGVzZWxlY3RlZCB0aGUgcmVxdWlyZWQgb3B0aW9uLiBUaGlzIHZhbGlkYXRvciBkb2Vzbid0XG4gKiByZXF1aXJlIGFueSBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIGluLlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7UmFkaW9Hcm91cCwgUmFkaW9GaWVsZH0gZnJvbSBcInJlYWN0LWJhc2UtZm9ybXNcIlxuICpcbiAqIGNvbnN0IHN0YXRlID0geyBtYWxlOiB0cnVlLCBmZW1hbGU6IGZhbHNlIH1cbiAqXG4gKiA8UmFkaW9Hcm91cCBuYW1lPVwiZ3JvdXAxXCI+XG4gKiAgICAgPFJhZGlvRmllbGRcbiAqICAgICAgIG5hbWU9XCJtYWxlXCJcbiAqICAgICAgIGNoZWNrZWQ9e3N0YXRlLmZlbWFsZX1cbiAqICAgICAgIHZhbGlkYXRvcnM9e1tpc1JhZGlvQ2hlY2tlZCgpXX1cbiAqICAgIC8+XG4gKiAgICA8UmFkaW9GaWVsZFxuICogICAgICAgbmFtZT1cImZlbWFsZVwiXG4gKiAgICAgICBjaGVja2VkPXtzdGF0ZS5mZW1hbGV9XG4gKiAgICAvPlxuICogPC9SYWRpb0dyb3VwPlxuICpcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgaXNSYWRpb0NoZWNrZWQ6IElWYWxpZGF0aW9uVmFyaWFibGUgPSBjdXN0b21WYWxpZGF0b3IoKF8gLCB2YWx1ZSwgY29udGV4dCkgPT4ge1xuICAgIGlmKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gW2BUaGlzIG9wdGlvbiBtdXN0IGJlIHNlbGVjdGVkYF07XG4gICAgfVxufSk7XG5cbi8qKlxuICogVGhlIGBpc0NoZWNrZWRgIHZhbGlkYXRvciB3aWxsIGRpc3BsYXkgYSB3YXJuaW5nIGlmIHRoZSB1c2VyIGhhcyBzZWxlY3RlZCB0aGUgY2hlY2tib3ggJlxuICogdGhlbiBkZXNlbGVjdGVkIGl0LiBUaGlzIHJlcXVpcmVzIGEgKmJvb2xlYW4qIHR5cGUgdG8gYmUgc2V0IGluIHlvdXIgc3RhdGUsIHNlZSBiZWxvdy5cbiAqIFRoaXMgdmFsaWRhdG9yIGRvZXNuJ3QgcmVxdWlyZSBhbnkgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCBpbi5cbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQge0NoZWNrQm94RmllbGQsIGlzQ2hlY2tlZH0gZnJvbSBcInJlYWN0LWJhc2UtZm9ybXNcIlxuICpcbiAqIGNvbnN0IHN0YXRlID0geyB0ZXJtczogZmFsc2UgfVxuICpcbiAqIDxDaGVja0JveEZpZWxkXG4gKiAgICBuYW1lPVwidGVybXNcIlxuICogICAgY2hlY2tlZD17dGhpcy5zdGF0ZS50ZXJtc31cbiAqICAgIHZhbGlkYXRvcnM9e1tpc0NoZWNrZWQoKV19XG4gKiAvPlxuICpcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgaXNDaGVja2VkOiBJVmFsaWRhdGlvblZhcmlhYmxlID0gY3VzdG9tVmFsaWRhdG9yKChfLCBmaWVsZFZhbHVlLCBjb250ZXh0KSA9PiB7XG4gICAgaWYoZmllbGRWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIFtgTXVzdCBiZSBjaGVja2VkYF07XG4gICAgfVxufSk7XG5cbi8qKlxuICogRnVuY3Rpb24gdGhhdCB0YWtlcyBhIGNhbGxiYWNrIHdoaWNoIGNvbnRhaW5zIHRoZSBjYWxsZXJzIG93biB2YWxpZGF0aW9uIGxvZ2ljXG4gKiAmIHJldHVybnMgYW4gYXJyYXkgb2Ygc3RyaW5nKHMpIHdoaWNoIGFyZSB0aGUgdmFsaWRhdGlvbiBlcnJvciBtZXNzYWdlIG9yICp1bmRlZmluZWQqLiBCZWxvdyBpcyBhblxuICogZXhhbXBsZSBvZiBjcmVhdGluZyBhIGN1c3RvbSB2YWxpZGF0b3IgdG8gdGVzdCBpZiBhIGZpZWxkIGhhcyBhIHN0cmluZyBsZW5ndGggb2YgbnRoLlxuICpcbiAqIFRoZXJlIGFyZSAzIGFyZ3VtZW50cyBhdmFpbGFibGUgdG8geW91ciBjdXN0b20gdmFsaWRhdGlvbiBjYWxsYmFjazpcbiAqICAtICoqYXJnKiogVGhpcyBpcyB0aGUgeW91ciBvd24gdmFsdWUgdXNlZCB0byBpbiB0aGUgdmFsaWRhdGlvbiBjb21wYXJpc29uXG4gKiAgQGV4YW1wbGVcbiAqICBgYGBcbiAqICBjb25zdCBteUFyZyA9IDU7YFxuICpcbiAqICA8VGV4dElucHV0RmllbGRcbiAqICAgIC8vIG90aGVyIHByb3BzLi4uXG4gKiAgICB2YWxpZGF0b3JzPXtbbXlWYWxpZGF0b3IobXlBcmcpXX0gLy8gPC0gYG15QXJnYFxuICogIC8+XG4gKiBgYGBcbiAqICAtICoqZmllbGRWYWx1ZSoqIFRoaXMgaXMgdGhlIGN1cnJlbnQgZm9ybSBlbGVtZW50IHZhbHVlIGJlaW5nIHBhc3NlZCB0byB0aGUgdmFsaWRhdG9yXG4gKiAgLSAqKmNvbnRleHQqKiBUaGlzIGlzIHRoZSBjb250ZXh0IG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBzdGF0ZVxuICogRm9yIGV4YW1wbGU6XG4gKiBAZXhhbXBsZVxuICogYGBgYFxuICogY29uc3QgaXNGaWVsZEVtcHR5ID0gY3JlYXRlVmFsaWRhdG9yKChtaW5MZW5ndGgsIGZpZWxkVmFsdWUsIGNvbnRleHQpID0+IHtcbiAqICAgICBjb25zdCBpc1ZhbGlkID0gKGZpZWxkVmFsdWUubGVuZ3RoID49IG1pbkxlbmd0aCk7XG4gKiAgICAgaWYoIWlzVmFsaWQpIHtcbiAqICAgICAgICAgcmV0dXJuIFtgTXVzdCBiZSBhdCBsZWFzdCAke21pbkxlbmd0aH0gY2hhcmFjdGVyc2BdO1xuICogICAgIH1cbiAqIH0pO1xuICogYGBgYFxuICogWW91IG9ubHkgbmVlZCB0byByZXR1cm4gdHlwZSBhbiBhcnJheSBvZiBzdHJpbmcocykgKHdoaWNoIGlzIHlvdXIgdmFsaWRhdGlvbiBtZXNzYWdlKVxuICogaWYgdGhlIGBmaWVsZFZhbHVlYGlzICoqTk9UKiogdmFsaWRhdGVkLlxuICogQHBhcmFtIGNhbGxiYWNrXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbVZhbGlkYXRvcihjYWxsYmFjazogSUN1c3RvbVZhbGlkYXRvckNhbGxiYWNrKTogKGFyZzogYW55KSA9PiBJVmFsaWRhdGlvbkZ1bmN0aW9uICB7XG4gICAgcmV0dXJuIChhcmc6IGFueSA9IG51bGwpOiBJVmFsaWRhdGlvbkZ1bmN0aW9uID0+IHtcbiAgICAgICAgcmV0dXJuICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPIGN1c3RvbSBleGNlcHRpb25zIGZvciB0aGUgYmVsb3cgYXJnc1xuICAgICAgICAgICAgY29uc3QgZmllbGRWYWx1ZTogYW55ID0gYXJnc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQ6IElGb3JtQ29udGV4dCA9IGFyZ3NbMV07XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlcyA9IGNhbGxiYWNrKGFyZywgZmllbGRWYWx1ZSwgY29udGV4dCk7XG4gICAgICAgICAgICBsZXQgdmFsaWRhdGlvbkRhdGE7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlcykgJiYgbWVzc2FnZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbkRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsaWRhdGlvbkRhdGE7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBjb3JyZWN0IHN0YXRlIGZyb20gdGhlIGNvbnRleHQgb2JqZWN0IHdpdGhpbiBhIHZhbGlkYXRvcjpcbiAqICAtICoqYXJnKiogY29udGV4dCB7SUZvcm1Db250ZXh0fVxuICogIEBleGFtcGxlXG4gKiAgYGBgXG4gKiAgbGV0IGNvbnRleHRTdGF0ZSA9IGdldEZvcm1TdGF0ZUZyb21Db250ZXh0KGNvbnRleHQpO1xuICogYGBgXG4gKiBAcGFyYW0gY29udGV4dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtU3RhdGVGcm9tQ29udGV4dChjb250ZXh0OiBJRm9ybUNvbnRleHQpIHtcbiAgICBpZihjb250ZXh0LmZvcm1LZXkpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuc3RhdGVbY29udGV4dC5mb3JtS2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHQuc3RhdGU7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9