!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports["react-bare-lib"]=e(require("react")):t["react-bare-lib"]=e(t.react)}(window,(function(t){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(e,n){e.exports=t},function(t,e,n){"use strict";n.r(e),n.d(e,"createFileRef",(function(){return l})),n.d(e,"getFileFromRef",(function(){return h})),n.d(e,"areFieldsEqual",(function(){return Ct})),n.d(e,"customValidator",(function(){return It})),n.d(e,"isChecked",(function(){return kt})),n.d(e,"isEmailValid",(function(){return Nt})),n.d(e,"isFieldEmpty",(function(){return Tt})),n.d(e,"isFile",(function(){return At})),n.d(e,"isRadioChecked",(function(){return Rt})),n.d(e,"FormConsumer",(function(){return Ft})),n.d(e,"CheckBoxField",(function(){return ot})),n.d(e,"EmailField",(function(){return nt})),n.d(e,"FileField",(function(){return ct})),n.d(e,"Form",(function(){return wt})),n.d(e,"PasswordField",(function(){return rt})),n.d(e,"RadioField",(function(){return ut})),n.d(e,"RadioGroup",(function(){return it})),n.d(e,"SubmitButton",(function(){return pt})),n.d(e,"TextAreaField",(function(){return at})),n.d(e,"TextInputField",(function(){return et})),n.d(e,"SelectField",(function(){return st}));var r=n(0),o=n.n(r);function a(t){var e=t.results,n=t.styles;return o.a.createElement(o.a.Fragment,null,e.map((function(t){return t.messages.map((function(t,e){return o.a.createElement("div",{key:e,className:n},t)}))})))}var i,u=function(t){var e=Object(r.useContext)(jt).bare?t.className:"alert mt-2 alert-danger "+t.className;return t.isTouched?o.a.createElement(a,{results:t.results,styles:e||""}):null},s=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),c=function(t,e,n){return"React Bare Forms ERROR:\n\t"+t+" - "+e+"\n\t- "+n},p=(c("Function","isFieldEmpty()","Missing argument: minLength (number)"),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e}(Error)),f=c("Required Props","context","You must pass in a context prop. Class components use 'state' & functional components must use useState hook. See https://joegasewicz.github.io/react-bare-forms/modules/_form_.html");function l(){return o.a.createRef()}function h(t){return t&&t.current&&Object.keys(t.current.files).length?t.current.files[0]:null}function d(t){var e=h(t);return e?{name:e.name,lastModified:e.lastModified,lastModifiedDate:e.lastModifiedDate,size:e.size,type:e.type}:null}var m=function(){return(m=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function y(t,e,n){var r;return void 0===e&&(e=""),void 0===n&&(n={}),e?((r={})[e]=m(m({},t[e]),n),r):m(m({},t),n)}function v(t,e,n){return void 0===n&&(n=""),function(r,o){var a;e(m(m({},t),y(t,n,((a={})[o]=r.target.value,a))))}}function b(t,e,n){return void 0===n&&(n=""),function(r,o,a){var i,u;if(a){for(var s=m(m({},t),y(t,n,((i={})[o]=!0,i))),c=0,p=a.children;c<p.length;c++){var f=p[c];f.props.name!==o&&(s=m(m({},s),y(s,n,((u={})[f.props.name]=!1,u))))}e(s)}}}var O=function(){return(O=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},g=function(){function t(){this.GROUP_TYPES=["radioGroups"]}return t.prototype.isGroup=function(t){return this.GROUP_TYPES.includes(t)},t.prototype.create=function(){var t=this;return function(e){for(var n=Object(r.useContext)(jt),a=e.className,i=void 0===a?"btn btn-success btn-lg":a,u=(e.disabled,!1),s=(n.metadata.inputs.state,0),c=Object.keys(n.metadata);s<c.length;s++){var p=c[s],f=n.metadata[p].state;if(t.isGroup(n.metadata[p].metaType))for(var l=0,h=Object.keys(f);l<h.length;l++){E=h[l];for(var d=0,m=Object.keys(f[E]);d<m.length;d++)for(var y=m[d],v=0,b=f[E][y].validation;v<b.length;v++){b[v].isValid||(u=!0)}}else for(var g=0,_=Object.keys(f);g<_.length;g++)for(var E,P=0,j=f[E=_[g]].validation;P<j.length;P++){j[P].isValid||(u=!0)}}return o.a.createElement("button",O({},e,{disabled:u,className:i}),e.children)}},t}(),_=function(){return(_=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},E=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};function P(t,e){return o.a.createElement("div",{className:"form-group"},t.labeltext&&o.a.createElement("label",null,t.labeltext),e,t.hint&&o.a.createElement("small",{className:"form-text text-muted"},t.hint))}var j,S=function(){function t(t,e){this.type=e,this.props=t,this.init()}return Object.defineProperty(t.prototype,"parentName",{get:function(){return this._parentName},set:function(t){this._parentName=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bare",{get:function(){return Boolean(this._bare)},set:function(t){this._bare=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"metadata",{get:function(){return this._metadata},set:function(t){this._metadata=t},enumerable:!1,configurable:!0}),t.prototype.init=function(){this.context=Object(r.useContext)(jt),this.metadata=this.context.metadata[lt(this.type)],this.metadata.init(this.props.name,this.type),this.bare=Boolean(this.context.bare)},t.prototype.getProps=function(){return this.props},t.prototype.createField=function(t){var e=this.props.validators||this.parentName?o.a.createElement(u,{isTouched:this.metadata.isFieldTouched(),results:this.validate(),name:this.props.name,type:lt(this.type),parent:this.parent}):null;return this.bare?o.a.createElement(o.a.Fragment,null,t(this.metadata.state),e):o.a.createElement(o.a.Fragment,null,this.formGroup(t(this.metadata.state)),e)},t.prototype.doValidation=function(t){var e=[];if(this.props.validators)for(var n=0,r=this.props.validators;n<r.length;n++){var o=r[n];e=E(e,[o(t,this.context)])}return e},t.prototype.validate=function(){var t=this.getFieldValue(this.props),e=this.doValidation(t);return this.metadata.update(t,e),e},t.prototype.getFieldValue=function(t){var e=ht(this.type);return this.props[e]},t.mergeDefaultCssWithProps=function(t,e,n){var r="";return n||(r+=t+" "),e&&(r+=""+e),r},t.prototype.overrideEvent=function(t,e){return _(_({},t),{target:_(_({},t.target),{value:!e})})},t.prototype.getStatePositionFromFormKey=function(){var t,e;return(null===(t=this.context)||void 0===t?void 0:t.formKey)?this.context.state[this.context.formKey]:null===(e=this.context)||void 0===e?void 0:e.state},t}(),F=function(){function t(t,e,n){this.state=t,this.updateState=e,this.metaType=n}return Object.defineProperty(t.prototype,"name",{get:function(){return this._name},set:function(t){this._name=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fieldType",{get:function(){return this._fieldType},set:function(t){this._fieldType=t},enumerable:!1,configurable:!0}),t.prototype.isFieldTouched=function(){return!!this.state[this.name]&&this.state[this.name].isTouched},t}(),x=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),w=function(){return(w=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},C=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return x(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return o.a.createElement("div",{className:"form-group form-check"},t,this.props.labeltext&&o.a.createElement("label",{className:"form-check-label"},this.props.labeltext),this.props.hint&&o.a.createElement("small",{className:"form-text text-muted"},this.props.hint))},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",w({},t.props,{type:t.type,checked:t.getStatePositionFromFormKey()[t.props.name]||!1,onChange:function(e){return t.context.updateParentState(t.overrideEvent(e,t.getStatePositionFromFormKey()[t.props.name]),t.props.name)},name:t.props.name,className:S.mergeDefaultCssWithProps("form-check-input",t.props.className,t.context.bare)})))}},e}(S),T=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),N=function(){return(N=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},A=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r._updateFieldValidation=function(){r.file=d(r.props.ref),void 0!==r.file&&r.validate()},r.type=e,r.props=n,r}return T(e,t),Object.defineProperty(e.prototype,"file",{get:function(){return this._file},set:function(t){this._file=t},enumerable:!1,configurable:!0}),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return P(this.props,t)},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",N({},t.props,{ref:t.props.ref,type:t.type,onChange:t._updateFieldValidation.bind(t),className:S.mergeDefaultCssWithProps("form-control-file",t.props.className,t.context.bare)})))}},e.prototype.getFieldValue=function(t){return this.props.ref.current?d(this.props.ref):null},e}(S),R=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),k=function(){return(k=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},I=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.handleOnChange=function(t,e,n){n(r.props.name,t.target.selectionStart),r.context.updateParentState(t,r.props.name)},r.type=e,r.props=n,r}return R(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return P(this.props,t)},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(jt.Consumer,null,(function(e){var n=e.cursorPositions,r=e.updateCursorPositionState;return o.a.createElement("input",k({},t.props,{type:t.type,value:t.getStatePositionFromFormKey()[t.props.name]||"",onChange:function(e){return t.handleOnChange(e,n,r)},onKeyUp:function(e){t.type!==j.EMAIL&&(e.currentTarget.selectionStart=n[t.props.name].cursorPosition,e.currentTarget.selectionEnd=n[t.props.name].cursorPosition)},name:t.props.name,className:S.mergeDefaultCssWithProps("form-control",t.props.className,t.bare)}))}))}},e}(S),V=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),K=function(){return(K=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},G=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return V(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype.update=function(t,e){var n,o,a,i=this;this.name in this.state?this.state[this.name]&&t!==this.state[this.name].fieldValues.currentValue&&(a=K(K({},this.state),((o={})[this.name]={name:this.name,validation:e,fieldValues:{type:ht(this.fieldType),currentValue:t},isTouched:!0},o)),Object(r.useEffect)((function(){i.updateState(a)}),[a])):(a=K(K({},this.state),((n={})[this.name]={name:this.name,validation:e,isTouched:!1,fieldValues:{type:ht(this.fieldType),currentValue:t}},n)),Object(r.useEffect)((function(){i.updateState(a)}),[a]))},e}(F),D=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),L=function(){return(L=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},M=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return D(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype.update=function(t,e){var n,o,a,i=this;if(!(this.name in this.state))return a=L(L({},this.state),((n={})[this.name]={name:this.name,validation:e,isTouched:!1,fieldValues:{type:ht(this.fieldType),currentValue:{}}},n)),void Object(r.useEffect)((function(){i.updateState(a)}),[a]);if(this.state[this.name]){var u=this.state[this.name].fieldValues.currentValue;(null===t&&Object.keys(u).length||t&&t.name!==u.name)&&(a=L(L({},this.state),((o={})[this.name]={name:this.name,validation:e,fieldValues:{type:ht(this.fieldType),currentValue:t||{}},isTouched:!0},o)),this.updateState(a))}},e}(F),X=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),B=function(){return(B=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},U=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return X(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype._createGroupState=function(t,e,n){var r,o;return void 0===n&&(n=!0),B(B({},this.state),((r={})[t.parentName]=B(B({},this.state[t.parentName]),((o={})[this.name]={parent:t.parentName,name:this.name,validation:e||[],isTouched:n,fieldValues:{type:ht(this.fieldType),value:t.value}},o)),r))},e.prototype.update=function(t,e){var n=this,o={};this.state[t.parentName]?(this.state[t.parentName]&&!(this.name in this.state[t.parentName])||this.state[t.parentName][this.name]&&this.state[t.parentName][this.name].fieldValues.value!==t.value)&&(o=this._createGroupState(t,e),Object(r.useEffect)((function(){n.updateState(o)}))):(o=this._createGroupState(t,e,!1),Object(r.useEffect)((function(){n.updateState(o)})))},e.prototype.isFieldTouched=function(){if(this.state&&this.parentName&&this.name&&this.state[this.parentName]){var t=this.state[this.parentName][this.name];if(t)return t.isTouched}return!1},e}(F),W=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),z=function(){return(z=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},H=function(t){function e(e,n){var o=t.call(this,n,e)||this;return o.handleOnChange=function(t,e){var n=o.overrideEvent(t,t.target.value);o.context.updateRadioGroupStateFromPassedInContext(n,o.props.name,e)},o.props=n,o.type=e,o.radioContext=Object(r.useContext)(Pt),o.radioContext&&o.radioContext.parent&&(o.parentName=o.radioContext.parent.name,o.metadata.parentName=o.parentName),o}return W(e,t),Object.defineProperty(e.prototype,"parentName",{get:function(){return this.__parentName},set:function(t){this.__parentName=t},enumerable:!1,configurable:!0}),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return o.a.createElement("div",{className:"form-group form-check"},t,this.props.labeltext&&o.a.createElement("label",{className:"form-check-label"},this.props.labelText),this.props.hint&&o.a.createElement("small",{className:"form-text text-muted"},this.props.hint))},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement("input",z({},t.props,{type:t.type,checked:t.getStatePositionFromFormKey()[t.props.name]||!1,name:t.props.name,onChange:function(e){return t.handleOnChange(e,t.radioContext)},className:S.mergeDefaultCssWithProps("form-check-input",t.props.className,t.context.bare)}))}},e.prototype.getFieldValue=function(t){var e,n,r,o=null===(e=this.context)||void 0===e?void 0:e.formKey;return o?(null===(n=this.context)||void 0===n?void 0:n.state[o][this.props.name])||!1:(null===(r=this.context)||void 0===r?void 0:r.state[this.props.name])||!1},e.prototype.validate=function(){var t=this.getFieldValue(this.props),e=this.doValidation(t);return this.metadata.update({value:t,parentName:this.parentName,name:this.props.name},e),e},e}(S),q=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Y=function(){return(Y=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},Z=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return q(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return P(this.props,t)},e.prototype._getOptions=function(t){var e=this;return void 0===t&&(t=[]),this.props.objectkey&&this.props.objectvalue?t.map((function(t,n){return o.a.createElement("option",{value:t[e.props.objectkey],key:n},t[e.props.objectvalue])})):t.map((function(t,e){return o.a.createElement("option",{value:t,key:e},t)}))},e.prototype.getField=function(){var t=this,e=this.props,n=e.options,r=void 0===n?[]:n,a=(e.size,this._getOptions(r));return function(){return o.a.createElement("select",Y({},t.props,{onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name,className:S.mergeDefaultCssWithProps(t.getSelectCssName(t.props.size),t.props.className,t.context.bare)}),a||null)}},e.prototype.getSelectCssName=function(t){return"default"===t?"form-control":"form-control form-control-"+t},e}(S),$=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),J=function(){return(J=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},Q=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return $(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return P(this.props,t)},e.prototype.getField=function(){var t=this,e=this.props.rows,n=void 0===e?5:e;return function(){return o.a.createElement("textarea",J({},t.props,{className:ft("form-control",t.props.className,t.context.bare),rows:n,value:t.getStatePositionFromFormKey()[t.props.name]||"",onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name}))}},e}(S),tt=function(){return(tt=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(t){t.TEXT="text",t.EMAIL="email",t.PASSWORD="password",t.TEXTAREA="textArea",t.RADIO="radio",t.CHECKBOX="checkbox",t.SELECT="select",t.FILE="file"}(j||(j={}));var et=function(t){return new I(j.TEXT,t).create()},nt=function(t){return new I(j.EMAIL,t).create()},rt=function(t){return new I(j.PASSWORD,t).create()},ot=function(t){return new C(j.CHECKBOX,t).create()},at=function(t){return new Q(j.TEXTAREA,t).create()};function it(t){var e={parent:{name:t.name},children:t.children};return o.a.createElement(Pt.Provider,{value:e},t.children)}var ut=function(t){return new H(j.RADIO,t).create()},st=function(t){return new Z(j.SELECT,t).create()},ct=o.a.forwardRef((function(t,e){var n=tt(tt({},t),{ref:e});return new A(j.FILE,n).create()})),pt=(new g).create();function ft(t,e,n){var r="";return n||(r+=t+" "),e&&(r+=""+e),r}function lt(t){switch(t){case j.TEXT:case j.EMAIL:case j.PASSWORD:case j.TEXTAREA:return dt.INPUTS;case j.RADIO:return dt.RADIO_GROUPS;case j.CHECKBOX:return dt.CHECKBOXES;case j.SELECT:return dt.INPUTS;case j.FILE:return dt.FILES;default:return dt.INPUTS}}function ht(t){switch(t){case j.TEXT:case j.EMAIL:case j.PASSWORD:case j.TEXTAREA:return"value";case j.CHECKBOX:return"checked";case j.SELECT:return"value";case j.FILE:return"file";case j.RADIO:return"checked";default:return"value"}}var dt,mt=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,yt=function(){return(yt=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(t){t.INPUTS="inputs",t.RADIO_GROUPS="radioGroups",t.FILES="files",t.CHECKBOXES="checkboxes"}(dt||(dt={}));var vt={},bt={},Ot={},gt={},_t={},Et={bare:!1,state:{},formKey:null,debug:!1,dynamic:!0,cursorPositions:{},updateCursorPositionState:{},metadata:{inputs:null,radioGroups:null,files:null,checkboxes:null}},Pt=o.a.createContext(bt),jt=o.a.createContext(Et),St=jt.Provider,Ft=jt.Consumer,xt=function(t){return function(e){e.preventDefault();var n=t.callback;"function"==typeof n&&n()&&n()}},wt=function(t){var e,n=Object(r.useState)(t.state),a=n[0],i=n[1],u=Object(r.useState)(Et),s=u[0],c=(u[1],Object(r.useState)(vt)),l=c[0],h=c[1],d=Object(r.useState)(gt),y=d[0],O=d[1],g=Object(r.useState)(Ot),_=g[0],E=g[1],P=Object(r.useState)(bt),j=P[0],S=P[1],F=Object(r.useState)(_t),x=F[0],w=F[1];if(t.context&&"setState"in t.context)Object(r.useEffect)((function(){t.context.setState(yt({},a))}),[a]);else{if(!t.context)throw new p(f);Object(r.useEffect)((function(){t.context(yt({},a))}),[a])}var C,T,N={bare:t.bare||s.bare,state:t.state,formKey:t.formKey,cursorPositions:x,debug:t.debug||s.debug,dynamic:t.dynamic||s.dynamic,updateParentState:v(a,i,t.formKey),updateRadioGroupStateFromPassedInContext:b(a,i,t.formKey),updateCursorPositionState:(C=x,T=w,function(t,e){var n;if(!(t in C)||C[t].cursorPosition!==e){var r=m(m({},C),((n={})[t]={fieldName:t,cursorPosition:e},n));T(r)}}),metadata:(e={},e[dt.INPUTS]=new G(l,h,dt.INPUTS),e[dt.CHECKBOXES]=new G(y,O,dt.CHECKBOXES),e[dt.FILES]=new M(_,E,dt.FILES),e[dt.RADIO_GROUPS]=new U(j,S,dt.RADIO_GROUPS),e)};return o.a.createElement(St,{value:N},o.a.createElement("form",{onSubmit:xt(t)},t.children))},Ct=It((function(t,e,n){var r=function(t){if(t.formKey)return t.state[t.formKey];return t.state}(n);if(!(t in r))throw new Error("React-BareForms Error: No Field with name of "+t+" exists when calling 'areFieldsEqual' validator function.\n For more info, visit: https://joegasewicz.github.io/react-bare-forms/modules/_validators_.html#arefieldsequal");if(!r[t]||!e||e!==r[t])return["Fields do not match"]})),Tt=It((function(t,e,n){if(!(void 0!==e&&e.length>=t))return["Must be at least "+t+" characters"]})),Nt=It((function(t,e,n){if(!mt.test(String(e).toLowerCase()))return["Must be a valid email"]})),At=It((function(t,e,n){if(!e)return["Must be a file type"]})),Rt=It((function(t,e,n){if(!e)return["This option must be selected"]})),kt=It((function(t,e,n){if(!1===e)return["Must be checked"]}));function It(t){return function(e){return void 0===e&&(e=null),function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=n[0],a=n[1],i=t(e,o,a);return Array.isArray(i)&&i.length>=1?{isValid:!1,messages:i}:{isValid:!0,messages:[]}}}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvZXh0ZXJuYWwgXCJyZWFjdFwiIiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2NvcmUvX2NvbXBvbmVudHMudHN4Iiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2NvcmUvX2Vycm9ycy50cyIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy91bmNyb250cm9sbGVkLnRzIiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2NvcmUvX2ZpbGUudHMiLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvY29yZS9faGFuZGxlcnMudHMiLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvZmllbGRfY2xhc3Nlcy9fU3VibWl0QnV0dG9uLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9maWVsZF9jbGFzc2VzL19BYnN0cmFjdEZpZWxkLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9lbGVtZW50cy50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvY29yZS9fQWJzdHJhY3RNZXRhZGF0YS50cyIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9maWVsZF9jbGFzc2VzL19DaGVja0JveEZpZWxkLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9maWVsZF9jbGFzc2VzL19GaWxlRmllbGQudHN4Iiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2ZpZWxkX2NsYXNzZXMvX0lucHV0RmllbGQudHN4Iiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2NvcmUvX01ldGFkYXRhLnRzIiwid2VicGFjazovL3JlYWN0LWJhcmUtbGliLy4vc3JjL2NvcmUvX01ldGFkYXRhRmlsZS50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvY29yZS9fTWV0YWRhdGFHcm91cC50cyIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9maWVsZF9jbGFzc2VzL19SYWRpb0ZpZWxkLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1iYXJlLWxpYi8uL3NyYy9maWVsZF9jbGFzc2VzL19TZWxlY3RGaWVsZC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvZmllbGRfY2xhc3Nlcy9fVGV4dEFyZWFGaWVsZC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvY29yZS9faGVscGVycy50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvY29yZS9fcmVnZXgudHMiLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvZm9ybS50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtYmFyZS1saWIvLi9zcmMvdmFsaWRhdG9ycy50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlZhbGlkYXRpb25SZXN1bHRzIiwicHJvcHMiLCJyZXN1bHRzIiwic3R5bGVzIiwibWFwIiwicmVzdWx0IiwibWVzc2FnZXMiLCJtc2ciLCJpbmRleCIsImNsYXNzTmFtZSIsIkZvcm1FbGVtZW50VmFsaWRhdG9ycyIsIkZvcm1Db250ZXh0IiwiYmFyZSIsImlzVG91Y2hlZCIsIl90aHJvd05ld0Vycm9yTXNnIiwidHlwZSIsIm1lc3NhZ2UiLCJFcnJvciIsIl9ub0NvbnRleHRFcnJvciIsImNyZWF0ZUZpbGVSZWYiLCJjcmVhdGVSZWYiLCJnZXRGaWxlRnJvbVJlZiIsImZpbGVSZWYiLCJjdXJyZW50Iiwia2V5cyIsImZpbGVzIiwibGVuZ3RoIiwiY3JlYXRlRmlsZU9iamVjdCIsInJlZiIsImZpbGVEYXRhIiwibGFzdE1vZGlmaWVkIiwibGFzdE1vZGlmaWVkRGF0ZSIsInNpemUiLCJfZ2V0Q29ycmVjdFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleSIsInBhcmVudFN0YXRlIiwiZm9ybUtleSIsIm9iaiIsInVwZGF0ZVBhcmVudFN0YXRlIiwic2V0UGFyZW50U3RhdGUiLCJlIiwidGFyZ2V0IiwidXBkYXRlUmFkaW9Hcm91cFN0YXRlRnJvbVBhc3NlZEluQ29udGV4dCIsInJhZGlvR3JvdXAiLCJuZXdTdGF0ZSIsImNoaWxkcmVuIiwiR1JPVVBfVFlQRVMiLCJpc0dyb3VwIiwibWV0YVR5cGUiLCJ0aGlzIiwiaW5jbHVkZXMiLCJjb250ZXh0IiwiaXNEaXNhYmxlZCIsIm1ldGFkYXRhIiwiaW5wdXRzIiwic3RhdGUiLCJtZXRhIiwibWV0YUZpZWxkIiwiZmllbGQiLCJjaGlsZEZpZWxkIiwidmFsaWRhdGlvbiIsImlzVmFsaWQiLCJkaXNhYmxlZCIsIl9nZW5lcmljRm9ybUdyb3VwIiwibGFiZWx0ZXh0IiwiaGludCIsIkZJRUxEX05BTUVTIiwiaW5pdCIsIl9wYXJlbnROYW1lIiwiQm9vbGVhbiIsIl9iYXJlIiwidmFsIiwiX21ldGFkYXRhIiwiZ2V0TWV0YWRhdGFOYW1lVHlwZSIsImdldFByb3BzIiwiY3JlYXRlRmllbGQiLCJmaWVsZENhbGxiYWNrIiwiX3ZhbGlkYXRlIiwidmFsaWRhdG9ycyIsInBhcmVudE5hbWUiLCJpc0ZpZWxkVG91Y2hlZCIsInZhbGlkYXRlIiwicGFyZW50IiwiZm9ybUdyb3VwIiwiZG9WYWxpZGF0aW9uIiwiZ2V0RmllbGRWYWx1ZSIsInVwZGF0ZSIsImdldEZpZWxkVmFsdWVUeXBlIiwibWVyZ2VEZWZhdWx0Q3NzV2l0aFByb3BzIiwiZGVmYXVsdFZhbHVlIiwiY3NzUHJvcHMiLCJjc3NTdHIiLCJvdmVycmlkZUV2ZW50IiwiZ2V0U3RhdGVQb3NpdGlvbkZyb21Gb3JtS2V5IiwidXBkYXRlU3RhdGUiLCJfbmFtZSIsIl9maWVsZFR5cGUiLCJnZXRGaWVsZCIsImNoZWNrZWQiLCJvbkNoYW5nZSIsIl91cGRhdGVGaWVsZFZhbGlkYXRpb24iLCJmaWxlIiwiX2ZpbGUiLCJfIiwiaGFuZGxlT25DaGFuZ2UiLCJjdXJzb3JQb3NpdGlvbnMiLCJ1cGRhdGVDdXJzb3JQb3NpdGlvblN0YXRlIiwic2VsZWN0aW9uU3RhcnQiLCJDb25zdW1lciIsIm9uS2V5VXAiLCJFTUFJTCIsImN1cnJlbnRUYXJnZXQiLCJjdXJzb3JQb3NpdGlvbiIsInNlbGVjdGlvbkVuZCIsImRlZmF1bHRTdGF0ZSIsImZpZWxkVHlwZSIsImZpZWxkVmFsdWVzIiwiY3VycmVudFZhbHVlIiwiQWJzdHJhY3RNZXRhZGF0YSIsIl9jcmVhdGVHcm91cFN0YXRlIiwibWV0YUdyb3VwIiwicmFkaW9Db250ZXh0IiwiZXZlbnQiLCJSYWRpb0dyb3VwQ29udGV4dCIsIl9fcGFyZW50TmFtZSIsImxhYmVsVGV4dCIsIl9nZXRPcHRpb25zIiwib3B0aW9ucyIsIm9iamVjdGtleSIsIm9iamVjdHZhbHVlIiwib3B0VmFsIiwic2VsZWN0RGF0YSIsImdldFNlbGVjdENzc05hbWUiLCJyb3dzIiwiVGV4dElucHV0RmllbGQiLCJURVhUIiwiRW1haWxGaWVsZCIsIlBhc3N3b3JkRmllbGQiLCJQQVNTV09SRCIsIkNIRUNLQk9YIiwiVEVYVEFSRUEiLCJSYWRpb0dyb3VwIiwiY29udGV4dFZhbHVlIiwiUHJvdmlkZXIiLCJSQURJTyIsIlNFTEVDVCIsImZvcndhcmRSZWYiLCJfcHJvcHMiLCJGSUxFIiwiTUVUQURBVEFfTkFNRVMiLCJJTlBVVFMiLCJSQURJT19HUk9VUFMiLCJDSEVDS0JPWEVTIiwiRklMRVMiLCJFTUFJTF9SRUdFWCIsIklOUFVUU19TVEFURSIsIlJBRElPX0dST1VQU19TVEFURSIsIkZJTEVTX1NUQVRFIiwiQ0hFQ0tCT1hFU19TVEFURSIsIkNVUlNPUl9QT1NJVElPTl9TVEFURSIsInByb3ZpZGVyQ29udGV4dCIsImRlYnVnIiwiZHluYW1pYyIsInJhZGlvR3JvdXBzIiwiY2hlY2tib3hlcyIsImNyZWF0ZUNvbnRleHQiLCJGb3JtUHJvdmlkZXIiLCJGb3JtQ29uc3VtZXIiLCJoYW5kbGVTdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbGxiYWNrIiwiRm9ybSIsImlucHV0U3RhdGUiLCJ1cGRhdGVJbnB1dFN0YXRlIiwiY2hlY2tib3hlc1N0YXRlIiwidXBkYXRlQ2hlY2tib3hlc1N0YXRlIiwiZmlsZVN0YXRlIiwidXBkYXRlRmlsZVN0YXRlIiwicmFkaW9TdGF0ZSIsInVwZGF0ZVJhZGlvU3RhdGUiLCJjdXJzb3JQb3NpdGlvblN0YXRlIiwic2V0U3RhdGUiLCJfRmllbGRFbXB0eUVycm9yTXNnIiwiY3Vyc29yU3RhdGUiLCJ1cGRhdGVDdXJzb3JTdGF0ZSIsIl9wcm92aWRlckNvbnRleHQiLCJmaWVsZE5hbWUiLCJvblN1Ym1pdCIsImFyZUZpZWxkc0VxdWFsIiwiY3VzdG9tVmFsaWRhdG9yIiwiZmllbGRLZXkiLCJmaWVsZFZhbHVlIiwiY29udGV4dFN0YXRlIiwiZ2V0Rm9ybVN0YXRlRnJvbUNvbnRleHQiLCJpc0ZpZWxkRW1wdHkiLCJtaW5MZW5ndGgiLCJpc0VtYWlsVmFsaWQiLCJ0ZXN0IiwiU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJpc0ZpbGUiLCJpc1JhZGlvQ2hl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UyxFQUNUdEQsU0FBVSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInJlYWN0LWJhcmUtbGliXCJdID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInJlYWN0LWJhcmUtbGliXCJdID0gZmFjdG9yeShyb290W1wicmVhY3RcIl0pO1xufSkod2luZG93LCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3QsIHVzZUNvbnRleHR9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQge0lWYWxpZGF0aW9ufSBmcm9tIFwiLi4vdmFsaWRhdG9yc1wiO1xuaW1wb3J0IHtSZWFjdEVsZW1lbnR9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtGb3JtQ29udGV4dCwgSUZvcm1Db250ZXh0LCBNRVRBREFUQV9OQU1FU30gZnJvbSBcIi4uL2Zvcm1cIjtcblxuXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmludGVyZmFjZSBJRm9ybUVsZW1lbnRWYWxpZGF0b3JzIHtcbiAgICByZWFkb25seSByZXN1bHRzOiBBcnJheTxJVmFsaWRhdGlvbj47XG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHR5cGU6IE1FVEFEQVRBX05BTUVTO1xuICAgIHJlYWRvbmx5IGNsYXNzTmFtZT86IHN0cmluZztcbiAgICByZWFkb25seSBwYXJlbnQ/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgaXNUb3VjaGVkOiBib29sZWFuO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xudHlwZSBUeXBlVmFsaWRhdGlvbkVsZW1lbnQgPSB7IHJlc3VsdHM6IEFycmF5PElWYWxpZGF0aW9uPiwgc3R5bGVzOiBzdHJpbmcgfTtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIFZhbGlkYXRpb25SZXN1bHRzKHByb3BzOiBUeXBlVmFsaWRhdGlvbkVsZW1lbnQpOiBSZWFjdEVsZW1lbnQ8VHlwZVZhbGlkYXRpb25FbGVtZW50PiB7XG4gICAgY29uc3QgeyByZXN1bHRzLCBzdHlsZXMgfSA9IHByb3BzO1xuICAgIHJldHVybiAoPD57cmVzdWx0cy5tYXAoKHJlc3VsdDogSVZhbGlkYXRpb24pID0+XG4gICAgICAgIHJlc3VsdC5tZXNzYWdlcy5tYXAoKG1zZzogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PlxuICAgICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9e3N0eWxlc30+e21zZ308L2Rpdj5cbiAgICAgICAgKSl9PC8+KTtcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEZvcm1FbGVtZW50VmFsaWRhdG9ycyA9IChwcm9wczogSUZvcm1FbGVtZW50VmFsaWRhdG9ycyk6IFJlYWN0RWxlbWVudHxudWxsID0+IHtcbiAgICBjb25zdCBjb250ZXh0OiBJRm9ybUNvbnRleHQgPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KTtcbiAgICBjb25zdCBzdHlsZXMgPSAhY29udGV4dC5iYXJlID8gYGFsZXJ0IG10LTIgYWxlcnQtZGFuZ2VyICR7cHJvcHMuY2xhc3NOYW1lfWAgOiBwcm9wcy5jbGFzc05hbWU7XG4gICAgaWYocHJvcHMuaXNUb3VjaGVkKXtcbiAgICAgICAgcmV0dXJuIDxWYWxpZGF0aW9uUmVzdWx0cyByZXN1bHRzPXtwcm9wcy5yZXN1bHRzfSBzdHlsZXM9e3N0eWxlcyB8fCBcIlwifSAvPlxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG4iLCIvLyBFUlJPUlMgJiBFWENFUFRJT04gTUVTU0FHRVNcbi8vXG4vLyBUaGUgYmVsb3cgZnVuY3Rpb25zIGFyZSBvbmx5IGRlc2lnbmVkIHRvIGNvbnN0cnVjdCBFcnJvciAmIEV4Y2VwdGlvbnMgbWVzc2FnZXMuXG4vLyBUaGlzIG1ha2VzIGl0IG11Y2ggc2ltcGxlciB0byB0ZXN0LCB3aGlsZSBsZWF2aW5nIHRoZSBvcHRpb24gdG8gdGhyb3cgZWl0aGVyXG4vLyBhbiBFcnJvciBvciBhbiBFeGNlcHRpb24gdG8gdGhlIGNhbGxlci5cblxuXG4vKipcbiAqXG4gKiBAcGFyYW0gdHlwZVxuICogQHBhcmFtIG5hbWVcbiAqIEBwYXJhbSBtZXNzYWdlXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgX3Rocm93TmV3RXJyb3JNc2cgPSAodHlwZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZyk6IHN0cmluZyA9PlxuICAgIGBSZWFjdCBCYXJlIEZvcm1zIEVSUk9SOlxcblxcdCR7dHlwZX0gLSAke25hbWV9XFxuXFx0LSAke21lc3NhZ2V9YDtcblxuXG5leHBvcnQgY29uc3QgX2lzRmllbGRFbXB0eUVycm9yTXNnID0gX3Rocm93TmV3RXJyb3JNc2coXG4gICAgXCJGdW5jdGlvblwiLFxuICAgIFwiaXNGaWVsZEVtcHR5KClcIixcbiAgICBcIk1pc3NpbmcgYXJndW1lbnQ6IG1pbkxlbmd0aCAobnVtYmVyKVwiXG4pO1xuXG5leHBvcnQgY2xhc3MgX0ZpZWxkRW1wdHlFcnJvck1zZyBleHRlbmRzIEVycm9yIHsgfVxuXG5leHBvcnQgY29uc3QgX25vQ29udGV4dEVycm9yID0gX3Rocm93TmV3RXJyb3JNc2coXG4gICAgXCJSZXF1aXJlZCBQcm9wc1wiLFxuICAgIFwiY29udGV4dFwiLFxuICAgIFwiWW91IG11c3QgcGFzcyBpbiBhIGNvbnRleHQgcHJvcC4gQ2xhc3MgY29tcG9uZW50cyB1c2UgJ3N0YXRlJyBcIiArXG4gICAgXCImIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBtdXN0IHVzZSB1c2VTdGF0ZSBob29rLiBTZWUgaHR0cHM6Ly9qb2VnYXNld2ljei5naXRodWIuaW8vcmVhY3QtYmFyZS1mb3Jtcy9tb2R1bGVzL19mb3JtXy5odG1sXCJcbik7XG4iLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFB1YmxpYyB1bmNvbnRyb2xsZWQgUmVhY3QgQ29tcG9uZW50IEhlbHBlciBmdW5jdGlvbnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuaW1wb3J0IHtkZWZhdWx0IGFzIFJlYWN0fSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7SUZpbGV9IGZyb20gXCIuL2NvcmVcIjtcblxuLyoqXG4gKiBSQkYncyBwcm92aWRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIFJlYWN0IHJlZiB0byBhY2Nlc3MgeW91ciBmaWxlIG9iamVjdC5cbiAqIFRvIHVzZSwgc2ltcGx5IGFzc2lnbiB0aGUgcmV0dXJuZWQgcmVmIGZyb20gdGhlIGNyZWF0ZUZpbGVSZWYgZnVuY3Rpb24gdG8gYVxuICogdmFyaWFibGUgJiBwYXNzIHRoaXMgdmFyaWFibGUgdG8gRmlsZUZpZWxkJ3MgcmVmIHByb3AuXG4gKiBAcmV0dXJuc1xuICogQGV4YW1wbGVcbiAqIGBgYFxuICpcbiAqICBpbXBvcnQge2NyZWF0ZUZpbGVSZWYsIEZpbGVGaWVsZCwgaXNGaWxlLCBnZXRGaWxlRnJvbVJlZn0gZnJvbSBcInJlYWN0LWJhcmUtZm9ybXNcIjtcbiAqXG4gKiAgY29uc3QgbXlGaWxlUmVmID0gY3JlYXRlRmlsZVJlZigpO1xuICpcbiAqICA8RmlsZUZpZWxkXG4gKiAgICAgcmVmPXtteUZpbGVSZWZ9XG4gKiAgICAgaGludD1cIk11c3QgYmUgYSBmaWxlXCJcbiAqICAgICBsYWJlbHRleHQ9XCJVcGxvYWQgeW91ciBmaWxlXCJcbiAqICAgICBuYW1lPVwibXlGaWxlVGVzdFwiXG4gKiAgICAgdmFsaWRhdG9ycz17W2lzRmlsZSgpXX1cbiAqICAvPlxuICpcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmlsZVJlZigpOiBSZWFjdC5SZWZPYmplY3Q8SFRNTEZvcm1FbGVtZW50PiB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZVJlZjxIVE1MRm9ybUVsZW1lbnQ+KCk7XG59XG5cbi8qKlxuICogVG8gZ2V0IGEgZmlsZSBvYmplY3QgYmFjayBmcm9tIHRoZSByZWFjdCByZWYsIHlvdSBjYW4gdXNlIGBnZXRGaWxlRnJvbVJlZmAgZnVuY3Rpb24uXG4gKiBAcGFyYW1zIFRoZSBSZWFjdCByZWYgcmV0dXJuZWQgZnJvbSB7QGxpbmsgY3JlYXRlRmlsZVJlZn1cbiAqIEByZXR1cm5zXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKlxuICogIGltcG9ydCB7Y3JlYXRlRmlsZVJlZiwgRmlsZUZpZWxkLCBpc0ZpbGUsIGdldEZpbGVGcm9tUmVmfSBmcm9tIFwicmVhY3QtYmFyZS1mb3Jtc1wiO1xuICpcbiAqICBjb25zdCBteUZpbGVSZWYgPSBjcmVhdGVGaWxlUmVmKCk7XG4gKlxuICogIDxGaWxlRmllbGRcbiAqICAgICByZWY9e215RmlsZVJlZn1cbiAqICAgICBoaW50PVwiTXVzdCBiZSBhIGZpbGVcIlxuICogICAgIGxhYmVscmV4dD1cIlVwbG9hZCB5b3VyIGZpbGVcIlxuICogICAgIG5hbWU9XCJteUZpbGVUZXN0XCJcbiAqICAgICB2YWxpZGF0b3JzPXtbaXNGaWxlKCldfVxuICogIC8+XG4gKlxuICogIGxldCBmaWxlRGF0YSA9IHtcbiAqICAgICAgbXlGaWxlOiBnZXRGaWxlRnJvbVJlZihteUZpbGVSZWYpXG4gKiAgfTtcbiAqXG4gKiAgLy8gZmlsZURhdGEubXlGaWxlIGlzIHlvdXIgSmF2YXNjcmlwdCBGaWxlIG9iamVjdC5cbiAqXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVGcm9tUmVmKGZpbGVSZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MRm9ybUVsZW1lbnQ+KTogSUZpbGV8bnVsbCB7XG4gICAgaWYoZmlsZVJlZiAmJiAoZmlsZVJlZiBhcyBhbnkpLmN1cnJlbnQgJiYgT2JqZWN0LmtleXMoKGZpbGVSZWYgYXMgYW55KS5jdXJyZW50LmZpbGVzKS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIChmaWxlUmVmIGFzIGFueSkuY3VycmVudC5maWxlc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3R9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtnZXRGaWxlRnJvbVJlZn0gZnJvbSBcIi4uL3VuY3JvbnRyb2xsZWRcIjtcblxuXG4vKiogQGludGVybmFsICoqL1xuZXhwb3J0IGludGVyZmFjZSBJRmlsZSB7XG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGxhc3RNb2RpZmllZDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGxhc3RNb2RpZmllZERhdGU6IHN0cmluZztcbiAgICByZWFkb25seSBzaXplOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmlsZU9iamVjdChyZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MRm9ybUVsZW1lbnQ+KTogSUZpbGV8bnVsbCB7XG4gICAgbGV0IGZpbGVEYXRhID0gZ2V0RmlsZUZyb21SZWYocmVmKTtcbiAgICBpZihmaWxlRGF0YSkge1xuICAgICAgICBsZXQge25hbWUsIGxhc3RNb2RpZmllZCwgbGFzdE1vZGlmaWVkRGF0ZSwgc2l6ZSwgdHlwZX0gPSBmaWxlRGF0YTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQsXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWREYXRlLFxuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuIiwiLy8gSGFuZGxlcnNcbi8vIEhhbmRsZXJzIGFyZSBtZXRob2RzIG9uIHRoZSBjb250ZXh0IG9iamVjdCB0aGF0IHVwZGF0ZSBzdGF0ZS5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtJUmFkaW9Hcm91cFBhcmVudENvbnRleHQsIFR5cGVDdXJzb3JQb3NpdGlvblN0YXRlfSBmcm9tIFwiLi4vZm9ybVwiO1xuXG4vKiogQGludGVybmFsICovXG50eXBlIFR5cGVIYW5kbGVyID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PGFueT4sIG5hbWU6IHN0cmluZykgPT4gdm9pZDtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gX2dldENvcnJlY3RTdGF0ZVBvc2l0aW9uRnJvbUZvcm1LZXkocGFyZW50U3RhdGU6IGFueSwgZm9ybUtleTogc3RyaW5nID0gXCJcIiwgb2JqOiBhbnkgPSB7fSk6IHtba2V5OiBzdHJpbmddOiBhbnl9IHtcbiAgICBpZihmb3JtS2V5KSB7XG4gICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtmb3JtS2V5XToge1xuICAgICAgICAgICAgICAgIC4uLnBhcmVudFN0YXRlW2Zvcm1LZXldLFxuICAgICAgICAgICAgICAgIC4uLm9iaixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnBhcmVudFN0YXRlLFxuICAgICAgICAgICAgLi4ub2JqLFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUN1cnNvclBvc0NhbGxiYWNrKGN1cnNvclN0YXRlOiBUeXBlQ3Vyc29yUG9zaXRpb25TdGF0ZSwgdXBkYXRlQ3Vyc29yU3RhdGU6IGFueSk6IChmaWVsZE5hbWU6IHN0cmluZywgY3Vyc29yUG9zaXRpb246IG51bWJlcikgPT4gdm9pZCB7XG4gICAgcmV0dXJuIChmaWVsZE5hbWU6IHN0cmluZywgY3Vyc29yUG9zaXRpb246IG51bWJlcik6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoIShmaWVsZE5hbWUgaW4gY3Vyc29yU3RhdGUpIHx8IGN1cnNvclN0YXRlW2ZpZWxkTmFtZV0uY3Vyc29yUG9zaXRpb24gIT09IGN1cnNvclBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgLi4uY3Vyc29yU3RhdGUsXG4gICAgICAgICAgICAgICAgW2ZpZWxkTmFtZV06IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgICAgICAgICBjdXJzb3JQb3NpdGlvbixcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdXBkYXRlQ3Vyc29yU3RhdGUoc3RhdGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUGFyZW50U3RhdGUocGFyZW50U3RhdGU6IGFueSwgc2V0UGFyZW50U3RhdGU6IEZ1bmN0aW9uLCBmb3JtS2V5OiBzdHJpbmcgPSBcIlwiKTogVHlwZUhhbmRsZXIge1xuICAgIHJldHVybiAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PiwgbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHNldFBhcmVudFN0YXRlKHtcbiAgICAgICAgICAgIC4uLnBhcmVudFN0YXRlLFxuICAgICAgICAgICAgLi4uX2dldENvcnJlY3RTdGF0ZVBvc2l0aW9uRnJvbUZvcm1LZXkocGFyZW50U3RhdGUsIGZvcm1LZXksIHtbbmFtZV06IGUudGFyZ2V0LnZhbHVlfSksXG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVSYWRpb0dyb3VwU3RhdGVGcm9tUGFzc2VkSW5Db250ZXh0KHBhcmVudFN0YXRlOiBhbnksIHNldFBhcmVudFN0YXRlOiBGdW5jdGlvbiwgZm9ybUtleTogc3RyaW5nID0gXCJcIikge1xuICAgIHJldHVybiAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PiwgbmFtZTogc3RyaW5nLCByYWRpb0dyb3VwOiBJUmFkaW9Hcm91cFBhcmVudENvbnRleHQpID0+IHtcbiAgICAgICAgaWYgKHJhZGlvR3JvdXApIHtcbiAgICAgICAgICAgIGxldCBuZXdTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAuLi5wYXJlbnRTdGF0ZSxcbiAgICAgICAgICAgICAgICAgLi4uX2dldENvcnJlY3RTdGF0ZVBvc2l0aW9uRnJvbUZvcm1LZXkocGFyZW50U3RhdGUsIGZvcm1LZXksIHtbbmFtZV06IHRydWV9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IobGV0IGNoaWxkcmVuIG9mIHJhZGlvR3JvdXAuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBpZihjaGlsZHJlbi5wcm9wcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ubmV3U3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5fZ2V0Q29ycmVjdFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleShuZXdTdGF0ZSwgZm9ybUtleSwge1tjaGlsZHJlbi5wcm9wcy5uYW1lXTogZmFsc2V9KSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFBhcmVudFN0YXRlKG5ld1N0YXRlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBSZWFjdCwgUmVhY3RFbGVtZW50LCB1c2VDb250ZXh0fSBmcm9tIFwicmVhY3RcIjtcblxuXG5pbXBvcnQge0Zvcm1Db250ZXh0LCBJTWV0YWRhdGEsIE1FVEFEQVRBX05BTUVTfSBmcm9tIFwiLi4vZm9ybVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElCdXR0b248VD4ge1xuICAgIGNyZWF0ZSgpOiAocHJvcHM6IFQpID0+IFJlYWN0RWxlbWVudDxUPjtcbn1cblxuYWJzdHJhY3QgY2xhc3MgQnV0dG9uPFQ+IGltcGxlbWVudHMgSUJ1dHRvbjxUPiB7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgY3JlYXRlKCk6IChwcm9wczogVCkgPT4gUmVhY3RFbGVtZW50PFQ+O1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN1Ym1pdEJ1dHRvblByb3BzIHtcbiAgICB0ZXh0Pzogc3RyaW5nO1xuICAgIGRpc2FibGVkPzogZmFsc2U7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGNoaWxkcmVuPzogYW55O1xufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgU3VibWl0QnV0dG9uIGltcGxlbWVudHMgQnV0dG9uPElTdWJtaXRCdXR0b25Qcm9wcz4ge1xuXG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IEdST1VQX1RZUEVTID0gW1wicmFkaW9Hcm91cHNcIl07IC8vIFRPRE8uLi5cblxuICAgIHByaXZhdGUgaXNHcm91cChtZXRhVHlwZTogTUVUQURBVEFfTkFNRVMpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuR1JPVVBfVFlQRVMuaW5jbHVkZXMobWV0YVR5cGUpO1xuICAgIH1cblxuXG4gICAgY3JlYXRlKCkge1xuICAgICAgIHJldHVybiAocHJvcHM6IElTdWJtaXRCdXR0b25Qcm9wcykgPT4ge1xuICAgICAgICAgICAvLyBDb250ZXh0XG4gICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KTtcblxuICAgICAgICAgICAvLyBTdHlsZXNcbiAgICAgICAgICAgY29uc3QgeyBjbGFzc05hbWUgPSBcImJ0biBidG4tc3VjY2VzcyBidG4tbGdcIiwgZGlzYWJsZWQgPSB0cnVlfSA9IHByb3BzO1xuXG4gICAgICAgICAgIGxldCBpc0Rpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgIGNvbnN0IGlucHV0U3RhdGUgPSBjb250ZXh0Lm1ldGFkYXRhLmlucHV0cy5zdGF0ZTtcbiAgICAgICAgICAgZm9yIChsZXQgbWV0YSBvZiBPYmplY3Qua2V5cyhjb250ZXh0Lm1ldGFkYXRhKSkge1xuICAgICAgICAgICAgICAgbGV0IG1ldGFGaWVsZCA9IGNvbnRleHQubWV0YWRhdGFbbWV0YSBhcyBrZXlvZiBJTWV0YWRhdGFdLnN0YXRlO1xuICAgICAgICAgICAgICAgLy8gSWYgYWxsIGFsbCBmaWVsZHMgYXJlIHZhbGlkIHRoZW4gcGFzcyB0aHJvdWdoIHRoZSBkZWZhdWx0IGlzRGlzYWJsZWQgdmFsdWVcbiAgICAgICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSB0aGF0IHRoZSBtZW1iZXIgaXMgbm90IHBhcnQgb2YgYSBtZXRhZGF0YSBncm91cFxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLmlzR3JvdXAoY29udGV4dC5tZXRhZGF0YVttZXRhIGFzIGtleW9mIElNZXRhZGF0YV0ubWV0YVR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgZmllbGQgb2YgT2JqZWN0LmtleXMobWV0YUZpZWxkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCB2YWxpZGF0aW9uIG9mIG1ldGFGaWVsZFtmaWVsZF0udmFsaWRhdGlvbikgeyAvLyBUT0RPIERSWVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF2YWxpZGF0aW9uLmlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIGdyb3VwIG1ldGFkYXRhIHZhbGlkYXRpb24gY2hlY2tzXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgZmllbGQgb2YgT2JqZWN0LmtleXMobWV0YUZpZWxkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBjaGlsZEZpZWxkIG9mIE9iamVjdC5rZXlzKG1ldGFGaWVsZFtmaWVsZF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IF9jaGlsZCA9IChtZXRhRmllbGRbZmllbGRdIGFzIGFueSlbY2hpbGRGaWVsZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCB2YWxpZGF0aW9uIG9mIF9jaGlsZC52YWxpZGF0aW9uKSB7IC8vIFRPRE8gRFJZXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF2YWxpZGF0aW9uLmlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgIH1cblxuICAgICAgICAgICByZXR1cm4gKDxidXR0b25cbiAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgICAgID57cHJvcHMuY2hpbGRyZW59PC9idXR0b24+KTtcbiAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIFJlYWN0LCBSZWFjdEVsZW1lbnQsIHVzZUNvbnRleHQsIHVzZUVmZmVjdH0gZnJvbSBcInJlYWN0XCI7XG5cblxuaW1wb3J0IHtGSUVMRF9OQU1FUywgSUZpZWxkLCBJRmllbGRCYXNlfSBmcm9tIFwiLi4vZWxlbWVudHNcIjtcbmltcG9ydCB7SVZhbGlkYXRpb259IGZyb20gXCIuLi92YWxpZGF0b3JzXCI7XG5pbXBvcnQge1xuICAgIEZvcm1FbGVtZW50VmFsaWRhdG9ycyxcbiAgICBnZXRGaWVsZFZhbHVlVHlwZSxcbiAgICBnZXRNZXRhZGF0YU5hbWVUeXBlLFxufSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHtcbiAgICBGb3JtQ29udGV4dCxcbiAgICBJRm9ybUNvbnRleHQsIFR5cGVGaWVsZFZhbHVlVHlwZXMsXG4gICAgVHlwZUZvcm1NZXRhZGF0YSxcbn0gZnJvbSBcIi4uL2Zvcm1cIjtcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogQGNoaWxkIGNsYXNzIElucHV0RmllbGQgY2xhc3MgaGFzIGEgKmZpbGUqIG1lbWJlclxuICovXG5leHBvcnQgaW50ZXJmYWNlIElBYnN0cmFjdEZpZWxkPFQ+IHtcbiAgICBjcmVhdGU6IChjb250ZXh0OiBJRm9ybUNvbnRleHQpID0+IFJlYWN0RWxlbWVudDxUPjtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgcHJvcHM6IFQ7XG4gICAgbWV0YWRhdGE6IFR5cGVGb3JtTWV0YWRhdGE7XG4gICAgYmFyZTogYm9vbGVhbjtcbiAgICBvdmVycmlkZUV2ZW50OiAoZTogYW55LCB2YWx1ZTogYW55KSA9PiBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+O1xuICAgIGdldEZpZWxkVmFsdWU6IChwcm9wczogYW55KSA9PiBhbnlcbiAgICB2YWxpZGF0ZT86ICgpID0+IEFycmF5PElWYWxpZGF0aW9uPjtcbiAgICBkb1ZhbGlkYXRpb246ICh2YWx1ZTogYW55KSA9PiBBcnJheTxJVmFsaWRhdGlvbj47XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBfZ2VuZXJpY0Zvcm1Hcm91cDxUIGV4dGVuZHMgSUZpZWxkQmFzZT4ocHJvcHM6IFQsIGNoaWxkcmVuOiBhbnkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgIHtwcm9wcy5sYWJlbHRleHQgJiYgPGxhYmVsPntwcm9wcy5sYWJlbHRleHR9PC9sYWJlbD59XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgICB7cHJvcHMuaGludCAmJiA8c21hbGwgY2xhc3NOYW1lPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj57cHJvcHMuaGludH08L3NtYWxsPn1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0RmllbGQ8VCBleHRlbmRzIElGaWVsZEJhc2U+IHtcbiAgICBwdWJsaWMgdHlwZTogRklFTERfTkFNRVM7XG4gICAgcHVibGljIHByb3BzOiBUO1xuICAgIHB1YmxpYyBwYXJlbnQ/OiBzdHJpbmc7XG4gICAgcHVibGljIF9tZXRhZGF0YT86IFR5cGVGb3JtTWV0YWRhdGE7XG4gICAgcHVibGljIF9iYXJlPzogYm9vbGVhbjtcbiAgICBwdWJsaWMgY29udGV4dD86IElGb3JtQ29udGV4dDtcbiAgICBwcml2YXRlIF9wYXJlbnROYW1lPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgcHVibGljIGdldCBwYXJlbnROYW1lKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnROYW1lO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IHBhcmVudE5hbWUodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9wYXJlbnROYW1lID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3BzOiBULCB0eXBlOiBGSUVMRF9OQU1FUykge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIGdldCBiYXJlKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLl9iYXJlKTtcbiAgICB9XG5cbiAgICBzZXQgYmFyZSh2YWw6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fYmFyZSA9IHZhbDtcbiAgICB9XG5cbiAgICBnZXQgbWV0YWRhdGEoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fbWV0YWRhdGEgYXMgVHlwZUZvcm1NZXRhZGF0YSk7XG4gICAgfVxuXG4gICAgc2V0IG1ldGFkYXRhKHZhbDogVHlwZUZvcm1NZXRhZGF0YSkge1xuICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IHZhbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IHVzZUNvbnRleHQ8SUZvcm1Db250ZXh0PihGb3JtQ29udGV4dCk7XG4gICAgICAgIC8vIHRoaXMuc3RhdGVGcm9tRm9ybUtleSA9XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSB0aGlzLmNvbnRleHQubWV0YWRhdGFbZ2V0TWV0YWRhdGFOYW1lVHlwZSh0aGlzLnR5cGUpXTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5pbml0KHRoaXMucHJvcHMubmFtZSwgdGhpcy50eXBlKTtcbiAgICAgICAgdGhpcy5iYXJlID0gQm9vbGVhbih0aGlzLmNvbnRleHQuYmFyZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFByb3BzKCk6IFQge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcztcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlRmllbGQoZmllbGRDYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICAgICAgY29uc3QgX3ZhbGlkYXRlID0gdGhpcy5wcm9wcy52YWxpZGF0b3JzIHx8IHRoaXMucGFyZW50TmFtZSA/XG4gICAgICAgICAgICA8Rm9ybUVsZW1lbnRWYWxpZGF0b3JzXG4gICAgICAgICAgICAgICAgaXNUb3VjaGVkPXt0aGlzLm1ldGFkYXRhLmlzRmllbGRUb3VjaGVkKCl9XG4gICAgICAgICAgICAgICAgcmVzdWx0cz17dGhpcy52YWxpZGF0ZSgpfVxuICAgICAgICAgICAgICAgIG5hbWU9e3RoaXMucHJvcHMubmFtZX1cbiAgICAgICAgICAgICAgICB0eXBlPXtnZXRNZXRhZGF0YU5hbWVUeXBlKHRoaXMudHlwZSl9XG4gICAgICAgICAgICAgICAgcGFyZW50PXt0aGlzLnBhcmVudH1cbiAgICAgICAgICAgIC8+IDpcbiAgICAgICAgICAgIG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuYmFyZSkge1xuICAgICAgICAgICAgcmV0dXJuICg8PntmaWVsZENhbGxiYWNrKHRoaXMubWV0YWRhdGEuc3RhdGUpfXtfdmFsaWRhdGV9PC8+KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoPD57dGhpcy5mb3JtR3JvdXAoZmllbGRDYWxsYmFjayh0aGlzLm1ldGFkYXRhLnN0YXRlKSl9e192YWxpZGF0ZX08Lz4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICBwdWJsaWMgZG9WYWxpZGF0aW9uKHZhbHVlOiBhbnkpOiBBcnJheTxJVmFsaWRhdGlvbj4ge1xuICAgICAgIGxldCB2YWxpZGF0aW9uOiBBcnJheTxJVmFsaWRhdGlvbj4gPSBbXTtcbiAgICAgICAvLyBDYXJyeSBvdXQgdGhlIHZhbGlkYXRpb25cbiAgICAgICBpZiAodGhpcy5wcm9wcy52YWxpZGF0b3JzKSB7XG4gICAgICAgICAgIGZvcihsZXQgdmFsaWRhdGUgb2YgdGhpcy5wcm9wcy52YWxpZGF0b3JzKSB7XG4gICAgICAgICAgICAgICB2YWxpZGF0aW9uID0gW1xuICAgICAgICAgICAgICAgICAgIC4uLnZhbGlkYXRpb24sXG4gICAgICAgICAgICAgICAgICAgdmFsaWRhdGUodmFsdWUsIHRoaXMuY29udGV4dCksXG4gICAgICAgICAgICAgICBdO1xuICAgICAgICAgICB9XG4gICAgICAgfVxuXG4gICAgICAgcmV0dXJuIHZhbGlkYXRpb247XG4gICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAZGVzY3JpcHRpb24gTm9ybWFsbHksIHRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIGZyb20gdGhpcyBzdXBlciBjbGFzcy4gQnV0IGl0IGlzIHB1YmxpYyBhc1xuICAgICAqIHRoZXJlIGFyZSBzb21lIGVkZ2UgY2FzZXMgd2hlcmUgaXQgbmVlZHMgdG8gYmUgY2FsbGVkIGJ5IGEgY2hpbGQgY2xhc3MgdGhhdCBleHRlbmRzIEFic3RyYWN0RmllbGQuXG4gICAgICovXG4gICAgcHVibGljIHZhbGlkYXRlKCk6IEFycmF5PElWYWxpZGF0aW9uPiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0RmllbGRWYWx1ZSh0aGlzLnByb3BzKTtcbiAgICAgICAgLy8gQ2Fycnkgb3V0IHRoZSB2YWxpZGF0aW9uXG4gICAgICAgIGxldCB2YWxpZGF0aW9uID0gdGhpcy5kb1ZhbGlkYXRpb24odmFsdWUpO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIG1ldGFkYXRhIHR5cGUgc3RhdGVcbiAgICAgICAgdGhpcy5tZXRhZGF0YS51cGRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgICByZXR1cm4gdmFsaWRhdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gcHJvcHNcbiAgICAgKiBAZGVzY3JpcHRpb24gVGhpcyBpcyBvdmVycmlkZGVuIGluIHRoZSBSYWRpb0ZpZWxkIHN1YiBjbGFzc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGaWVsZFZhbHVlKHByb3BzOiBUKTogYW55IHtcbiAgICAgICAgbGV0IHR5cGUgPSBnZXRGaWVsZFZhbHVlVHlwZSh0aGlzLnR5cGUpO1xuICAgICAgICByZXR1cm4gKHRoaXMucHJvcHMgYXMgVCAmIFR5cGVGaWVsZFZhbHVlVHlwZXMpW3R5cGUgYXMgYW55XTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgZm9ybUdyb3VwKGNoaWxkcmVuOiBhbnkpOiBSZWFjdEVsZW1lbnQ7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0RmllbGQoKTogKGNvbnRleHQ6IElGb3JtQ29udGV4dCkgPT4gUmVhY3RFbGVtZW50O1xuXG4gICAgc3RhdGljIG1lcmdlRGVmYXVsdENzc1dpdGhQcm9wcyhkZWZhdWx0VmFsdWU6IHN0cmluZywgY3NzUHJvcHM6IGFueSwgYmFyZTogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgIGxldCBjc3NTdHIgPSBcIlwiO1xuICAgICAgICBpZiAoIWJhcmUpIHtcbiAgICAgICAgICAgIGNzc1N0ciArPSBgJHtkZWZhdWx0VmFsdWV9IGA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNzc1Byb3BzKSB7XG4gICAgICAgICAgICBjc3NTdHIgKz0gYCR7Y3NzUHJvcHN9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3NzU3RyO1xuICAgIH1cblxuICAgIHB1YmxpYyBvdmVycmlkZUV2ZW50KGU6IGFueSwgdmFsdWU6IGFueSk6IFJlYWN0LkNoYW5nZUV2ZW50PGFueT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZSxcbiAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgIC4uLmUudGFyZ2V0LFxuICAgICAgICAgICAgICAgIHZhbHVlOiAhdmFsdWUsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3RhdGVQb3NpdGlvbkZyb21Gb3JtS2V5KCk6IHtba2V5OiBzdHJpbmddOiBhbnl9IHtcbiAgICAgICAgaWYgKHRoaXMuY29udGV4dD8uZm9ybUtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5zdGF0ZVt0aGlzLmNvbnRleHQuZm9ybUtleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dD8uc3RhdGU7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3QsIHVzZVN0YXRlfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHtJVmFsaWRhdG9yc30gZnJvbSBcIi4vdmFsaWRhdG9yc1wiO1xuaW1wb3J0IHtcbiAgICBJRm9ybSxcbiAgICBJUmFkaW9Hcm91cFBhcmVudENvbnRleHQsXG4gICAgUmFkaW9Hcm91cENvbnRleHQsXG4gICAgVHlwZVJhZGlvR3JvdXBNZXRhZGF0YSxcbn0gZnJvbSBcIi4vZm9ybVwiO1xuaW1wb3J0IHtTdWJtaXRCdXR0b24gYXMgX1N1Ym1pdEJ1dHRvbix9IGZyb20gXCIuL2ZpZWxkX2NsYXNzZXMvX1N1Ym1pdEJ1dHRvblwiO1xuaW1wb3J0IHtcbiAgICBDaGVja0JveEZpZWxkIGFzIF9DaGVja0JveEZpZWxkLFxuICAgIEZpbGVGaWVsZCBhcyBfRmlsZUZpZWxkLFxuICAgIElucHV0RmllbGQsXG4gICAgUmFkaW9GaWVsZCBhcyBfUmFkaW9GaWVsZCxcbiAgICBTZWxlY3RGaWVsZCBhcyBfU2VsZWN0RmllbGQsXG4gICAgVGV4dEFyZWFGaWVsZCBhcyBfVGV4dEFyZWFGaWVsZCxcbn0gZnJvbSBcIi4vZmllbGRfY2xhc3Nlc1wiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZW51bSBGSUVMRF9OQU1FUyB7XG4gICAgVEVYVCA9IFwidGV4dFwiLFxuICAgIEVNQUlMID0gXCJlbWFpbFwiLFxuICAgIFBBU1NXT1JEID0gXCJwYXNzd29yZFwiLFxuICAgIFRFWFRBUkVBID0gXCJ0ZXh0QXJlYVwiLFxuICAgIFJBRElPICA9IFwicmFkaW9cIixcbiAgICBDSEVDS0JPWCA9IFwiY2hlY2tib3hcIixcbiAgICBTRUxFQ1QgPSBcInNlbGVjdFwiLFxuICAgIEZJTEUgPSBcImZpbGVcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRmllbGRCYXNlIHtcbiAgICAvKiogVGhlIG5hbWUgb2YgdGhlIGZvcm0gZWxlbWVudCAodGhpcyBzaG91bGQgbWF0Y2ggdGhlIHN0YXRlIHByb3BlcnR5IHRoYXQgeW91IHdhbnQgYmUgdXBkYXRlZCBieSB0aGlzIGZvcm0gZWxlbWVudCkgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqIElmICpiYXJlKiAoc2VlIHtAbGluayBJRm9ybS5iYXJlfSkgaXMgc2V0IHRvIHRydWUgdGhlbiAqbGFiZWx0ZXh0KiB3aWxsIGJlIGluc2VydGVkIHdpdGhpbiAqKmxhYmVsKiogdGFncy4gKi9cbiAgICBsYWJlbHRleHQ/OiBzdHJpbmc7XG4gICAgLyoqIElmICpiYXJlKiAoc2VlIHtAbGluayBGb3JtLmJhcmV9KSBpcyBzZXQgdG8gdHJ1ZSB0aGVuICpoaW50KiB3aWxsIGJlIGluc2VydGVkIHdpdGhpbiAqKnNtYWxsKiogdGFncy4gKi9cbiAgICBoaW50Pzogc3RyaW5nO1xuICAgIC8qKiBUaGVzZSBhcmUgdGhlIHtAbGluayBJVmFsaWRhdG9yc30gdGhhdCB5b3UgY2FuIHBhc3MgaW4gdGhlIHZhbGlkYXRlIHRoZSBmb3JtIGVsZW1lbnQuICovXG4gICAgdmFsaWRhdG9ycz86IElWYWxpZGF0b3JzO1xuICAgIC8qKiBBZGQgYWRkaXRpb25hbCBjc3MgKi9cbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZpZWxkPFQ+IGV4dGVuZHMgUmVhY3QuSW5wdXRIVE1MQXR0cmlidXRlczxUPiB7XG4gICAgLyoqIFRoZSBuYW1lIG9mIHRoZSBmb3JtIGVsZW1lbnQgKHRoaXMgc2hvdWxkIG1hdGNoIHRoZSBzdGF0ZSBwcm9wZXJ0eSB0aGF0IHlvdSB3YW50IGJlIHVwZGF0ZWQgYnkgdGhpcyBmb3JtIGVsZW1lbnQpICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKiBJZiAqYmFyZSogKHNlZSB7QGxpbmsgSUZvcm0uYmFyZX0pIGlzIHNldCB0byB0cnVlIHRoZW4gKmxhYmVsdGV4dCogd2lsbCBiZSBpbnNlcnRlZCB3aXRoaW4gKipsYWJlbCoqIHRhZ3MuICovXG4gICAgbGFiZWx0ZXh0Pzogc3RyaW5nO1xuICAgIC8qKiBJZiAqYmFyZSogKHNlZSB7QGxpbmsgRm9ybS5iYXJlfSkgaXMgc2V0IHRvIHRydWUgdGhlbiAqaGludCogd2lsbCBiZSBpbnNlcnRlZCB3aXRoaW4gKipzbWFsbCoqIHRhZ3MuICovXG4gICAgaGludD86IHN0cmluZztcbiAgICAvKiogVGhlc2UgYXJlIHRoZSB7QGxpbmsgSVZhbGlkYXRvcnN9IHRoYXQgeW91IGNhbiBwYXNzIGluIHRoZSB2YWxpZGF0ZSB0aGUgZm9ybSBlbGVtZW50LiAqL1xuICAgIHZhbGlkYXRvcnM/OiBJVmFsaWRhdG9ycztcbiAgICAvKiogQWRkIGFkZGl0aW9uYWwgY3NzICovXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUZXh0SW5wdXRGaWVsZCBleHRlbmRzIElGaWVsZDxIVE1MSW5wdXRFbGVtZW50PiB7XG4gICAgLyoqIFRoZSBzdGF0ZSBwcm9wZXJ0eSB0aGF0IGdldHMgdXBkYXRlZCBieSB0aGlzIGlucHV0IGZpZWxkICovXG4gICAgdmFsdWU6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUGFzc3dvcmRGaWVsZCBleHRlbmRzIElGaWVsZDxIVE1MSW5wdXRFbGVtZW50PiB7XG4gICAgLyoqIFRoZSBzdGF0ZSBwcm9wZXJ0eSB0aGF0IGdldHMgdXBkYXRlZCBieSB0aGlzIGlucHV0IGZpZWxkICovXG4gICAgdmFsdWU6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRW1haWxGaWVsZCBleHRlbmRzIElGaWVsZDxIVE1MSW5wdXRFbGVtZW50PiB7XG4gICAgLyoqIFRoZSBzdGF0ZSBwcm9wZXJ0eSB0aGF0IGdldHMgdXBkYXRlZCBieSB0aGlzIGlucHV0IGZpZWxkICovXG4gICAgdmFsdWU6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ2hlY2tCb3hGaWVsZCBleHRlbmRzIElGaWVsZDxIVE1MSW5wdXRFbGVtZW50PiB7XG4gICAgY2hlY2tlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVGV4dEFyZWFGaWVsZCBleHRlbmRzIElGaWVsZDxIVE1MVGV4dEFyZWFFbGVtZW50PiB7XG4gICAgcm93cz86IG51bWJlcjtcbiAgICAvKiogVGhlIHN0YXRlIHByb3BlcnR5IHRoYXQgZ2V0cyB1cGRhdGVkIGJ5IHRoaXMgaW5wdXQgZmllbGQgKi9cbiAgICB2YWx1ZTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSYWRpb0ZpZWxkIGV4dGVuZHMgSUZpZWxkPEhUTUxJbnB1dEVsZW1lbnQ+IHtcbiAgICBjaGVja2VkOiBib29sZWFuO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRmlsZUZpZWxkIGV4dGVuZHMgSUZpZWxkPEhUTUxJbnB1dEVsZW1lbnQ+IHtcbiAgICByZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MRm9ybUVsZW1lbnQ+O1xufVxuXG5leHBvcnQgdHlwZSBUeXBlU2VsZWN0Q3NzU2l6ZU5hbWUgPSB8XCJzbVwifFwiZGVmYXVsdFwifFwibGdcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJU2VsZWN0RmllbGQgZXh0ZW5kcyBPbWl0PElGaWVsZDxIVE1MU2VsZWN0RWxlbWVudD4sIFwic2l6ZVwiPiB7XG4gICAgdmFsdWU6IGFueTtcbiAgICBvcHRpb25zOiBBcnJheTxzdHJpbmd8e1trOiBzdHJpbmddOiBhbnl9PjtcbiAgICBzaXplPzogVHlwZVNlbGVjdENzc1NpemVOYW1lO1xuICAgIG9iamVjdGtleT86IHN0cmluZztcbiAgICBvYmplY3R2YWx1ZT86IHN0cmluZztcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHByb3BzIHtAbGluayBJVGV4dElucHV0RmllbGR9XG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiAgaW1wb3J0IHtUZXh0SW5wdXRGaWVsZH0gZnJvbSBcInJlYWN0LWJhc2UtZm9ybXNcIlxuICpcbiAqICBjb25zdCBzdGF0ZSA9IHsgdXNlcm5hbWU6IFwiXCIgfVxuICpcbiAqIC8vIEEgYmFyZSBmb3JtIGV4YW1wbGUgLi4uIHJlbWVtYmVyIHRvIHNldCB0aGUge0BsaW5rIEZvcm0uYmFyZX0gcHJvcGVydHkgdG8gYHRydWVgXG4gKiA8VGV4dElucHV0RmllbGRcbiAqICAgIHZhbHVlPXtzdGF0ZS51c2VybmFtZX1cbiAqICAgIG5hbWU9XCJ1c2VybmFtZVwiXG4gKiAvPlxuICpcbiAqIC8vIEV4YW1wbGUgd2l0aCBCb290c3RyYXAgc3R5bGluZyAoQm9vdHN0cmFwIHN0eWxpbmcgY29tZXMgYXMgZGVmYXVsdClcbiAqXG4gKiA8VGV4dElucHV0RmllbGRcbiAqICAgIHZhbHVlPXtzdGF0ZS51c2VybmFtZX1cbiAqICAgIG5hbWU9XCJ1c2VybmFtZVwiXG4gKiAgICBoaW50PVwiTmVlZHMgdG8gYmUgYXQgbGVhc3QgNTAgY2hhcmFjdGVycyBsb25nXCJcbiAqICAgIGxhYmVsdGV4dD1cIlVzZXJuYW1lXCJcbiAqICAvPlxuICogYGBgXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IFRleHRJbnB1dEZpZWxkID0gKHByb3BzOiBJVGV4dElucHV0RmllbGQpID0+IHtcbiAgY29uc3QgdGV4dElucHV0ID0gbmV3IElucHV0RmllbGQ8SVRleHRJbnB1dEZpZWxkPihGSUVMRF9OQU1FUy5URVhULCBwcm9wcyk7XG4gIHJldHVybiB0ZXh0SW5wdXQuY3JlYXRlKCk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSBwcm9wcyB7QGxpbmsgSUVtYWlsRmllbGR9XG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiAgaW1wb3J0IHtFbWFpbEZpZWxkfSBmcm9tIFwicmVhY3QtYmFzZS1mb3Jtc1wiXG4gKlxuICogIGNvbnN0IHN0YXRlID0geyBlbWFpbDogXCJcIiB9XG4gKlxuICogLy8gQSBiYXJlIGZvcm0gZXhhbXBsZSAuLi4gcmVtZW1iZXIgdG8gc2V0IHRoZSB7QGxpbmsgRm9ybS5iYXJlfSBwcm9wZXJ0eSB0byBgdHJ1ZWBcbiAqIDxFbWFpbEZpZWxkXG4gKiAgICB2YWx1ZT17c3RhdGUuZW1haWx9XG4gKiAgICBuYW1lPVwiZW1haWxcIlxuICogLz5cbiAqXG4gKiAvLyBFeGFtcGxlIHdpdGggQm9vdHN0cmFwIHN0eWxpbmcgKEJvb3RzdHJhcCBzdHlsaW5nIGNvbWVzIGFzIGRlZmF1bHQpXG4gKlxuICogPEVtYWlsRmllbGRcbiAqICAgIHZhbHVlPXtzdGF0ZS5lbWFpbH1cbiAqICAgIG5hbWU9XCJlbWFpbFwiXG4gKiAgICBoaW50PVwiTmVlZHMgdG8gYmUgYXQgbGVhc3QgNTAgY2hhcmFjdGVycyBsb25nXCJcbiAqICAgIGxhYmVsdGV4dD1cIlVzZXJuYW1lXCJcbiAqICAvPlxuICogYGBgXG4gKlxuICogVGhlcmUgaXMgYSBidWcgd2hlbiB3b3JraW5nIHdpdGggUmVhY3QgJiBpbnB1dCBmaWVsZHMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzk1NVxuICogV2UgaGF2ZSBwcm92aWRlZCBhIGZpeCBmb3Ige0BsaW5rIFRleHRJbnB1dEZpZWxkfSBhbmQge0BsaW5rIFBhc3N3b3JkRmllbGR9IGZpZWxkcyBidXQgbm90IHtAbGluayBFbWFpbEZpZWxkfSBmaWVsZHMuXG4gKiBJZiB5b3Ugd2lzaCB0byBhdm9pZCB0aGUgY3Vyc29yIGp1bXBpbmcgKmJ1ZyosIHRoZW4gdXNlIGEge0BsaW5rIFRleHRJbnB1dEZpZWxkfSB3aXRoIHRoZSB7QGxpbmsgaXNFbWFpbFZhbGlkfVxuICogdmFsaWRhdG9yLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0IGpzeFxuICogICAgPFRleHRJbnB1dEZpZWxkXG4gKiAgICAgICB2YWx1ZT17c3RhdGUuZW1haWx9XG4gKiAgICAgICBuYW1lPVwiTXVzdCBiZSBhIHZhbGlkIGVtYWlsXCJcbiAqICAgICAgIGxhYmVsdGV4dD1cIkVtYWlsXCJcbiAqICAgICAgdmFsaWRhdG9ycz17W2lzRW1haWxWYWxpZCgpXX1cbiAqICAgIC8+XG4gKiBgYGBcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgY29uc3QgRW1haWxGaWVsZCA9IChwcm9wczogSUVtYWlsRmllbGQpID0+IHtcbiAgICBjb25zdCBlbWFpbElucHV0ID0gbmV3IElucHV0RmllbGQ8SUVtYWlsRmllbGQ+KEZJRUxEX05BTUVTLkVNQUlMLCBwcm9wcyk7XG4gICAgcmV0dXJuIGVtYWlsSW5wdXQuY3JlYXRlKCk7XG59O1xuXG4vKipcbiAqICBUaGUgYFBhc3N3b3JkRmllbGRgIHdvcmtzIHRoZSBzYW1lIGFzIHRoZSBgRW1haWxGaWVsZGAgJiBgVGV4dElucHV0RmllbGRgJ3MuXG4gKiBAcGFyYW0gcHJvcHMge0BsaW5rIElQYXNzd29yZEZpZWxkfVxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogIGltcG9ydCB7YXJlRmllbGRzRXF1YWwsIGlzRmllbGRFbXB0eSwgUGFzc3dvcmRGaWVsZH0gZnJvbSBcInJlYWN0LWJhc2UtZm9ybXNcIjtcbiAqXG4gKiAgY29uc3Qgc3RhdGUgPSB7IHBhc3N3b3JkOiBcIlwiLCBjb25maXJtUGFzc3dvcmQ6IFwiXCIgfTtcbiAqXG4gKiAvLyBBIGJhcmUgZm9ybSBleGFtcGxlIC4uLiByZW1lbWJlciB0byBzZXQgdGhlIHtAbGluayBGb3JtLmJhcmV9IHByb3BlcnR5IHRvIGB0cnVlYFxuICogPFBhc3N3b3JkRmllbGRcbiAqICAgIHZhbHVlPXtzdGF0ZS5wYXNzd29yZH1cbiAqICAgIG5hbWU9XCJ1c2VybmFtZVwiXG4gKiAgICB2YWxpZGF0b3JzPXtbaXNGaWVsZEVtcHR5KDgpXX1cbiAqIC8+XG4gKlxuICogLy8gRXhhbXBsZSB3aXRoIEJvb3RzdHJhcCBzdHlsaW5nIChCb290c3RyYXAgc3R5bGluZyBjb21lcyBhcyBkZWZhdWx0KVxuICpcbiAqIDxQYXNzd29yZEZpZWxkXG4gKiAgICB2YWx1ZT17c3RhdGUuY29uZmlybVBhc3N3b3JkfVxuICogICAgbmFtZT1cInBhc3N3b3JkXCJcbiAqICAgIGhpbnQ9XCJOZWVkcyB0byBiZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMgbG9uZ1wiXG4gKiAgICBsYWJlbHRleHQ9XCJQYXNzd29yZFwiXG4gKiAgLz5cbiAqICBgYGBcbiAqIEFsc28gd2UgY2FuIGNyZWF0ZSB0d28gKlBhc3N3b3JkRmllbGQqIGNvbXBvbmVudHMgdG8gY29uZmlybSBwYXNzd29yZHMgYXJlIGVxdWFsLiBQbGVhc2Ugc2VlXG4gKiB7QGxpbmsgYXJlRmllbGRzRXF1YWx9IGZvciBtb3JlIGluZm8uXG4gKiBUaGUgZmlyc3QgKlBhc3N3b3JkRmllbGQqIGhhcyBoYXMgYSAqbmFtZSogcHJvcCBvZiAqKnBhc3N3b3JkKiogJiB0aGUgc2Vjb25kICpQYXNzd29yZEZpZWxkKiBhIG5hbWVcbiAqIHByb3Agb2YgKmNvbmZpcm1QYXNzd29yZCouIFRoZW4gd2UgY2FuIGFkZCBhIHtAbGluayBhcmVGaWVsZHNFcXVhbH0gdmFsaWRhdG9yIHRvIHRoZSAqUGFzc3dvcmRGaWVsZCpcbiAqIHdpdGggdGhlICpjb25maXJtUGFzc3dvcmQqIG5hbWUgcHJvcHMgKGFsc28gbm90aWNlIGhvdyB7QGxpbmsgYXJlRmllbGRzRXF1YWx9IHRha2VzIHRoZSBmaXJzdCAqUGFzc3dvcmRGaWVsZCpcbiAqIG5hbWUgYXMgYW4gYXJndW1lbnQpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIDxQYXNzd29yZEZpZWxkXG4gKiAgbmFtZT1cInBhc3N3b3JkXCJcbiAqICAvLyBvdGhlciBwcm9wcy4uLlxuICpcbiAqIC8+XG4gKlxuICogPFBhc3N3b3JkRmllbGRcbiAqICBuYW1lPVwiY29uZmlybVBhc3N3b3JkXCJcbiAqICAvLyBvdGhlciBwcm9wcy4uLlxuICogIHZhbGlkYXRvcnM9e1thcmVGaWVsZHNFcXVhbChcInBhc3N3b3JkXCIpXX1cbiAqIC8+XG4gKiBgYGBcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IFBhc3N3b3JkRmllbGQgPSAocHJvcHM6IElQYXNzd29yZEZpZWxkKSA9PiB7XG4gIGNvbnN0IHBhc3N3b3JkSW5wdXQgPSBuZXcgSW5wdXRGaWVsZDxJUGFzc3dvcmRGaWVsZD4oRklFTERfTkFNRVMuUEFTU1dPUkQsIHByb3BzKTtcbiAgcmV0dXJuIHBhc3N3b3JkSW5wdXQuY3JlYXRlKCk7XG59O1xuXG5cblxuLyoqXG4gKiBUaGUgQ2hlY2tCb3hGaWVsZCByZXF1aXJlcyBhICpjaGVja2VkKiBwcm9wIGluc3RlYWQgb2YgYSAqdmFsdWUqIHByb3AuIFNlZVxuICoge0BsaW5rIElDaGVja0JveEZpZWxkfS5cbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIC8vIEEgYmFyZSBmb3JtIGV4YW1wbGUgLi4uIHJlbWVtYmVyIHRvIHNldCB0aGUge0BsaW5rIEZvcm0uYmFyZX0gcHJvcGVydHkgdG8gYHRydWVgXG4gKiAgaW1wb3J0IHtDaGVja0JveEZpZWxkfSBmcm9tIFwicmVhY3QtYmFzZS1mb3Jtc1wiO1xuICpcbiAqICBjb25zdCBzdGF0ZSA9IHsgcGFzc3dvcmQ6IFwiXCIsIGNvbmZpcm1QYXNzd29yZDogXCJcIiB9O1xuICpcbiAqIDxDaGVja0JveEZpZWxkXG4gKiAgIG5hbWU9XCJ0ZXJtc1wiXG4gKiAgIGNoZWNrZWQ9e3N0YXRlLnRlcm1zfVxuICogLz5cbiAqXG4gKiAvLyBFeGFtcGxlIHdpdGggQm9vdHN0cmFwIHN0eWxpbmcgKEJvb3RzdHJhcCBzdHlsaW5nIGNvbWVzIGFzIGRlZmF1bHQpXG4gKiA8Q2hlY2tCb3hGaWVsZFxuICogICBuYW1lPVwidGVybXNcIlxuICogICBjaGVja2VkPXtzdGF0ZS50ZXJtc31cbiAqICAgaGludD1cIkNsaWNrIHRvIGFncmVlXCJcbiAqICAgbGFiZWx0ZXh0PVwiQWdyZWUgdG8gdGVybXMgJiBjb25kaXRpb25zXCJcbiAqIC8+XG4gKiBgYGBcbiAqIEBwYXJhbSBwcm9wcyB7QGxpbmsgSUNoZWNrQm94RmllbGR9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IENoZWNrQm94RmllbGQgPSAocHJvcHM6IElDaGVja0JveEZpZWxkKSA9PiB7XG4gIGNvbnN0IGNoZWNrQm94ID0gbmV3IF9DaGVja0JveEZpZWxkPElDaGVja0JveEZpZWxkPihGSUVMRF9OQU1FUy5DSEVDS0JPWCwgcHJvcHMpO1xuICByZXR1cm4gY2hlY2tCb3guY3JlYXRlKCk7XG59O1xuXG4vKipcbiAqIFRoZSBUZXh0QXJlYUZpZWxkIHRha2VzIGluIGFuIGV4dHJhIHByb3Agb2YgKnJvdyogd2hpY2ggaXMgYSBudW1iZXIgJiBkZWNsYXJlc1xuICogdGhlIG51bWJlciBvZiByb3dzIGRpc3BsYXllZCBieSB0aGUgdGV4dGFyZWEgZWxlbWVudC4gVGhlIFRleHRBcmVhRmllbGQgYWNjZXB0c1xuICogYWxsIHRoZSB7QGxpbmsgSUZpZWxkfSBwcm9wcy5cbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqICAqICBpbXBvcnQge0NoZWNrQm94RmllbGR9IGZyb20gXCJyZWFjdC1iYXNlLWZvcm1zXCI7XG4gKlxuICogIGNvbnN0IHN0YXRlID0geyBhYm91dDogXCJcIiB9O1xuICogLy8gQSBiYXJlIGZvcm0gZXhhbXBsZSAuLi4gcmVtZW1iZXIgdG8gc2V0IHRoZSB7QGxpbmsgRm9ybS5iYXJlfSBwcm9wZXJ0eSB0byBgdHJ1ZWBcbiAqIDxUZXh0QXJlYUZpZWxkXG4gKiAgICB2YWx1ZT17c3RhdGUuYWJvdXR9XG4gKiAgICBuYW1lPVwiYWJvdXRcIlxuICogICAgdmFsaWRhdG9ycz17W2lzRmllbGRFbXB0eSgyMCldfVxuICogLz5cbiAqXG4gKiAvLyBFeGFtcGxlIHdpdGggQm9vdHN0cmFwIHN0eWxpbmcgKEJvb3RzdHJhcCBzdHlsaW5nIGNvbWVzIGFzIGRlZmF1bHQpXG4gKlxuICogPFRleHRBcmVhRmllbGRcbiAqICAgIG5hbWU9XCJhYm91dFwiXG4gKiAgICB2YWx1ZT17c3RhdGUuYWJvdXR9XG4gKiAgICBoaW50PVwiTXVzdCBiZSBhdCBsZWFzdCAyMCBjaGFyYWN0ZXJzXCJcbiAqICAgIGxhYmVsdGV4dD1cIkFib3V0IHlvdS4uLlwiXG4gKiAgICB2YWxpZGF0b3JzPXtbaXNGaWVsZEVtcHR5KDIwKV19XG4gKiAvPlxuICogYGBgXG4gKiBAcGFyYW0gcHJvcHMge0BsaW5rIElUZXh0SW5wdXRGaWVsZH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgY29uc3QgVGV4dEFyZWFGaWVsZCA9IChwcm9wczogSVRleHRBcmVhRmllbGQpID0+IHtcbiAgY29uc3QgdGV4dEFyZWEgPSBuZXcgX1RleHRBcmVhRmllbGQ8SVRleHRBcmVhRmllbGQ+KEZJRUxEX05BTUVTLlRFWFRBUkVBLCBwcm9wcyk7XG4gIHJldHVybiB0ZXh0QXJlYS5jcmVhdGUoKTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJhZGlvR3JvdXBQcm9wcyB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGNoaWxkcmVuOiBhbnk7XG59XG5cbi8qKlxuICogQHByb3BzIHtAbGluayBJUmFkaW9Hcm91cFByb3BzfVxuICogQHBhcmFtIHByb3BzIFRoZSBgUmFkaW9Hcm91cGAgY29tcG9uZW50IHRha2VzIGEgc2luZ2xlIHByb3BzIG9mIGBuYW1lYCwgd2hpY2hcbiAqIG11c3QgYmUgYSB1bmlxdWUgdG8gYSBmb3JtLiBTZWUge0BsaW5rIFJhZGlvRmllbGR9LlxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogIGltcG9ydCB7Q2hlY2tCb3hGaWVsZH0gZnJvbSBcInJlYWN0LWJhc2UtZm9ybXNcIjtcbiAqXG4gKiAgY29uc3Qgc3RhdGUgPSB7IG1hbGU6IHRydWUsIGZlbWFsZTogZmFsc2UgfTtcbiAqXG4gKiAgPFJhZGlvR3JvdXAgbmFtZT1cImdyb3VwMVwiPlxuICogICAgLy8gcGxhY2UgUmFkaW9GaWVsZHMgY29tcG9uZW50cyBoZXJlLi4uXG4gKiAgPC9SYWRpb0dyb3VwPlxuICogYGBgXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gUmFkaW9Hcm91cChwcm9wczogSVJhZGlvR3JvdXBQcm9wcykge1xuICAgIGNvbnN0IGNvbnRleHRWYWx1ZTogSVJhZGlvR3JvdXBQYXJlbnRDb250ZXh0ID0ge3BhcmVudDoge25hbWU6IHByb3BzLm5hbWV9LCBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW59O1xuICAgIHJldHVybiA8UmFkaW9Hcm91cENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZSBhcyBUeXBlUmFkaW9Hcm91cE1ldGFkYXRhfT57cHJvcHMuY2hpbGRyZW59PC9SYWRpb0dyb3VwQ29udGV4dC5Qcm92aWRlcj47XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBwcm9wcyB7QGxpbmsgSVJhZGlvRmllbGR9XG4gKiBAY29uc3RydWN0b3JcbiAqIGBSYWRpb0ZpZWxkYCBpbnB1dHMgYXJlIGRlc2lnbmVkIHRvIGJlIHVzZWQgd2l0aCB0aGUge0BsaW5rIFJhZGlvR3JvdXB9IGNvbXBvbmVudC5cbiAqICBUbyB1c2UgdGhpcyBjb21wb25lbnQsIGFkZCBvciBuZXN0IGl0IHdpdGhpbiBhIHtAbGluayBSYWRpb0dyb3VwfSBjb21wb25lbnQgYXMgY2hpbGRyZW4uXG4gKiAgSXQncyBwb3NzaWJsZSB0byBhbHNvIHVzZSB2YWxpZGF0b3JzIHdpdGggYSBSYWRpb0dyb3VwLCBhcyBzaG93biBiZWxvdzpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqICBpbXBvcnQge2lzUmFkaW9DaGVja2VkLCBSYWRpb0ZpZWxkLCBSYWRpb0dyb3VwfSBmcm9tIFwicmVhY3QtYmFzZS1mb3Jtc1wiO1xuICpcbiAqICBjb25zdCBzdGF0ZSA9IHsgbWFsZTogdHJ1ZSwgZmVtYWxlOiBmYWxzZSB9O1xuICpcbiAqICA8UmFkaW9Hcm91cCBuYW1lPVwiZ3JvdXAxXCI+XG4gKiAgICA8UmFkaW9GaWVsZFxuICogICAgICBuYW1lPVwibWFsZVwiXG4gKiAgICAgIGNoZWNrZWQ9e3N0YXRlLm1hbGV9XG4gKiAgICAgIGhpbnQ9XCJDbGljayB0byBhZ3JlZVwiXG4gKiAgICAgIGxhYmVsdGV4dD1cIkFncmVlIHRvIHRlcm1zICYgY29uZGl0aW9uc1wiXG4gKiAgICAvPlxuICpcbiAqICAgIDxSYWRpb0ZpZWxkXG4gKiAgICAgIG5hbWU9XCJmZW1hbGVcIlxuICogICAgICBjaGVja2VkPXtzdGF0ZS5mZW1hbGV9XG4gKiAgICAgIGhpbnQ9XCJDbGljayB0byBhZ3JlZVwiXG4gKiAgICAgIGxhYmVsdGV4dD1cIkFncmVlIHRvIHRlcm1zICYgY29uZGl0aW9uc1wiXG4gKiAgICAgIHZhbGlkYXRvcnM9e1tpc1JhZGlvQ2hlY2tlZCgpXX1cbiAqICAgIC8+XG4gKlxuICogIDwvUmFkaW9Hcm91cD5cbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgUmFkaW9GaWVsZCA9IChwcm9wczogSVJhZGlvRmllbGQpID0+IHtcbiAgICBjb25zdCByYWRpbyA9IG5ldyBfUmFkaW9GaWVsZChGSUVMRF9OQU1FUy5SQURJTywgcHJvcHMpO1xuICAgIHJldHVybiByYWRpby5jcmVhdGUoKTtcbn07XG5cbi8qKlxuICogQSBjb21wb25lbnQgdG8gcmVuZGVyIGEgc2VsZWN0IGZpZWxkIGVsZW1lbnQuXG4gKiBAcGFyYW0gcHJvcHMge0BsaW5rIElTZWxlY3RGaWVsZH1cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogIGltcG9ydCB7U2VsZWN0RmllbGR9IGZyb20gXCJyZWFjdC1iYXNlLWZvcm1zXCI7XG4gKlxuICogIGNvbnN0IHN0YXRlID0geyBmcnVpdENob2ljZTogXCJcIiB9O1xuICpcbiAqIDxTZWxlY3RGaWVsZFxuICogICBzaXplPVwibGdcIlxuICogICB2YWx1ZT17c3RhdGUuZnJ1aXRDaG9pY2V9XG4gKiAgIG5hbWU9XCJmcnVpdENob2ljZVwiXG4gKiAgIG9wdGlvbnM9e1tcImJhbmFuYVwiLCBcImFwcGxlXCIsIFwib3JhbmdlXCJdfVxuICogIC8+XG4gKiBgYGBcbiAqXG4gKiBZb3UgY2FuIGFsc28gcGFzcyBhbiBhcnJheSBvZiBvYmplY3RzIGJ1dCB5b3UgbXVzdCB1c2UgYm90aCB0aGVcbiAqICpvYmplY3RLZXkqICYgKm9iamVjdHZhbHVlKiBwcm9wcy4gdGhlIGBvYmplY3RLZXlgIHdpbGwgdXBkYXRlIHlvdXIgc3RhdGVcbiAqIHZhbHVlICYgdGhlIGBvYmplY3R2YWx1ZWAgaXMgd2hhdCBpcyBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIgYXMgYW4gb3B0aW9uLlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogLy8gVGhpcyBpcyB5b3VyIG9wdGlvbiBkYXRhXG4gKiBsZXQgc2VsZWN0RGF0YSA9IFtcbiAqICAge2lkOiAxLCBuYW1lOiBcImZpcnN0XCJ9LFxuICogICB7aWQ6IDIsIG5hbWU6IFwic2Vjb25kXCJ9LFxuICogXTtcbiAqIC8vIFRoZSBzdGF0ZSB3aGljaCB3aWxsIHJlY2VpdmUgdGhlIHVwZGF0ZVxuICogbGV0IHN0YXRlID0ge1xuICogICAgc2VsZWN0X2RhdGFfaWQ6IHVuZGVmaW5lZCBhcyBhbnksXG4gKiB9O1xuICpcbiAqIDxTZWxlY3RGaWVsZFxuICogICBzaXplPVwibGdcIlxuICogICB2YWx1ZT17c3RhdGUuc2VsZWN0X2RhdGFfaWR9XG4gKiAgIG5hbWU9XCJmcnVpdENob2ljZVwiXG4gKiAgIG9iamVjdGtleT1cImlkXCIgLy8gVmFsdWUgd2lsbCB1cGRhdGUgc3RhdGUuc2VsZWN0X2RhdGFfaWQgZS5nICoxLCAyLi4uKlxuICogICBvYmplY3R2YWx1ZT1cIm5hbWVcIiAvLyBWYWx1ZSB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgc2VsZWN0IGZpZWxkIGUuZyAqZmlyc3QsIHNlY29uZC4uLipcbiAqICAgb3B0aW9ucz17c2VsZWN0RGF0YX1cbiAqIC8+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdEZpZWxkID0gKHByb3BzOiBJU2VsZWN0RmllbGQpID0+IHtcbiAgICBjb25zdCBzZWxlY3QgPSBuZXcgX1NlbGVjdEZpZWxkKEZJRUxEX05BTUVTLlNFTEVDVCwgcHJvcHMpO1xuICAgIHJldHVybiBzZWxlY3QuY3JlYXRlKCk7XG59O1xuXG4vKipcbiAqIFRoZSBTdWJtaXRCdXR0b24gb25seSByZXF1aXJlcyBhIHRleHQgc3RyaW5nIGFzIGNoaWxkcmVuIHByb3BzIChzZWUgYmVsb3cgZXhhbXBsZSkuXG4gKiBUaGUgU3VibWl0QnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQgdW50aWwgYWxsIGZvcm0gZmllbGRzIGFyZSB2YWxpZGF0ZWQuXG4gKiBAcGFyYW0gcHJvcHMge0BsaW5rIElTdWJtaXRCdXR0b25Qcm9wc31cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHtTdWJtaXRCdXR0b259IGZyb20gXCJyZWFjdC1iYXNlLWZvcm1zXCI7XG4gKlxuICogPFN1Ym1pdEJ1dHRvbj5TdWJtaXQ8L1N1Ym1pdEJ1dHRvbj5cbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgRmlsZUZpZWxkID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHM6IElGaWxlRmllbGQsIHJlZjogUmVhY3QuUmVmT2JqZWN0PEhUTUxGb3JtRWxlbWVudD58YW55KSA9PiB7XG4gICAgbGV0IF9wcm9wcyA9IHsuLi5wcm9wcywgcmVmIH07XG4gICAgY29uc3QgZmlsZSA9IG5ldyBfRmlsZUZpZWxkPElGaWxlRmllbGQ+KEZJRUxEX05BTUVTLkZJTEUsIF9wcm9wcyk7XG4gICAgcmV0dXJuIGZpbGUuY3JlYXRlKCk7XG59KTtcblxuXG5leHBvcnQgY29uc3QgU3VibWl0QnV0dG9uID0gbmV3IF9TdWJtaXRCdXR0b24oKS5jcmVhdGUoKTtcbiIsIi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFBSSVZBVEUgU0VSVklDRSBDTEFTU0VTIFRPIENSRUFURSBNRVRBREFUQSBPQkpFQ1RTXG4vLyAgMS4gQWJzdHJhY3RNZXRhZGF0YVxuLy8gIDIuIE1ldGFkYXRhXG4vLyAgMy4gTWV0YWRhdGFHcm91cFxuLy9cbi8vICBJTVBPUlRBTlQ6IE9iamVjdHMgdGhhdCBpbXBsZW1lbnQgQWJzdHJhY3RNZXRhZGF0YSBETyBOT1QgY2FyZSBhYm91dCB0aGUgSUZvcm1Db250ZXh0LlxuLy8gIElNUE9SVEFOVDogTWV0YWRhdGEgb2JqZWN0cyBvbmx5IGNhcmUgYWJvdXQgdGhlaXIgb3duIElNZXRhZGF0YSBzdGF0ZSB0eXBlIChzZWUgTUVUQURBVEFfTkFNRVMpLlxuLy8gIElNUE9SVEFOVDogQ2hpbGRyZW4gb2JqZWN0cyBvZiBNZXRhZGF0YUdyb3VwIGNhcmUgYWJvdXQgdGhlaXIgcGFyZW50TmFtZSAmIHRoZWlyIG93biBzdGF0ZSB0eXBlIG9ubHkuXG5pbXBvcnQge01FVEFEQVRBX05BTUVTfSBmcm9tIFwiLi4vZm9ybVwiO1xuaW1wb3J0IHtJVmFsaWRhdGlvbn0gZnJvbSBcIi4uL3ZhbGlkYXRvcnNcIjtcbmltcG9ydCB7RklFTERfTkFNRVN9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuXG4vKiogQGludGVybmFsICoqL1xuZXhwb3J0IGludGVyZmFjZSBJTWV0YWRhdGE8VD4ge1xuICAgIHN0YXRlOiB7W2s6IHN0cmluZ106IFR9O1xuICAgIHJlYWRvbmx5IHVwZGF0ZVN0YXRlOiBGdW5jdGlvbjtcbiAgICByZWFkb25seSBtZXRhVHlwZTogc3RyaW5nO1xuICAgIGZpZWxkVHlwZTogRklFTERfTkFNRVM7XG4gICAgcGFyZW50TmFtZT86IHN0cmluZztcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gICAgZGVmYXVsdFN0YXRlOiB7fTtcbiAgICBpbml0OiAobmFtZTogc3RyaW5nLCBmaWVsZFR5cGU6IEZJRUxEX05BTUVTKSA9PiB2b2lkO1xuICAgIHVwZGF0ZTogKHByb3BzOiBhbnksIHZhbGlkYXRpb246IEFycmF5PElWYWxpZGF0aW9uPikgPT4gdm9pZDtcbn1cblxuLyoqIEBpbnRlcm5hbCAqKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdE1ldGFkYXRhPFQ+IGltcGxlbWVudHMgSU1ldGFkYXRhPFQ+IHtcbiAgICBwdWJsaWMgc3RhdGU6IHtbazogc3RyaW5nXTogVH07XG4gICAgcHVibGljIHJlYWRvbmx5IHVwZGF0ZVN0YXRlOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWV0YVR5cGU6IE1FVEFEQVRBX05BTUVTO1xuICAgIHB1YmxpYyBwYXJlbnROYW1lPzogc3RyaW5nO1xuICAgIHByaXZhdGUgX2ZpZWxkVHlwZT86IEZJRUxEX05BTUVTO1xuICAgIHByaXZhdGUgX25hbWU/OiBzdHJpbmc7XG4gICAgcHVibGljIGFic3RyYWN0IGRlZmF1bHRTdGF0ZTogVDtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihzdGF0ZToge1trOiBzdHJpbmddOiBUfSwgdXBkYXRlU3RhdGU6IEZ1bmN0aW9uLCBtZXRhVHlwZTogTUVUQURBVEFfTkFNRVMpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlID0gdXBkYXRlU3RhdGU7XG4gICAgICAgIHRoaXMubWV0YVR5cGUgPSBtZXRhVHlwZTtcbiAgICB9XG5cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWUgYXMgc3RyaW5nO1xuICAgIH1cblxuICAgIHNldCBuYW1lKHZhbDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSB2YWw7XG4gICAgfVxuXG4gICAgZ2V0IGZpZWxkVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpZWxkVHlwZSBhcyBhbnk7XG4gICAgfVxuXG4gICAgc2V0IGZpZWxkVHlwZSh2YWw6IEZJRUxEX05BTUVTKSB7XG4gICAgICAgIHRoaXMuX2ZpZWxkVHlwZSA9IHZhbDtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBpbml0KG5hbWU6IHN0cmluZywgZmllbGRUeXBlOiBGSUVMRF9OQU1FUyk6IHZvaWRcblxuICAgIGFic3RyYWN0IHVwZGF0ZShwcm9wczogYW55LCB2YWxpZGF0aW9uOiBBcnJheTxJVmFsaWRhdGlvbj4pOiB2b2lkO1xuXG4gICAgcHVibGljIGlzRmllbGRUb3VjaGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZih0aGlzLnN0YXRlW3RoaXMubmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5zdGF0ZVt0aGlzLm5hbWVdIGFzIGFueSkuaXNUb3VjaGVkIGFzIGJvb2xlYW4gLy8gVE9ETyBmaXggdHlwZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBSZWFjdH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge0Fic3RyYWN0RmllbGQsIElBYnN0cmFjdEZpZWxkfSBmcm9tIFwiLi9fQWJzdHJhY3RGaWVsZFwiO1xuaW1wb3J0IHtJRm9ybUNvbnRleHR9IGZyb20gXCIuLi9mb3JtXCI7XG5pbXBvcnQge0ZJRUxEX05BTUVTLCBJRmllbGQsIElGaWVsZEJhc2V9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuXG5cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIENoZWNrQm94RmllbGQ8VCBleHRlbmRzIElGaWVsZEJhc2U+IGV4dGVuZHMgQWJzdHJhY3RGaWVsZDxUPiBpbXBsZW1lbnRzIElBYnN0cmFjdEZpZWxkPFQ+IHtcblxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IEZJRUxEX05BTUVTLCBwcm9wczogVCkge1xuICAgICAgICBzdXBlcihwcm9wcywgdHlwZSk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGaWVsZCh0aGlzLmdldEZpZWxkKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtR3JvdXAoY2hpbGRyZW46IGFueSk6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXAgZm9ybS1jaGVja1wiPlxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5sYWJlbHRleHQgJiYgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tY2hlY2stbGFiZWxcIj57dGhpcy5wcm9wcy5sYWJlbHRleHR9PC9sYWJlbD59XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuaGludCAmJiA8c21hbGwgY2xhc3NOYW1lPVwiZm9ybS10ZXh0IHRleHQtbXV0ZWRcIj57dGhpcy5wcm9wcy5oaW50fTwvc21hbGw+fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZpZWxkKCkge1xuICAgICAgICByZXR1cm4gKCkgPT4gKDw+ezxpbnB1dFxuICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgICAgICAgIHR5cGU9e3RoaXMudHlwZX1cbiAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLmdldFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleSgpW3RoaXMucHJvcHMubmFtZV0gfHwgZmFsc2V9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiAodGhpcy5jb250ZXh0IGFzIGFueSkudXBkYXRlUGFyZW50U3RhdGUodGhpcy5vdmVycmlkZUV2ZW50KGUsIHRoaXMuZ2V0U3RhdGVQb3NpdGlvbkZyb21Gb3JtS2V5KClbdGhpcy5wcm9wcy5uYW1lXSksIHRoaXMucHJvcHMubmFtZSl9XG4gICAgICAgICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17QWJzdHJhY3RGaWVsZC5tZXJnZURlZmF1bHRDc3NXaXRoUHJvcHMoXCJmb3JtLWNoZWNrLWlucHV0XCIsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCAodGhpcy5jb250ZXh0IGFzIGFueSkuYmFyZSl9XG4gICAgICAgIC8+fTwvPik7XG4gICAgfVxufVxuXG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3R9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtfZ2VuZXJpY0Zvcm1Hcm91cCwgQWJzdHJhY3RGaWVsZCwgSUFic3RyYWN0RmllbGR9IGZyb20gXCIuL19BYnN0cmFjdEZpZWxkXCI7XG5pbXBvcnQge0ZJRUxEX05BTUVTLCBJRmllbGQsIElGaWxlRmllbGR9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuaW1wb3J0IHtjcmVhdGVGaWxlT2JqZWN0LCBJRmlsZX0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogVGhlIG1haW4gZGlmZmVyZW5jZSBvZiB0aGlzIGNsYXNzIGlzIHRoYXQgdGhlIG9uQ2hhbmdlIGV2ZW50IGlzIHVzZWQgb25seVxuICogdG8gY2Fycnkgb3V0IHRoZSB2YWxpZGF0aW9uICh3aGljaCBpcyBzZXQgbWFudWFsbHkgaW4gRmlsZUZpZWxkLl91cGRhdGVGaWVsZFZhbGlkYXRpb24pLlxuICovXG5leHBvcnQgY2xhc3MgRmlsZUZpZWxkPFQgZXh0ZW5kcyBJRmllbGQ8SFRNTElucHV0RWxlbWVudD4+IGV4dGVuZHMgQWJzdHJhY3RGaWVsZDxUPiBpbXBsZW1lbnRzIElBYnN0cmFjdEZpZWxkPFQ+IHtcblxuICAgIF9maWxlPzogSUZpbGV8bnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IEZJRUxEX05BTUVTLCBwcm9wczogVCAmIElGaWxlRmllbGQpIHtcbiAgICAgICAgc3VwZXIocHJvcHMsIHR5cGUpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgfVxuXG4gICAgZ2V0IGZpbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWxlIGFzIElGaWxlfG51bGw7XG4gICAgfVxuXG4gICAgc2V0IGZpbGUodmFsOiBJRmlsZXxudWxsKSB7XG4gICAgICAgIHRoaXMuX2ZpbGUgPSB2YWw7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRmllbGQodGhpcy5nZXRGaWVsZCgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZm9ybUdyb3VwKGNoaWxkcmVuOiBhbnkpOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gX2dlbmVyaWNGb3JtR3JvdXA8VD4odGhpcy5wcm9wcywgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRGaWVsZCgpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IDw+ezxpbnB1dFxuICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICByZWY9eyh0aGlzLnByb3BzIGFzIGFueSkucmVmfVxuICAgICAgICAgICAgdHlwZT17dGhpcy50eXBlfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuX3VwZGF0ZUZpZWxkVmFsaWRhdGlvbi5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtBYnN0cmFjdEZpZWxkLm1lcmdlRGVmYXVsdENzc1dpdGhQcm9wcyhcImZvcm0tY29udHJvbC1maWxlXCIsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCAodGhpcy5jb250ZXh0IGFzIGFueSkuYmFyZSl9XG4gICAgICAgIC8+fTwvPjtcbiAgICB9XG5cbiAgICBwcml2YXRlIF91cGRhdGVGaWVsZFZhbGlkYXRpb24gPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuZmlsZSA9IGNyZWF0ZUZpbGVPYmplY3QoKHRoaXMucHJvcHMgYXMgYW55KS5yZWYpO1xuICAgICAgICBpZih0eXBlb2YgdGhpcy5maWxlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogQHBhcmFtIF9cbiAgICAgKiBAZGVzY3JpcHRpb24gVGhpcyBvdmVycmlkZXMgdGhlIHNhbWUgYmVoYXZpb3VyIGluIHRoZSBwYXJlbnROYW1lIGNsYXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGaWVsZFZhbHVlKF86IHVua25vd24pOiBhbnkge1xuICAgICAgICBpZigodGhpcy5wcm9wcyBhcyBUICYgSUZpbGVGaWVsZCkucmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVGaWxlT2JqZWN0KCh0aGlzLnByb3BzIGFzIFQgJiBJRmlsZUZpZWxkKS5yZWYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7Q2hhbmdlRXZlbnQsIGRlZmF1bHQgYXMgUmVhY3QsIFJlYWN0RWxlbWVudH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7Rm9ybUNvbnRleHQsIElGb3JtQ29udGV4dCwgVHlwZUN1cnNvclBvc2l0aW9uU3RhdGV9IGZyb20gXCIuLi9mb3JtXCI7XG5pbXBvcnQge0ZJRUxEX05BTUVTLCBJRmllbGR9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuaW1wb3J0IHtfZ2VuZXJpY0Zvcm1Hcm91cCwgQWJzdHJhY3RGaWVsZCwgSUFic3RyYWN0RmllbGR9IGZyb20gXCIuL19BYnN0cmFjdEZpZWxkXCI7XG5cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIElucHV0RmllbGQ8VCBleHRlbmRzIElGaWVsZDxIVE1MSW5wdXRFbGVtZW50Pj4gZXh0ZW5kcyBBYnN0cmFjdEZpZWxkPFQ+IGltcGxlbWVudHMgSUFic3RyYWN0RmllbGQ8VD4ge1xuICAgIGNvbnN0cnVjdG9yKHR5cGU6IEZJRUxEX05BTUVTLCBwcm9wczogVCkge1xuICAgICAgICBzdXBlcihwcm9wcywgdHlwZSk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGaWVsZCh0aGlzLmdldEZpZWxkKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtR3JvdXAoY2hpbGRyZW46IGFueSk6IFJlYWN0RWxlbWVudCB7XG4gICAgICAgIHJldHVybiBfZ2VuZXJpY0Zvcm1Hcm91cDxUPih0aGlzLnByb3BzLCBjaGlsZHJlbik7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGhhbmRsZU9uQ2hhbmdlID0gKGU6IENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+LCBjdXJzb3JQb3NpdGlvbnM6IFR5cGVDdXJzb3JQb3NpdGlvblN0YXRlLCB1cGRhdGVDdXJzb3JQb3NpdGlvblN0YXRlOiBhbnkpID0+IHtcbiAgICAgICAgdXBkYXRlQ3Vyc29yUG9zaXRpb25TdGF0ZSh0aGlzLnByb3BzLm5hbWUsIGUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0IGFzIG51bWJlcik7XG4gICAgICAgICh0aGlzLmNvbnRleHQgYXMgYW55KS51cGRhdGVQYXJlbnRTdGF0ZShlLCB0aGlzLnByb3BzLm5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRGaWVsZCgpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IDxGb3JtQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAgICAgIHsoeyBjdXJzb3JQb3NpdGlvbnMsIHVwZGF0ZUN1cnNvclBvc2l0aW9uU3RhdGUgfTogSUZvcm1Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICByZXR1cm4gPGlucHV0XG4gICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICAgICAgdHlwZT17dGhpcy50eXBlfVxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLmdldFN0YXRlUG9zaXRpb25Gcm9tRm9ybUtleSgpW3RoaXMucHJvcHMubmFtZV18fCBcIlwifVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5oYW5kbGVPbkNoYW5nZShlLCBjdXJzb3JQb3NpdGlvbnMsIHVwZGF0ZUN1cnNvclBvc2l0aW9uU3RhdGUpfVxuICAgICAgICAgICAgICAgIG9uS2V5VXA9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgIT09IEZJRUxEX05BTUVTLkVNQUlMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuc2VsZWN0aW9uU3RhcnQgPSBjdXJzb3JQb3NpdGlvbnNbdGhpcy5wcm9wcy5uYW1lXS5jdXJzb3JQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY3VycmVudFRhcmdldC5zZWxlY3Rpb25FbmQgPSBjdXJzb3JQb3NpdGlvbnNbdGhpcy5wcm9wcy5uYW1lXS5jdXJzb3JQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17QWJzdHJhY3RGaWVsZC5tZXJnZURlZmF1bHRDc3NXaXRoUHJvcHMoXCJmb3JtLWNvbnRyb2xcIiwgdGhpcy5wcm9wcy5jbGFzc05hbWUsIHRoaXMuYmFyZSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIH19XG4gICAgICAgIDwvRm9ybUNvbnRleHQuQ29uc3VtZXI+O1xuICAgIH1cbn1cbiIsImltcG9ydCB7SUZpZWxkVmFsaWRhdGlvbiwgTUVUQURBVEFfTkFNRVN9IGZyb20gXCIuLi9mb3JtXCI7XG5pbXBvcnQge0lWYWxpZGF0aW9ufSBmcm9tIFwiLi4vdmFsaWRhdG9yc1wiO1xuaW1wb3J0IHtnZXRGaWVsZFZhbHVlVHlwZX0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RklFTERfTkFNRVN9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuaW1wb3J0IHtBYnN0cmFjdE1ldGFkYXRhfSBmcm9tIFwiLi9fQWJzdHJhY3RNZXRhZGF0YVwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5cblxuLyoqIEBpbnRlcm5hbCAqKi9cbmV4cG9ydCBjbGFzcyBNZXRhZGF0YTxUIGV4dGVuZHMgSUZpZWxkVmFsaWRhdGlvbj4gZXh0ZW5kcyBBYnN0cmFjdE1ldGFkYXRhPFQ+IHtcbiAgICBwdWJsaWMgZGVmYXVsdFN0YXRlID0ge30gYXMgYW55O1xuXG4gICAgY29uc3RydWN0b3Ioc3RhdGU6IHtbazogc3RyaW5nXTogVH0sIHVwZGF0ZVN0YXRlOiBGdW5jdGlvbiwgdHlwZTogTUVUQURBVEFfTkFNRVMpIHtcbiAgICAgICBzdXBlcihzdGF0ZSwgdXBkYXRlU3RhdGUsIHR5cGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0KG5hbWU6IHN0cmluZywgZmllbGRUeXBlOiBGSUVMRF9OQU1FUyk6IHZvaWQge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmZpZWxkVHlwZSA9IGZpZWxkVHlwZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlKHZhbHVlOiBhbnksIHZhbGlkYXRpb246IEFycmF5PElWYWxpZGF0aW9uPik6IHZvaWQge1xuICAgICAgICBsZXQgc3RhdGU6IHtbazogc3RyaW5nXTogSUZpZWxkVmFsaWRhdGlvbn07XG4gICAgICAgIGlmKCEodGhpcy5uYW1lIGluIHRoaXMuc3RhdGUpKXtcbiAgICAgICAgICAgIHN0YXRlID0ge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUsXG4gICAgICAgICAgICAgICAgW3RoaXMubmFtZV06IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBpc1RvdWNoZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZFZhbHVlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZ2V0RmllbGRWYWx1ZVR5cGUodGhpcy5maWVsZFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICB9LCBbc3RhdGVdKTtcbiAgICAgICAgfSBlbHNlIGlmKHRoaXMuc3RhdGVbdGhpcy5uYW1lXSAmJiB2YWx1ZSAhPT0gdGhpcy5zdGF0ZVt0aGlzLm5hbWVdLmZpZWxkVmFsdWVzLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgICAgICAgICAgICBbdGhpcy5uYW1lXToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkVmFsdWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBnZXRGaWVsZFZhbHVlVHlwZSh0aGlzLmZpZWxkVHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoc3RhdGUpO1xuICAgICAgICAgICAgfSwgW3N0YXRlXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0lGaWVsZFZhbGlkYXRpb24sIE1FVEFEQVRBX05BTUVTfSBmcm9tIFwiLi4vZm9ybVwiO1xuaW1wb3J0IHtJVmFsaWRhdGlvbn0gZnJvbSBcIi4uL3ZhbGlkYXRvcnNcIjtcbmltcG9ydCB7Z2V0RmllbGRWYWx1ZVR5cGUsIElGaWxlfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHtGSUVMRF9OQU1FU30gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5pbXBvcnQge0Fic3RyYWN0TWV0YWRhdGF9IGZyb20gXCIuL19BYnN0cmFjdE1ldGFkYXRhXCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcblxuXG4vKiogQGludGVybmFsICoqL1xuZXhwb3J0IGNsYXNzIE1ldGFkYXRhRmlsZTxUIGV4dGVuZHMgSUZpZWxkVmFsaWRhdGlvbj4gZXh0ZW5kcyBBYnN0cmFjdE1ldGFkYXRhPFQ+IHtcbiAgICBwdWJsaWMgZGVmYXVsdFN0YXRlID0ge30gYXMgYW55O1xuXG4gICAgY29uc3RydWN0b3Ioc3RhdGU6IHtbazogc3RyaW5nXTogVH0sIHVwZGF0ZVN0YXRlOiBGdW5jdGlvbiwgdHlwZTogTUVUQURBVEFfTkFNRVMpIHtcbiAgICAgICAgc3VwZXIoc3RhdGUsIHVwZGF0ZVN0YXRlLCB0eXBlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdChuYW1lOiBzdHJpbmcsIGZpZWxkVHlwZTogRklFTERfTkFNRVMpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5maWVsZFR5cGUgPSBmaWVsZFR5cGU7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZSh2YWx1ZTogYW55LCB2YWxpZGF0aW9uOiBBcnJheTxJVmFsaWRhdGlvbj4pOiB2b2lkIHtcbiAgICAgICAgbGV0IHN0YXRlOiB7W2s6IHN0cmluZ106IElGaWVsZFZhbGlkYXRpb259O1xuICAgICAgICBpZighKHRoaXMubmFtZSBpbiB0aGlzLnN0YXRlKSl7XG4gICAgICAgICAgICBzdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgIFt0aGlzLm5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgaXNUb3VjaGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGdldEZpZWxkVmFsdWVUeXBlKHRoaXMuZmllbGRUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZToge30sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoc3RhdGUpO1xuICAgICAgICAgICAgfSwgW3N0YXRlXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5zdGF0ZVt0aGlzLm5hbWVdKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudFZhbHVlOiBJRmlsZSA9IHRoaXMuc3RhdGVbdGhpcy5uYW1lXS5maWVsZFZhbHVlcy5jdXJyZW50VmFsdWU7XG4gICAgICAgICAgICBpZih2YWx1ZSA9PT0gbnVsbCAmJiBPYmplY3Qua2V5cyhjdXJyZW50VmFsdWUpLmxlbmd0aCB8fCB2YWx1ZSAmJiB2YWx1ZS5uYW1lICE9PSBjdXJyZW50VmFsdWUubmFtZSkge1xuICAgICAgICAgICAgICAgIHN0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBbdGhpcy5uYW1lXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkVmFsdWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZ2V0RmllbGRWYWx1ZVR5cGUodGhpcy5maWVsZFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZTogdmFsdWUgfHwge30sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0lSYWRpb0dyb3VwUGFyZW50Q29udGV4dCwgTUVUQURBVEFfTkFNRVN9IGZyb20gXCIuLi9mb3JtXCI7XG5pbXBvcnQge0lWYWxpZGF0aW9ufSBmcm9tIFwiLi4vdmFsaWRhdG9yc1wiO1xuaW1wb3J0IHtnZXRGaWVsZFZhbHVlVHlwZX0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RklFTERfTkFNRVN9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuaW1wb3J0IHtBYnN0cmFjdE1ldGFkYXRhfSBmcm9tIFwiLi9fQWJzdHJhY3RNZXRhZGF0YVwiO1xuaW1wb3J0IHtUeXBlTWV0YWRhdGFSYWRpb0dyb3VwVmFsdWV9IGZyb20gXCIuLi9maWVsZF9jbGFzc2VzL19SYWRpb0ZpZWxkXCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcblxuXG4vKiogQGludGVybmFsICoqL1xuZXhwb3J0IGNsYXNzIE1ldGFkYXRhR3JvdXA8VD4gZXh0ZW5kcyBBYnN0cmFjdE1ldGFkYXRhPFQ+IHtcbiAgICBwdWJsaWMgZGVmYXVsdFN0YXRlID0ge30gYXMgVDtcbiAgICBwdWJsaWMgcGFyZW50TmFtZT86IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHN0YXRlOiB7W2s6IHN0cmluZ106IFR9LCB1cGRhdGVTdGF0ZTogRnVuY3Rpb24sIHR5cGU6IE1FVEFEQVRBX05BTUVTKSB7XG4gICAgICAgIHN1cGVyKHN0YXRlLCB1cGRhdGVTdGF0ZSwgdHlwZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXQobmFtZTogc3RyaW5nLCBmaWVsZFR5cGU6IEZJRUxEX05BTUVTKTogdm9pZCB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuZmllbGRUeXBlID0gZmllbGRUeXBlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBjdXJyZW50XG4gICAgICogQHBhcmFtIHZhbGlkYXRpb25cbiAgICAgKiBAcGFyYW0gaXNUb3VjaGVkIHtCb29sZWFufSAtIFNldCB0aGlzIHRvIGZhbHNlIG9uIGluaXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgX2NyZWF0ZUdyb3VwU3RhdGUoY3VycmVudDogVHlwZU1ldGFkYXRhUmFkaW9Hcm91cFZhbHVlLCB2YWxpZGF0aW9uOiBBcnJheTxJVmFsaWRhdGlvbj4sIGlzVG91Y2hlZD10cnVlKTogSVJhZGlvR3JvdXBQYXJlbnRDb250ZXh0IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUsXG4gICAgICAgICAgICBbY3VycmVudC5wYXJlbnROYW1lXToge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuc3RhdGVbY3VycmVudC5wYXJlbnROYW1lXSxcbiAgICAgICAgICAgICAgICBbdGhpcy5uYW1lXToge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN1cnJlbnQucGFyZW50TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB2YWxpZGF0aW9uIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgICBpc1RvdWNoZWQsXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkVmFsdWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBnZXRGaWVsZFZhbHVlVHlwZSh0aGlzLmZpZWxkVHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3VycmVudC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHVibGljIHVwZGF0ZShjdXJyZW50OiBUeXBlTWV0YWRhdGFSYWRpb0dyb3VwVmFsdWUsIHZhbGlkYXRpb246IEFycmF5PElWYWxpZGF0aW9uPik6IHZvaWQge1xuICAgICAgICBsZXQgc3RhdGUgPSB7fTtcbiAgICAgICAgaWYoIXRoaXMuc3RhdGVbY3VycmVudC5wYXJlbnROYW1lXSkge1xuICAgICAgICAgICAgc3RhdGUgPSB0aGlzLl9jcmVhdGVHcm91cFN0YXRlKGN1cnJlbnQsIHZhbGlkYXRpb24sIGZhbHNlKTtcbiAgICAgICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmKHRoaXMuc3RhdGVbY3VycmVudC5wYXJlbnROYW1lXSAmJiAhKHRoaXMubmFtZSBpbiB0aGlzLnN0YXRlW2N1cnJlbnQucGFyZW50TmFtZV0pKSB7XG4gICAgICAgICAgICAvLyBGb3IgcmVhZGFiaWxpdHkgLSBrZWVwIHRoaXMgY2xhdXNlICYgdGhlIG5leHQsIHNlcGFyYXRlIHBsZWFzZVxuICAgICAgICAgICAgc3RhdGUgPSB0aGlzLl9jcmVhdGVHcm91cFN0YXRlKGN1cnJlbnQsIHZhbGlkYXRpb24pO1xuICAgICAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHN0YXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYoKHRoaXMuc3RhdGVbY3VycmVudC5wYXJlbnROYW1lXSBhcyBhbnkpW3RoaXMubmFtZV0gJiZcbiAgICAgICAgICAgICh0aGlzLnN0YXRlW2N1cnJlbnQucGFyZW50TmFtZV0gYXMgYW55KVt0aGlzLm5hbWVdLmZpZWxkVmFsdWVzLnZhbHVlICE9PSBjdXJyZW50LnZhbHVlKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IHRoaXMuX2NyZWF0ZUdyb3VwU3RhdGUoY3VycmVudCwgdmFsaWRhdGlvbik7XG4gICAgICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoc3RhdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgaXNGaWVsZFRvdWNoZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBwYXJlbnRTdGF0ZSA9ICh0aGlzLnN0YXRlKTtcbiAgICAgICAgaWYocGFyZW50U3RhdGUpIHtcbiAgICAgICAgICAgIGlmKHRoaXMucGFyZW50TmFtZSAmJiB0aGlzLm5hbWUgJiYgdGhpcy5zdGF0ZVt0aGlzLnBhcmVudE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1ldGFHcm91cCA9ICh0aGlzLnN0YXRlW3RoaXMucGFyZW50TmFtZV0gYXMgYW55KVt0aGlzLm5hbWUgYXMga2V5b2YgVF07XG4gICAgICAgICAgICAgICAgaWYobWV0YUdyb3VwKSByZXR1cm4gbWV0YUdyb3VwLmlzVG91Y2hlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIFJlYWN0LCB1c2VDb250ZXh0fSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7QWJzdHJhY3RGaWVsZCwgSUFic3RyYWN0RmllbGR9IGZyb20gXCIuL19BYnN0cmFjdEZpZWxkXCI7XG5pbXBvcnQge0ZJRUxEX05BTUVTLCBJUmFkaW9GaWVsZH0gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5pbXBvcnQge0lGb3JtQ29udGV4dCwgSVJhZGlvR3JvdXBQYXJlbnRDb250ZXh0LCBSYWRpb0dyb3VwQ29udGV4dCwgVHlwZUZpZWxkVmFsdWVUeXBlc30gZnJvbSBcIi4uL2Zvcm1cIjtcbmltcG9ydCB7SVZhbGlkYXRpb259IGZyb20gXCIuLi92YWxpZGF0b3JzXCI7XG5pbXBvcnQge2dldEZpZWxkVmFsdWVUeXBlfSBmcm9tIFwiLi4vY29yZVwiO1xuXG5leHBvcnQgdHlwZSBUeXBlTWV0YWRhdGFSYWRpb0dyb3VwVmFsdWUgPSB7IHZhbHVlOiBib29sZWFuLCBwYXJlbnROYW1lOiBzdHJpbmcsIG5hbWU6IHN0cmluZyB9O1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgUmFkaW9GaWVsZDxUIGV4dGVuZHMgSVJhZGlvRmllbGQ+IGV4dGVuZHMgQWJzdHJhY3RGaWVsZDxUPiBpbXBsZW1lbnRzIElBYnN0cmFjdEZpZWxkPFQ+IHtcbiAgICBwcml2YXRlIF9fcGFyZW50TmFtZT86IHN0cmluZztcbiAgICBwdWJsaWMgcHJvcHM6IGFueTtcbiAgICBwdWJsaWMgdHlwZTogYW55O1xuICAgIHB1YmxpYyByYWRpb0NvbnRleHQ/OiBJUmFkaW9Hcm91cFBhcmVudENvbnRleHQ7IC8vIFRPRE8gaWYgbW9yZSBncm91cHMgYXJlIHJlcXVpcmVkIHRoZW4gbWFrZSB0aGlzIGFic3RyYWN0XG5cbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBGSUVMRF9OQU1FUywgcHJvcHM6IFQpIHtcbiAgICAgICAgc3VwZXIocHJvcHMsIHR5cGUpO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucmFkaW9Db250ZXh0ID0gdXNlQ29udGV4dChSYWRpb0dyb3VwQ29udGV4dCkgYXMgYW55O1xuICAgICAgICBpZih0aGlzLnJhZGlvQ29udGV4dCAmJiB0aGlzLnJhZGlvQ29udGV4dC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50TmFtZSA9IHRoaXMucmFkaW9Db250ZXh0LnBhcmVudC5uYW1lO1xuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5wYXJlbnROYW1lID0gdGhpcy5wYXJlbnROYW1lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHBhcmVudE5hbWUoKTogc3RyaW5nfHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fcGFyZW50TmFtZTtcbiAgICB9XG5cbiAgICBzZXQgcGFyZW50TmFtZSh2YWw6IHN0cmluZ3x1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3BhcmVudE5hbWUgPSB2YWw7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRmllbGQodGhpcy5nZXRGaWVsZCgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZm9ybUdyb3VwKGNoaWxkcmVuOiBhbnkpOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwIGZvcm0tY2hlY2tcIj5cbiAgICAgICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMubGFiZWx0ZXh0ICYmIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWxhYmVsXCI+e3RoaXMucHJvcHMubGFiZWxUZXh0fTwvbGFiZWw+fVxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmhpbnQgJiYgPHNtYWxsIGNsYXNzTmFtZT1cImZvcm0tdGV4dCB0ZXh0LW11dGVkXCI+e3RoaXMucHJvcHMuaGludH08L3NtYWxsPn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRGaWVsZCgpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8aW5wdXRcbiAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgICAgICAgICB0eXBlPXt0aGlzLnR5cGV9XG4gICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5nZXRTdGF0ZVBvc2l0aW9uRnJvbUZvcm1LZXkoKVt0aGlzLnByb3BzLm5hbWVdIHx8IGZhbHNlfVxuICAgICAgICAgICAgICAgIG5hbWU9e3RoaXMucHJvcHMubmFtZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB0aGlzLmhhbmRsZU9uQ2hhbmdlKGUsICh0aGlzLnJhZGlvQ29udGV4dCBhcyBJUmFkaW9Hcm91cFBhcmVudENvbnRleHQpKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e0Fic3RyYWN0RmllbGQubWVyZ2VEZWZhdWx0Q3NzV2l0aFByb3BzKFwiZm9ybS1jaGVjay1pbnB1dFwiLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwgKHRoaXMuY29udGV4dCBhcyBhbnkpLmJhcmUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZU9uQ2hhbmdlID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PGFueT4sIHJhZGlvQ29udGV4dDogSVJhZGlvR3JvdXBQYXJlbnRDb250ZXh0KSA9PiB7XG4gICAgICAgIGxldCBldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTEZvcm1FbGVtZW50PiA9IHRoaXMub3ZlcnJpZGVFdmVudChlLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICh0aGlzLmNvbnRleHQgYXMgYW55KS51cGRhdGVSYWRpb0dyb3VwU3RhdGVGcm9tUGFzc2VkSW5Db250ZXh0KGV2ZW50LCB0aGlzLnByb3BzLm5hbWUsIHJhZGlvQ29udGV4dCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBwcm9wc1xuICAgICAqIEBkZXNjcmlwdGlvbiBUaGlzIGlzIHNvIHRoYXQgYm90aCBjbGFzcyBjb21wb25lbnRzICYgaG9vayBiYXNlZFxuICAgICAqIGNvbXBvbmVudHMgZ2V0IHVwZGF0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vam9lZ2FzZXdpY3ovcmVhY3QtYmFyZS1mb3Jtcy9pc3N1ZXMvMTAwLlxuICAgICAqIFRoZSBBYnN0cmFjdEZpZWxkJ3MgZ2V0RmllbGRWYWx1ZSBpbXBsZW1lbnRhdGlvbiBkaWZmZXJzIGJlY2F1c2UgdGhlIHZhbHVlIG9mXG4gICAgICogdGhlIGZvcm0gZWxlbWVudCBjYW4gYmUgZGVyaXZlZCBkaXJlY3RseSBmcm9tIHByb3BzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGaWVsZFZhbHVlKHByb3BzOiBUKTogYW55IHtcbiAgICAgICAgY29uc3QgZm9ybUtleSA9IHRoaXMuY29udGV4dD8uZm9ybUtleTtcbiAgICAgICAgaWYgKGZvcm1LZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQ/LnN0YXRlW2Zvcm1LZXldW3RoaXMucHJvcHMubmFtZV0gfHwgZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dD8uc3RhdGVbdGhpcy5wcm9wcy5uYW1lXSB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdmFsaWRhdGUoKTogQXJyYXk8SVZhbGlkYXRpb24+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXRGaWVsZFZhbHVlKHRoaXMucHJvcHMpO1xuICAgICAgICAvLyBDYXJyeSBvdXQgdGhlIHZhbGlkYXRpb25cbiAgICAgICAgbGV0IHZhbGlkYXRpb24gPSB0aGlzLmRvVmFsaWRhdGlvbih2YWx1ZSk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgbWV0YWRhdGEgdHlwZSBzdGF0ZVxuICAgICAgICB0aGlzLm1ldGFkYXRhLnVwZGF0ZSh7IHZhbHVlLCBwYXJlbnROYW1lOiB0aGlzLnBhcmVudE5hbWUsIG5hbWU6IHRoaXMucHJvcHMubmFtZX0gYXMgVHlwZU1ldGFkYXRhUmFkaW9Hcm91cFZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb247XG4gICAgfVxuXG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3R9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQge19nZW5lcmljRm9ybUdyb3VwLCBBYnN0cmFjdEZpZWxkLCBJQWJzdHJhY3RGaWVsZH0gZnJvbSBcIi4vX0Fic3RyYWN0RmllbGRcIjtcbmltcG9ydCB7RklFTERfTkFNRVMsIElGaWVsZCwgSUZpZWxkQmFzZSwgSVNlbGVjdEZpZWxkLCBUeXBlU2VsZWN0Q3NzU2l6ZU5hbWV9IGZyb20gXCIuLi9lbGVtZW50c1wiO1xuXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBTZWxlY3RGaWVsZDxUIGV4dGVuZHMgSUZpZWxkQmFzZSAmIElTZWxlY3RGaWVsZD4gZXh0ZW5kcyBBYnN0cmFjdEZpZWxkPFQ+IGltcGxlbWVudHMgSUFic3RyYWN0RmllbGQ8VD4ge1xuXG4gICAgY29uc3RydWN0b3IodHlwZTogRklFTERfTkFNRVMsIHByb3BzOiBUKSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCB0eXBlKTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUZpZWxkKHRoaXMuZ2V0RmllbGQoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGZvcm1Hcm91cChjaGlsZHJlbjogYW55KTogUmVhY3QuUmVhY3RFbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIF9nZW5lcmljRm9ybUdyb3VwPFQ+KHRoaXMucHJvcHMsIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRPcHRpb25zKG9wdGlvbnM6IEFycmF5PGFueT4gPSBbXSkge1xuICAgICAgICBpZih0aGlzLnByb3BzLm9iamVjdGtleSAmJiB0aGlzLnByb3BzLm9iamVjdHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5tYXAoKG9wdFZhbDogc3RyaW5nLCBpOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPG9wdGlvbiB2YWx1ZT17b3B0VmFsW3RoaXMucHJvcHMub2JqZWN0a2V5IGFzIGFueV19IGtleT17aX1cbiAgICAgICAgICAgICAgICA+e29wdFZhbFt0aGlzLnByb3BzLm9iamVjdHZhbHVlIGFzIGFueV19PC9vcHRpb24+XG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMubWFwKChvcHRWYWw6IHN0cmluZywgaTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxvcHRpb24gdmFsdWU9e29wdFZhbH0ga2V5PXtpfT57b3B0VmFsfTwvb3B0aW9uPlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRGaWVsZCgpIHtcbiAgICAgICAgY29uc3Qge29wdGlvbnMgPSBbXSwgc2l6ZSA9IFwiZGVmYXVsdFwifSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHNlbGVjdERhdGEgPSB0aGlzLl9nZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICAgICAgICAgIHsuLi4odGhpcy5wcm9wcyBhcyBhbnkpfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+ICh0aGlzLmNvbnRleHQgYXMgYW55KS51cGRhdGVQYXJlbnRTdGF0ZShlLCB0aGlzLnByb3BzLm5hbWUpfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPXt0aGlzLnByb3BzLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17QWJzdHJhY3RGaWVsZC5tZXJnZURlZmF1bHRDc3NXaXRoUHJvcHModGhpcy5nZXRTZWxlY3RDc3NOYW1lKCh0aGlzLnByb3BzIGFzIGFueSkuc2l6ZSksIHRoaXMucHJvcHMuY2xhc3NOYW1lLCAodGhpcy5jb250ZXh0IGFzIGFueSkuYmFyZSl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7c2VsZWN0RGF0YSA/IHNlbGVjdERhdGE6IG51bGx9XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRTZWxlY3RDc3NOYW1lKG5hbWU6IFR5cGVTZWxlY3RDc3NTaXplTmFtZSkge1xuICAgICAgICBpZihuYW1lID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC0ke25hbWV9YDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBSZWFjdCwgUmVhY3RFbGVtZW50fSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7X2dlbmVyaWNGb3JtR3JvdXAsIEFic3RyYWN0RmllbGQsIElBYnN0cmFjdEZpZWxkfSBmcm9tIFwiLi9fQWJzdHJhY3RGaWVsZFwiO1xuaW1wb3J0IHtGSUVMRF9OQU1FUywgSUZpZWxkLCBJVGV4dEFyZWFGaWVsZH0gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5pbXBvcnQge0lGb3JtQ29udGV4dH0gZnJvbSBcIi4uL2Zvcm1cIjtcbmltcG9ydCB7bWVyZ2VEZWZhdWx0Q3NzV2l0aFByb3BzfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgVGV4dEFyZWFGaWVsZDxUIGV4dGVuZHMgSVRleHRBcmVhRmllbGQ+IGV4dGVuZHMgQWJzdHJhY3RGaWVsZDxUPiBpbXBsZW1lbnRzIElBYnN0cmFjdEZpZWxkPFQ+IHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBGSUVMRF9OQU1FUywgcHJvcHM6IFQgJiBJVGV4dEFyZWFGaWVsZCkge1xuICAgICAgICBzdXBlcihwcm9wcywgdHlwZSk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGaWVsZCh0aGlzLmdldEZpZWxkKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtR3JvdXAoY2hpbGRyZW46IGFueSk6IFJlYWN0RWxlbWVudCB7XG4gICAgICAgIHJldHVybiBfZ2VuZXJpY0Zvcm1Hcm91cDxUPih0aGlzLnByb3BzLCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZpZWxkKCkge1xuICAgICAgICBjb25zdCB7cm93cyA9IDV9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e21lcmdlRGVmYXVsdENzc1dpdGhQcm9wcyhcImZvcm0tY29udHJvbFwiLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwgKHRoaXMuY29udGV4dCBhcyBhbnkpLmJhcmUpfVxuICAgICAgICAgICAgICAgICAgICByb3dzPXtyb3dzfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5nZXRTdGF0ZVBvc2l0aW9uRnJvbUZvcm1LZXkoKVt0aGlzLnByb3BzLm5hbWVdIHx8IFwiXCJ9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gKHRoaXMuY29udGV4dCBhcyBhbnkpLnVwZGF0ZVBhcmVudFN0YXRlKGUsIHRoaXMucHJvcHMubmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIG5hbWU9e3RoaXMucHJvcHMubmFtZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQge01FVEFEQVRBX05BTUVTLCBUeXBlRmllbGRWYWx1ZVR5cGVzfSBmcm9tIFwiLi4vZm9ybVwiO1xuaW1wb3J0IHtGSUVMRF9OQU1FU30gZnJvbSBcIi4uL2VsZW1lbnRzXCI7XG5cblxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VEZWZhdWx0Q3NzV2l0aFByb3BzKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBjc3NQcm9wczogYW55LCBiYXJlOiBib29sZWFuKTogc3RyaW5nIHtcbiAgICBsZXQgY3NzU3RyID0gXCJcIjtcbiAgICBpZighYmFyZSkge1xuICAgICAgICBjc3NTdHIgKz0gYCR7ZGVmYXVsdFZhbHVlfSBgO1xuICAgIH1cbiAgICBpZiAoY3NzUHJvcHMpIHtcbiAgICAgICAgY3NzU3RyICs9IGAke2Nzc1Byb3BzfWA7XG4gICAgfVxuICAgIHJldHVybiBjc3NTdHI7XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXRhZGF0YU5hbWVUeXBlKHR5cGU6IEZJRUxEX05BTUVTKTogTUVUQURBVEFfTkFNRVMge1xuICAgIHN3aXRjaCh0eXBlKSB7XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuVEVYVDoge1xuICAgICAgICAgICAgcmV0dXJuIE1FVEFEQVRBX05BTUVTLklOUFVUUztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEZJRUxEX05BTUVTLkVNQUlMOiB7XG4gICAgICAgICAgICByZXR1cm4gTUVUQURBVEFfTkFNRVMuSU5QVVRTO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuUEFTU1dPUkQ6IHtcbiAgICAgICAgICAgIHJldHVybiBNRVRBREFUQV9OQU1FUy5JTlBVVFM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5URVhUQVJFQToge1xuICAgICAgICAgICAgcmV0dXJuIE1FVEFEQVRBX05BTUVTLklOUFVUUztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEZJRUxEX05BTUVTLlJBRElPOiB7XG4gICAgICAgICAgICByZXR1cm4gTUVUQURBVEFfTkFNRVMuUkFESU9fR1JPVVBTO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuQ0hFQ0tCT1g6IHtcbiAgICAgICAgICAgIHJldHVybiBNRVRBREFUQV9OQU1FUy5DSEVDS0JPWEVTO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuU0VMRUNUOiB7XG4gICAgICAgICAgICByZXR1cm4gTUVUQURBVEFfTkFNRVMuSU5QVVRTO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuRklMRToge1xuICAgICAgICAgICAgcmV0dXJuIE1FVEFEQVRBX05BTUVTLkZJTEVTO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHJldHVybiBNRVRBREFUQV9OQU1FUy5JTlBVVFM7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWVsZFZhbHVlVHlwZSh0eXBlOiBGSUVMRF9OQU1FUyk6IFR5cGVGaWVsZFZhbHVlVHlwZXMge1xuICAgIHN3aXRjaCh0eXBlKSB7XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuVEVYVDoge1xuICAgICAgICAgICAgcmV0dXJuIFwidmFsdWVcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEZJRUxEX05BTUVTLkVNQUlMOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJ2YWx1ZVwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRklFTERfTkFNRVMuUEFTU1dPUkQ6IHtcbiAgICAgICAgICAgIHJldHVybiBcInZhbHVlXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5URVhUQVJFQToge1xuICAgICAgICAgICAgcmV0dXJuIFwidmFsdWVcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEZJRUxEX05BTUVTLkNIRUNLQk9YOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJjaGVja2VkXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5TRUxFQ1Q6IHtcbiAgICAgICAgICAgIHJldHVybiBcInZhbHVlXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5GSUxFOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJmaWxlXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBGSUVMRF9OQU1FUy5SQURJTzoge1xuICAgICAgICAgICAgcmV0dXJuIFwiY2hlY2tlZFwiXG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgcmV0dXJuIFwidmFsdWVcIjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIEV4cG9ydCBSZWdleCBleHByZXNzaW9ucyBoZXJlXG5cblxuZXhwb3J0IGNvbnN0IEVNQUlMX1JFR0VYID0gL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3QsIHVzZUVmZmVjdCwgdXNlU3RhdGV9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHt1cGRhdGVSYWRpb0dyb3VwU3RhdGVGcm9tUGFzc2VkSW5Db250ZXh0LCB1cGRhdGVQYXJlbnRTdGF0ZSwgX0ZpZWxkRW1wdHlFcnJvck1zZ30gZnJvbSBcIi4vY29yZVwiO1xuaW1wb3J0IHtJVmFsaWRhdGlvbn0gZnJvbSBcIi4vdmFsaWRhdG9yc1wiO1xuaW1wb3J0IHtcbiAgICBBYnN0cmFjdE1ldGFkYXRhLFxuICAgIE1ldGFkYXRhLFxuICAgIE1ldGFkYXRhRmlsZSxcbiAgICBNZXRhZGF0YUdyb3VwLFxufSBmcm9tIFwiLi9maWVsZF9jbGFzc2VzXCI7XG5pbXBvcnQgeyBfbm9Db250ZXh0RXJyb3IgfSBmcm9tIFwiLi9jb3JlL19lcnJvcnNcIjtcbmltcG9ydCB7dXBkYXRlQ3Vyc29yUG9zQ2FsbGJhY2t9IGZyb20gXCIuL2NvcmUvX2hhbmRsZXJzXCI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB0eXBlIFR5cGVGaWVsZFZhbHVlVHlwZXMgPSBcInZhbHVlXCJ8XCJjaGVja2VkXCJ8XCJmaWxlXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgaW50ZXJmYWNlIElGaWVsZFZhbHVlcyB7XG4gICAgY3VycmVudFZhbHVlOiBhbnk7XG4gICAgcmVhZG9ubHkgdHlwZTogVHlwZUZpZWxkVmFsdWVUeXBlcztcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZpZWxkVmFsaWRhdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgIHZhbGlkYXRpb246IEFycmF5PElWYWxpZGF0aW9uPjtcbiAgICBmaWVsZFZhbHVlczogSUZpZWxkVmFsdWVzO1xuICAgIGlzVG91Y2hlZDogYm9vbGVhbjtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUlucHV0RmllbGRNZXRhZGF0YSBleHRlbmRzIElGaWVsZFZhbGlkYXRpb24ge31cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZpbGVNZXRhRGF0YSBleHRlbmRzIElGaWVsZFZhbGlkYXRpb24ge1xuICAgIHJlYWRvbmx5IHJlZk5hbWU6IHN0cmluZztcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVJhZGlvR3JvdXBDaGlsZHJlbiBleHRlbmRzIElGaWVsZFZhbGlkYXRpb24ge31cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNoZWNrQm94ZXNNZXRhZGF0YSBleHRlbmRzIElGaWVsZFZhbGlkYXRpb24ge31cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB0eXBlIFR5cGVJbnB1dE1ldGFkYXRhID0gQWJzdHJhY3RNZXRhZGF0YTxJSW5wdXRGaWVsZE1ldGFkYXRhPjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB0eXBlIFR5cGVGaWxlTWV0YWRhdGEgPSBBYnN0cmFjdE1ldGFkYXRhPElGaWxlTWV0YURhdGE+O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHR5cGUgVHlwZVJhZGlvR3JvdXBNZXRhZGF0YSA9IEFic3RyYWN0TWV0YWRhdGE8SVJhZGlvR3JvdXBDaGlsZHJlbj47XG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSBUeXBlQ2hlY2tib3hlc01ldGFkYXRhID0gQWJzdHJhY3RNZXRhZGF0YTxJQ2hlY2tCb3hlc01ldGFkYXRhPjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB0eXBlIFR5cGVGb3JtTWV0YWRhdGEgPVxuICAgIHwgVHlwZUlucHV0TWV0YWRhdGFcbiAgICB8IFR5cGVSYWRpb0dyb3VwTWV0YWRhdGFcbiAgICB8IFR5cGVDaGVja2JveGVzTWV0YWRhdGFcbiAgICB8IFR5cGVGaWxlTWV0YWRhdGE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1ldGFkYXRhIHtcbiAgICByYWRpb0dyb3VwczogVHlwZVJhZGlvR3JvdXBNZXRhZGF0YTtcbiAgICBpbnB1dHM6IFR5cGVJbnB1dE1ldGFkYXRhO1xuICAgIGZpbGVzOiBUeXBlSW5wdXRNZXRhZGF0YTtcbiAgICBjaGVja2JveGVzOiBUeXBlQ2hlY2tib3hlc01ldGFkYXRhO1xuXG59XG4vKiogQGludGVybmFsICoqL1xuZXhwb3J0IGVudW0gTUVUQURBVEFfTkFNRVMge1xuICAgIElOUFVUUyA9IFwiaW5wdXRzXCIsXG4gICAgUkFESU9fR1JPVVBTID0gXCJyYWRpb0dyb3Vwc1wiLFxuICAgIEZJTEVTID0gXCJmaWxlc1wiLFxuICAgIENIRUNLQk9YRVMgPSBcImNoZWNrYm94ZXNcIixcbn1cbi8qKlxuICogQGludGVyZmFjZSAqKklGb3JtKiogRXhwb3J0ZWQgRm9ybSBpbnRlcmZhY2UgYXZhaWxhYmxlIHRvIHRoZSBjYWxsZXIuIENvbnRhaW5zIGFsbCB0aGUgcHJvcGVydGllcyByZXF1aXJlZCBieVxuICogdGhlIEZvcm0gKlJCRiogRm9ybSdzIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRm9ybSBleHRlbmRzIFJlYWN0LkZvcm1IVE1MQXR0cmlidXRlczxIVE1MRm9ybUVsZW1lbnQ+IHtcbiAgICAvKiogVGhlIHBhc3NlZCBpbiBzdGF0ZSBmcm9tIHRoZSBwYXJlbnROYW1lIGNvbXBvbmVudCAqL1xuICAgIHN0YXRlOiBhbnk7XG4gICAgLyoqIElmIHRoZSBwYXJlbnROYW1lIGNvbXBvbmVudCBpcyBhIGNsYXNzIGNvbXBvbmVudCB0aGVuIHRoZSBjb250ZXh0IG11c3QgY29udGFpbiB0aGUgcGFyZW50TmFtZSdzICoqdGhpcyoqIGtleXdvcmQuICovXG4gICAgY29udGV4dD86IGFueTtcbiAgICAvKiogSWYgdGhlIGZvcm0ncyBzdGF0ZSBpcyBub3QgZGlyZWN0bHkgY29udGFpbmVkIGF0IHBhcmVudE5hbWUncyBzdGF0ZSByb290IG9iamVjdCwgdGhlbiBmb3JtS2V5IG5lZWRzIHRvIHJlcHJlc2VudCB0aGUga2V5LiAqL1xuICAgIHJlYWRvbmx5IGZvcm1LZXk/OiBzdHJpbmc7XG4gICAgLyoqIERlZmF1bHQgaXMgZmFsc2UuIElmIHNldCB0byB0cnVlIHRoZW4gdGhlIGZvcm0gc3RhdGUgd2lsbCBiZSBkaXNwbGF5ZWQganVzdCBiZWxvdyB0aGUgZm9ybSBjb21wb25lbnQgaW4gYGNvZGVgIHRhZ3MuICovXG4gICAgcmVhZG9ubHkgZGVidWc/OiBib29sZWFuO1xuICAgIC8qKiBEZWZhdWx0IGlzIFRydWUuIElmIHNldCB0byBmYWxzZSwgdGhlICB2YWxpZGF0b3JzIHdpbGwgbm90IGJlIGNhbGxlZCB1bnRpbCB0aGUgZm9ybSBpcyBzdWJtaXR0ZWQuICovXG4gICAgcmVhZG9ubHkgZHluYW1pYz86IGJvb2xlYW47XG4gICAgLyoqIFRoZSBwYXNzZWQgdGhyb3VnaCBwcm9wcyB0byB0aGUgRm9ybSBjb21wb25lbnQgKi9cbiAgICBjaGlsZHJlbj86IGFueTtcbiAgICAvKiogRGVmYXVsdCBzZXQgdG8gZmFsc2UuIElmIHNldCB0byB0cnVlIHRoZW4gaXQgd2lsbCBub3cgdXNlIGJvb3RzdHJhcCBzdHlsaW5nIG9yIGFueSBleHRyYSBlbGVtZW50cy4gKi9cbiAgICByZWFkb25seSBiYXJlPzogYm9vbGVhbjtcbiAgICAvKiogQ2FsbGJhY2sgZnVuY3Rpb24gd2lsIGJlIGNhbGxlZCBvbiBmb3JtIHN1Ym1pc3Npb24gaWYgYWxsIHZhbGlkYXRvcnMgcGFzcyAqL1xuICAgIHJlYWRvbmx5IGNhbGxiYWNrPzogRnVuY3Rpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUN1cnNvclBvc2l0aW9uU3RhdGUge1xuICAgIGN1cnNvclBvc2l0aW9uOiBudW1iZXI7XG4gICAgZmllbGROYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFR5cGVDdXJzb3JQb3NpdGlvblN0YXRlID0ge1trZXk6IHN0cmluZ106IElDdXJzb3JQb3NpdGlvblN0YXRlfTtcblxuZXhwb3J0IGludGVyZmFjZSBJRm9ybUNvbnRleHQge1xuICAgIHJlYWRvbmx5IGJhcmU/OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGRlYnVnPzogYm9vbGVhbjtcbiAgICByZWFkb25seSBkeW5hbWljPzogYm9vbGVhbjtcbiAgICByZWFkb25seSBmb3JtS2V5Pzogc3RyaW5nO1xuICAgIGN1cnNvclBvc2l0aW9uczogVHlwZUN1cnNvclBvc2l0aW9uU3RhdGU7XG4gICAgbWV0YWRhdGE6IElNZXRhZGF0YTtcbiAgICBzdGF0ZTogYW55O1xuICAgIHVwZGF0ZUN1cnNvclBvc2l0aW9uU3RhdGU6IChmaWVsZE5hbWU6IHN0cmluZywgY3Vyc29yUG9zaXRpb246IG51bWJlcikgPT4gdm9pZDtcbiAgICB1cGRhdGVQYXJlbnRTdGF0ZT86IChlOiBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+LCBuYW1lOiBzdHJpbmcsIGZvcm1LZXk/OiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgdXBkYXRlUmFkaW9Hcm91cFN0YXRlRnJvbVBhc3NlZEluQ29udGV4dD86IChlOiBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+LCBuYW1lOiBzdHJpbmcsIHJhZGlvR3JvdXA6IGFueSwgZm9ybUtleT86IHN0cmluZykgPT4gdm9pZDtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IElOUFVUU19TVEFURTogVHlwZUlucHV0TWV0YWRhdGEgPSB7fSBhcyBhbnk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBSQURJT19HUk9VUFNfU1RBVEU6IFR5cGVSYWRpb0dyb3VwTWV0YWRhdGEgPSB7fSBhcyBhbnk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBGSUxFU19TVEFURTogVHlwZUZpbGVNZXRhZGF0YSA9IHt9IGFzIGFueTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IENIRUNLQk9YRVNfU1RBVEU6IFR5cGVDaGVja2JveGVzTWV0YWRhdGEgPSB7fSBhcyBhbnk7XG4vKiogQGludGVybmFsICoqL1xuY29uc3QgQ1VSU09SX1BPU0lUSU9OX1NUQVRFOiBUeXBlQ3Vyc29yUG9zaXRpb25TdGF0ZSA9IHt9O1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgcHJvdmlkZXJDb250ZXh0OiBJRm9ybUNvbnRleHQgPSB7XG4gICAgYmFyZTogZmFsc2UsXG4gICAgc3RhdGU6IHt9LFxuICAgIGZvcm1LZXk6IG51bGwgYXMgYW55LFxuICAgIGRlYnVnOiBmYWxzZSxcbiAgICBkeW5hbWljOiB0cnVlLFxuICAgIGN1cnNvclBvc2l0aW9uczoge30sXG4gICAgdXBkYXRlQ3Vyc29yUG9zaXRpb25TdGF0ZToge30gYXMgYW55LFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIGlucHV0czogbnVsbCBhcyBhbnksXG4gICAgICAgIHJhZGlvR3JvdXBzOiBudWxsIGFzIGFueSxcbiAgICAgICAgZmlsZXM6IG51bGwgYXMgYW55LFxuICAgICAgICBjaGVja2JveGVzOiBudWxsIGFzIGFueSxcbiAgICB9LFxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVJhZGlvR3JvdXBQYXJlbnRDb250ZXh0IHtcbiAgICBwYXJlbnQ/OiB7IG5hbWU6IHN0cmluZyB9O1xuICAgIGNoaWxkcmVuPzogYW55O1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IFJhZGlvR3JvdXBDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxUeXBlUmFkaW9Hcm91cE1ldGFkYXRhPihSQURJT19HUk9VUFNfU1RBVEUpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEZvcm1Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxJRm9ybUNvbnRleHQ+KHByb3ZpZGVyQ29udGV4dCk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgRm9ybVByb3ZpZGVyID0gRm9ybUNvbnRleHQuUHJvdmlkZXI7XG4vKipcbiAqIEB2YXIgQWNjZXNzIHRoZSBmb3JtIHN0YXRlIHdpdGhpbiBhIFJlYWN0IENvbnRleHQgQXBpIENvbnN1bWVyIHNjb3BlXG4gKiBAZXhhbXBsZSBGb3IgZXhhbXBsZTpcbiAqIGBgYFxuICogPEZvcm0gc3RhdGU9e3RoaXMuc3RhdGV9IGNvbnRleHQ9e3RoaXN9PlxuICogICAgICA8Rm9ybUNvbnN1bWVyPlxuICogICAgICB7KHtzdGF0ZX0pID0+IHtcbiAqICAgICAgICAgIHJldHVybiA8ZGl2PntzdGF0ZX0gaXMgZXF1YWwge215U3RhdGV9PC9kaXY+O1xuICogICAgICB9fVxuICogICAgPC9Gb3JtQ29uc3VtZXI+XG4gKiA8L0Zvcm0+XG4gKiBgYGBcbiAqICovXG5leHBvcnQgY29uc3QgRm9ybUNvbnN1bWVyID0gRm9ybUNvbnRleHQuQ29uc3VtZXI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVTdWJtaXQgPSAocHJvcHM6IElGb3JtKSA9PlxuICAgIChlOiBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+KSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFjaywgfSA9IHByb3BzO1xuICAgICAgICBpZih0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiAmJiBjYWxsYmFjaygpKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVE9ETyB0aHJvdyBlcnJvclxuICAgICAgICB9XG4gICAgfTtcblxuLyoqXG4gKiBUaGUgbWFpbiBGb3JtIGNvbXBvbmVudCB0aGF0IGlzIHJlcXVpcmVkIHRvIHdyYXAgYWxsICpSQkYqIGNvbXBvbmVudHMuXG4gKiBJZiB0aGUgY29tcG9uZW50IHRoYXQgdXNlcyB0aGUgRm9ybSBjb21wb25lbnQgaXMgYSBmdW5jdGlvbmFsIGNvbXBvbmVudCB0aGVuXG4gKiBvbmx5IHRoZSBzdGF0ZSBwcm9wcyAmIHN0YXRlIHVwZGF0ZSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHRoZSB1c2VTdGF0ZSBob29rIGFyZVxuICogcmVxdWlyZWQuIElmIHlvdSBhcmUgY2FsbGluZyBGb3JtIGNvbXBvbmVudCBmcm9tIGEgY2xhc3MgY29tcG9uZW50IHRoZW4geW91IG11c3QgXG4gKiBwYXNzIHlvdXIgbG9jYWwgY29udGV4dCBvciBgdGhpc2Aga2V5d29yZCB0b1xuICogdGhlIGBjb250ZXh0YCBwcm9wLlxuICogQHBhcmFtIHByb3BzIHtAbGluayBJRm9ybX1cbiAqXG4gKiBBbiBleGFtcGxlIHVzaW5nICpSQkYqIEZvcm0gY29tcG9uZW50IGluIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIC8vIE1pbmltYWwgc2V0dXAgZm9yIGEgUkJGJ3MgRm9ybSBjb21wb25lbnRcbiAqXG4gKiAgY29uc3QgbXlTdGF0ZSA9IHtcbiAqICAgICAgdXNlcm5hbWU6ICcnLFxuICogIH1cbiAqICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHN0YXRlKTtcbiAqICA8Rm9ybSBzdGF0ZT17bXlTdGF0ZX0gY29udGV4dD17c2V0U3RhdGV9PjwvRm9ybT5cbiAqIGBgYFxuICpcbiAqIFRvIHVzZSAqUkJGKiBGb3JtIGNvbXBvbmVudCBmcm9tIGEgY2xhc3MgY29tcG9uZW50IHlvdSBtdXN0IHBhc3MgaW4geW91clxuICogbG9jYWwgc3RhdGUgb2YgYHRoaXNgIGtleXdvcmQuXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiAvLyBNaW5pbWFsIHNldHVwIGZvciBhIFJCRidzIEZvcm0gY29tcG9uZW50IGZvciBhIGNsYXNzIGNvbXBvbmVudFxuICpcbiAqICB0aGlzLnN0YXRlID0geyAvLyBpbiB0aGUgY29uc3RydWN0b3JcbiAqICAgICAgdXNlcm5hbWU6ICcnLFxuICogIH1cbiAqXG4gKiAgPEZvcm0gc3RhdGU9e3RoaXMuc3RhdGV9IGNvbnRleHQ9e3RoaXN9PjwvRm9ybT5cbiAqIGBgYFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBjb25zdCBGb3JtID0gKHByb3BzOiBJRm9ybSkgPT4ge1xuICAgIGNvbnN0IFtwYXJlbnRTdGF0ZSwgc2V0UGFyZW50U3RhdGVdID0gdXNlU3RhdGUocHJvcHMuc3RhdGUpO1xuICAgIGNvbnN0IFtjb250ZXh0LCBfXSA9IHVzZVN0YXRlKHByb3ZpZGVyQ29udGV4dCk7XG4gICAgY29uc3QgW2lucHV0U3RhdGUsIHVwZGF0ZUlucHV0U3RhdGVdID0gdXNlU3RhdGUoSU5QVVRTX1NUQVRFKTtcbiAgICBjb25zdCBbY2hlY2tib3hlc1N0YXRlLCB1cGRhdGVDaGVja2JveGVzU3RhdGVdID0gdXNlU3RhdGUoQ0hFQ0tCT1hFU19TVEFURSk7XG4gICAgY29uc3QgW2ZpbGVTdGF0ZSwgdXBkYXRlRmlsZVN0YXRlXSA9IHVzZVN0YXRlKEZJTEVTX1NUQVRFKTtcbiAgICBjb25zdCBbcmFkaW9TdGF0ZSwgdXBkYXRlUmFkaW9TdGF0ZV0gPSB1c2VTdGF0ZShSQURJT19HUk9VUFNfU1RBVEUpO1xuICAgIGNvbnN0IFtjdXJzb3JQb3NpdGlvblN0YXRlLCB1cGRhdGVDdXJzb3JQb3NpdGlvblN0YXRlXSA9IHVzZVN0YXRlPFR5cGVDdXJzb3JQb3NpdGlvblN0YXRlPihDVVJTT1JfUE9TSVRJT05fU1RBVEUpO1xuICAgIC8vIElmIHRoZSBwYXJlbnROYW1lIGNvbXBvbmVudCBpcyBhIGNsYXNzIGNvbXBvbmVudCwgdGhlbiB0aGUgc3RhdGUgbmVlZHMgdG8gYmUgdXBkYXRlZCBmcm9tIHRoZSBwYXJlbnROYW1lIGNvbnRleHRcbiAgICAvLyBGdW5jdGlvbnMgY29tcG9uZW50IG11c3QgdXNlIHVzZVN0YXRlIGhvb2suIFNlZSBodHRwczovL2pvZWdhc2V3aWN6LmdpdGh1Yi5pby9yZWFjdC1iYXJlLWZvcm1zL21vZHVsZXMvX2Zvcm1fLmh0bWxcbiAgICBpZihwcm9wcy5jb250ZXh0ICYmIFwic2V0U3RhdGVcIiBpbiBwcm9wcy5jb250ZXh0KSB7XG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBwcm9wcy5jb250ZXh0LnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAuLi5wYXJlbnRTdGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBbcGFyZW50U3RhdGVdKTtcbiAgICB9IGVsc2UgaWYgKHByb3BzLmNvbnRleHQpIHtcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIHByb3BzLmNvbnRleHQoe1xuICAgICAgICAgICAgICAgIC4uLnBhcmVudFN0YXRlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIFtwYXJlbnRTdGF0ZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBfRmllbGRFbXB0eUVycm9yTXNnKF9ub0NvbnRleHRFcnJvcik7XG4gICAgfVxuICAgIC8vIFN0YXRlIEhvb2tzXG4gICAgY29uc3QgX3Byb3ZpZGVyQ29udGV4dDogSUZvcm1Db250ZXh0ID0ge1xuICAgICAgICBiYXJlOiBwcm9wcy5iYXJlIHx8IGNvbnRleHQuYmFyZSxcbiAgICAgICAgc3RhdGU6IHByb3BzLnN0YXRlLFxuICAgICAgICBmb3JtS2V5OiBwcm9wcy5mb3JtS2V5LFxuICAgICAgICBjdXJzb3JQb3NpdGlvbnM6IGN1cnNvclBvc2l0aW9uU3RhdGUsXG4gICAgICAgIGRlYnVnOiBwcm9wcy5kZWJ1ZyB8fCBjb250ZXh0LmRlYnVnLFxuICAgICAgICBkeW5hbWljOiBwcm9wcy5keW5hbWljIHx8IGNvbnRleHQuZHluYW1pYyxcbiAgICAgICAgdXBkYXRlUGFyZW50U3RhdGU6IHVwZGF0ZVBhcmVudFN0YXRlKHBhcmVudFN0YXRlLCBzZXRQYXJlbnRTdGF0ZSwgcHJvcHMuZm9ybUtleSksXG4gICAgICAgIHVwZGF0ZVJhZGlvR3JvdXBTdGF0ZUZyb21QYXNzZWRJbkNvbnRleHQ6IHVwZGF0ZVJhZGlvR3JvdXBTdGF0ZUZyb21QYXNzZWRJbkNvbnRleHQocGFyZW50U3RhdGUsIHNldFBhcmVudFN0YXRlLCBwcm9wcy5mb3JtS2V5KSxcbiAgICAgICAgdXBkYXRlQ3Vyc29yUG9zaXRpb25TdGF0ZTogdXBkYXRlQ3Vyc29yUG9zQ2FsbGJhY2soY3Vyc29yUG9zaXRpb25TdGF0ZSEsIHVwZGF0ZUN1cnNvclBvc2l0aW9uU3RhdGUpLFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgW01FVEFEQVRBX05BTUVTLklOUFVUU106IG5ldyBNZXRhZGF0YTxJSW5wdXRGaWVsZE1ldGFkYXRhPihcbiAgICAgICAgICAgICAgICBpbnB1dFN0YXRlIGFzIHt9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZUlucHV0U3RhdGUsXG4gICAgICAgICAgICAgICAgTUVUQURBVEFfTkFNRVMuSU5QVVRTLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFtNRVRBREFUQV9OQU1FUy5DSEVDS0JPWEVTXTogbmV3IE1ldGFkYXRhPElDaGVja0JveGVzTWV0YWRhdGE+KFxuICAgICAgICAgICAgICAgIGNoZWNrYm94ZXNTdGF0ZSBhcyB7fSxcbiAgICAgICAgICAgICAgICB1cGRhdGVDaGVja2JveGVzU3RhdGUsXG4gICAgICAgICAgICAgICAgTUVUQURBVEFfTkFNRVMuQ0hFQ0tCT1hFUyxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBbTUVUQURBVEFfTkFNRVMuRklMRVNdOiBuZXcgTWV0YWRhdGFGaWxlPElGaWxlTWV0YURhdGE+KFxuICAgICAgICAgICAgICAgIGZpbGVTdGF0ZSBhcyB7fSxcbiAgICAgICAgICAgICAgICB1cGRhdGVGaWxlU3RhdGUsXG4gICAgICAgICAgICAgICAgTUVUQURBVEFfTkFNRVMuRklMRVMsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgW01FVEFEQVRBX05BTUVTLlJBRElPX0dST1VQU106IG5ldyBNZXRhZGF0YUdyb3VwPElSYWRpb0dyb3VwQ2hpbGRyZW4+KFxuICAgICAgICAgICAgICAgIHJhZGlvU3RhdGUgYXMgYW55LFxuICAgICAgICAgICAgICAgIHVwZGF0ZVJhZGlvU3RhdGUsXG4gICAgICAgICAgICAgICAgTUVUQURBVEFfTkFNRVMuUkFESU9fR1JPVVBTLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDxGb3JtUHJvdmlkZXIgdmFsdWU9e19wcm92aWRlckNvbnRleHR9PlxuICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdChwcm9wcyl9Pntwcm9wcy5jaGlsZHJlbn08L2Zvcm0+XG4gICAgICAgIDwvRm9ybVByb3ZpZGVyPlxuICAgICk7XG59O1xuIiwiaW1wb3J0IHtFTUFJTF9SRUdFWH0gZnJvbSBcIi4vY29yZVwiO1xuaW1wb3J0IHtJRm9ybUNvbnRleHR9IGZyb20gXCIuL2Zvcm1cIjtcbmltcG9ydCB7SUVtYWlsRmllbGQsIElGaWVsZCwgSUZpZWxkQmFzZSwgSVBhc3N3b3JkRmllbGQsIElUZXh0QXJlYUZpZWxkLCBJVGV4dElucHV0RmllbGR9IGZyb20gXCIuL2VsZW1lbnRzXCI7XG5cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGludGVyZmFjZSBJVmFsaWRhdGlvbiB7XG4gICAgaXNWYWxpZDogYm9vbGVhbjtcbiAgICBtZXNzYWdlczogWy4uLnN0cmluZ1tdXTtcbn1cbi8qKiBAaW50ZXJuYWwgVGhlIGlubmVyIHJldHVybmVkIGZ1bmN0aW9uIHR5cGUgdGhhdCBjdXN0b20gdmFsaWRhdG9ycyBtdXN0IGltcGxlbWVudCAqL1xuZXhwb3J0IHR5cGUgSVZhbGlkYXRpb25GdW5jdGlvbiA9ICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBJVmFsaWRhdGlvbjtcbi8qKiBAaW50ZXJuYWwgVGhlIGV4cGVjdGVkIHZhbGlkYXRvcidzIHR5cGUgdGhhdCB7QGxpbmsgSUZpZWxkfSBlbGVtZW50cyBjYW4gY29uc3VtZSAqL1xuZXhwb3J0IHR5cGUgSVZhbGlkYXRvcnMgPSBBcnJheTxJVmFsaWRhdGlvbkZ1bmN0aW9uPjtcbi8qKiBAaW50ZXJuYWwgVGhlIGN1c3RvbSB2YWxpZGF0b3IgdHlwZSBjYWxsYmFjayAqL1xuZXhwb3J0IHR5cGUgSUN1c3RvbVZhbGlkYXRvckNhbGxiYWNrID0gKGFyZzogYW55LCBmaWVsZFZhbHVlOiBhbnksIGNvbnRleHQ6IElGb3JtQ29udGV4dCkgPT4gQXJyYXk8c3RyaW5nPnx1bmRlZmluZWQ7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSBJVmFsaWRhdGlvblZhcmlhYmxlID0gKGFyZz86IGFueSkgPT4gSVZhbGlkYXRpb25GdW5jdGlvbjtcbi8qKlxuICogVGhlIGBwYXNzd29yZEtleWAgaXMgbm9ybWFsbHkgdGhlIGZpcnN0IHBhc3N3b3JkIGZvcm0gZmllbGQgdGhlIHVzZXIgZmlsbHMgaW4gYmVmb3JlXG4gKiB0aGVuIGNvbmZpcm1pbmcgdGhhdCB0aGUgcGFzc3dvcmQgaXMgY29ycmVjdCB3aXRoIGEgY29uZmlybSBwYXNzd29yZCBmaWVsZC4gdGhpcyB2YWxpZGF0b3JcbiAqIGNoZWNrIHRoYXQgYm90aCBwYXNzd29yZCBmaWVsZHMgYXJlIGVxdWFsIG9yIGVsc2Ugd2lsbCByZXR1cm4gYW4gZXJyb3IgbWVzc2FnZSBhbmQgc2V0IHRoaXNcbiAqIGZpZWxkIHRvIGludmFsaWQuYFxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogIDxQYXNzd29yZEZpZWxkXG4gKiAgICAgIC8vIG90aGVyIHByb3BzLi4uXG4gKiAgICAgIG5hbWU9XCJteVBhc3N3b3JkXCJcbiAqICAvPlxuICpcbiAqICA8Q29uZmlybVBhc3N3b3JkRmllbGRcbiAqICAgICAgICAvLyBvdGhlciBwcm9wcy4uLlxuICogICAgICAgIHZhbGlkYXRvcnM9e1thcmVGaWVsZHNFcXVhbChcIm15UGFzc3dvcmRcIildfVxuICogICAvPlxuICogICAvLyBtZXNzYWdlOiBGaWVsZHMgZG8gbm90IG1hdGNoXG4gKiBgYGBcbiAqIEBwYXJhbSBgcGFzc3dvcmRLZXlgIFRoZSBuYW1lIG9mIHRoZSBwYXNzd29yZCBmb3JtIGVsZW1lbnQgeW91IHdhdGNoIHRvIG1hdGNoIGFnYWluc3RcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgYXJlRmllbGRzRXF1YWw6IElWYWxpZGF0aW9uVmFyaWFibGUgPSBjdXN0b21WYWxpZGF0b3IoKGZpZWxkS2V5LCBmaWVsZFZhbHVlLCBjb250ZXh0OiBJRm9ybUNvbnRleHQpID0+IHtcbiAgICBsZXQgdGVzdEZpZWxkOiBJRmllbGRCYXNlO1xuICAgIGxldCBtZXNzYWdlID0gW2BGaWVsZHMgZG8gbm90IG1hdGNoYF07XG4gICAgbGV0IGNvbnRleHRTdGF0ZSA9IGdldEZvcm1TdGF0ZUZyb21Db250ZXh0KGNvbnRleHQpO1xuICAgIGlmKGZpZWxkS2V5IGluIGNvbnRleHRTdGF0ZSkge1xuICAgICAgICB0ZXN0RmllbGQgPSBjb250ZXh0U3RhdGVbZmllbGRLZXldO1xuICAgICAgICBpZighdGVzdEZpZWxkIHx8ICFmaWVsZFZhbHVlICB8fCBmaWVsZFZhbHVlICE9PSBjb250ZXh0U3RhdGVbZmllbGRLZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBSZWFjdC1CYXJlRm9ybXMgRXJyb3I6IE5vIEZpZWxkIHdpdGggbmFtZSBvZiAke2ZpZWxkS2V5fSBleGlzdHMgd2hlbiBjYWxsaW5nICdhcmVGaWVsZHNFcXVhbCcgYFxuICAgICAgICAgICAgKyBgdmFsaWRhdG9yIGZ1bmN0aW9uLlxcbiBGb3IgbW9yZSBpbmZvLCB2aXNpdDogYFxuICAgICAgICAgICAgKyBgaHR0cHM6Ly9qb2VnYXNld2ljei5naXRodWIuaW8vcmVhY3QtYmFyZS1mb3Jtcy9tb2R1bGVzL192YWxpZGF0b3JzXy5odG1sI2FyZWZpZWxkc2VxdWFsYCxcbiAgICAgICAgKTtcbiAgICB9XG59KTtcblxuXG4vKipcbiAqIFRoZSBgaXNGaWVsZEVtcHR5YCB2YWxpZGF0b3IgcGVyZm9ybXMgYSBjb21wYXJpc29uIGFnYWluc3QgYG1pbkxlbmd0aGAgJiB0aGUgZmllbGQgZWxlbWVudFxuICogdmFsdWUuIElmIHRoZXkgYXJlIGVxdWFsIG9yIHRoZSBgbWluTGVuZ3RoYCBpcyBncmVhdGVyIHRoYW4gdGhlIGZvcm0gZWxlbWVudCB2YWx1ZSB0aGVuXG4gKiB0aGlzIGVsZW1lbnQgaXMgbm90IHZhbGlkICYgYSBtZXNzYWdlIGlzIGRpc3BsYXllZC5cbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQge1RleHRJbnB1dEZpZWxkLCBpc0ZpZWxkRW1wdHl9IGZyb20gXCJyZWFjdC1iYXNlLWZvcm1zXCJcbiAqXG4gKiBjb25zdCBzdGF0ZSA9IHsgdXNlcm5hbWU6IFwiXCIgfVxuICogYGBgXG4gKiAgPFRleHRJbnB1dEZpZWxkXG4gKiAgICAgICAgdmFsdWU9e3N0YXRlLnVzZXJuYW1lfVxuICogICAgICAgIG5hbWU9XCJ1c2VybmFtZVwiXG4gKiAgICAgICAgdmFsaWRhdG9ycz17W2lzRmllbGRFbXB0eSg1KV19XG4gKiAgIC8+XG4gKiAgIC8vIG1lc3NhZ2U6IE11c3QgYmUgYXQgbGVhc3QgNSBjaGFyYWN0ZXJzXG4gKiBgYGBcbiAqIEBwYXJhbSBtaW5MZW5ndGggVGhlIG1pbmltdW0gbGVuZ3RoIG9mIHRoZSBmb3JtIGZpZWxkIHZhbHVlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGlzRmllbGRFbXB0eTogSVZhbGlkYXRpb25WYXJpYWJsZSA9IGN1c3RvbVZhbGlkYXRvcigobWluTGVuZ3RoLCBmaWVsZFZhbHVlLCBjb250ZXh0OiBJRm9ybUNvbnRleHQpID0+IHtcbiAgICBjb25zdCBpc1ZhbGlkID0gKHR5cGVvZiBmaWVsZFZhbHVlICE9PSBcInVuZGVmaW5lZFwiICYmIGZpZWxkVmFsdWUubGVuZ3RoID49IG1pbkxlbmd0aCk7XG4gICAgaWYoIWlzVmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIFtgTXVzdCBiZSBhdCBsZWFzdCAke21pbkxlbmd0aH0gY2hhcmFjdGVyc2BdO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFRoaXMgdmFsaWRhdG9yIGRvZXNuJ3QgcmVxdWlyZSBhbnkgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCBpbi5cbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQge0VtYWlsRmllbGQsIGlzRW1haWxWYWxpZH0gZnJvbSBcInJlYWN0LWJhc2UtZm9ybXNcIlxuICpcbiAqIGNvbnN0IHN0YXRlID0geyB0ZXJtczogZmFsc2UgfVxuICogYGBgXG4gKiAgPEVtYWlsRmllbGRcbiAqICAgIC8vIG90aGVyIHByb3BzLi4uXG4gKiAgICB2YWxpZGF0b3JzPXtbaXNFbWFpbFZhbGlkKCldfVxuICogIC8+XG4gKiAgLy8gbWVzc2FnZTogTXVzdCBiZSBhIHZhbGlkIGVtYWlsXG4gKiBgYGBcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGlzRW1haWxWYWxpZDogSVZhbGlkYXRpb25WYXJpYWJsZSA9IGN1c3RvbVZhbGlkYXRvcigoXyAsIGZpZWxkVmFsdWUsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBpc1ZhbGlkID0gRU1BSUxfUkVHRVgudGVzdChTdHJpbmcoZmllbGRWYWx1ZSkudG9Mb3dlckNhc2UoKSk7XG4gICAgaWYoIWlzVmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIFtgTXVzdCBiZSBhIHZhbGlkIGVtYWlsYF07XG4gICAgfVxufSk7XG5cbi8qKlxuICogVGhpcyB2YWxpZGF0b3Igd2lsbCBkaXNwbGF5IHRoZSB3YXJuaW5nIGlmIGEgdXNlciBoYXMgc2VsZWN0ZWQgYSBmaWxlIGJ1dCB0aGVuIHJlc2VsZWN0ZWRcbiAqIG5vdGhpbmcgKGJ5IGNsaWNraW5nIHRoZSBjYW5jZWwgYnV0dG9uIGluIHRoZSBmaWxlIHBvcHVwIHdpbmRvdykuIFRoaXMgdmFsaWRhdG9yIGRvZXNuJ3RcbiAqIHJlcXVpcmUgYW55IGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgaW4uXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQge2NyZWF0ZUZpbGVSZWYsIEZpbGVGaWVsZCwgaXNGaWxlfSBmcm9tIFwicmVhY3QtYmFyZS1mb3Jtc1wiO1xuICpcbiAqIGNvbnN0IG15RmlsZVJlZiA9IGNyZWF0ZUZpbGVSZWYoKTtcbiAqXG4gKiA8RmlsZUZpZWxkXG4gKiAgICByZWY9e215RmlsZVJlZn1cbiAqICAgIGhpbnQ9XCJNdXN0IGJlIGEgZmlsZVwiXG4gKiAgICBsYWJlbHRleHQ9XCJVcGxvYWQgeW91ciBmaWxlXCJcbiAqICAgIG5hbWU9XCJteUZpbGVUZXN0XCJcbiAqICAgIHZhbGlkYXRvcnM9e1tpc0ZpbGUoKV19XG4gKiAvPlxuICogYGBgXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBpc0ZpbGU6IElWYWxpZGF0aW9uVmFyaWFibGUgPSBjdXN0b21WYWxpZGF0b3IoKF8sIG5hbWUsIGNvbnRleHQpID0+IHtcbiAgICBpZighbmFtZSkge1xuICAgICAgICByZXR1cm4gW2BNdXN0IGJlIGEgZmlsZSB0eXBlYF07XG4gICAgfVxufSk7XG5cbi8qKlxuICogVG8gdXNlIHRoZSBgaXNSYWRpb0NoZWNrZWRgLCBzZWxlY3QgdGhlIGBSYWRpb0ZpZWxkYCBjb21wb25lbnQgeW91IHdpc2ggdGhlIHVzZXIgdG8gc2VsZWN0XG4gKiAmIGFkZCB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uIHRvIHRoZSBgdmFsaWRhdG9yc2AgcHJvcC4gVGhpcyB3aWxsIG5vdyBkaXNwbGF5IGEgd2FybmluZyBpZlxuICogdGhlIHVzZXIgaGFzIGRlc2VsZWN0ZWQgdGhlIHJlcXVpcmVkIG9wdGlvbi4gVGhpcyB2YWxpZGF0b3IgZG9lc24ndFxuICogcmVxdWlyZSBhbnkgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCBpbi5cbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQge1JhZGlvR3JvdXAsIFJhZGlvRmllbGR9IGZyb20gXCJyZWFjdC1iYXNlLWZvcm1zXCJcbiAqXG4gKiBjb25zdCBzdGF0ZSA9IHsgbWFsZTogdHJ1ZSwgZmVtYWxlOiBmYWxzZSB9XG4gKlxuICogPFJhZGlvR3JvdXAgbmFtZT1cImdyb3VwMVwiPlxuICogICAgIDxSYWRpb0ZpZWxkXG4gKiAgICAgICBuYW1lPVwibWFsZVwiXG4gKiAgICAgICBjaGVja2VkPXtzdGF0ZS5mZW1hbGV9XG4gKiAgICAgICB2YWxpZGF0b3JzPXtbaXNSYWRpb0NoZWNrZWQoKV19XG4gKiAgICAvPlxuICogICAgPFJhZGlvRmllbGRcbiAqICAgICAgIG5hbWU9XCJmZW1hbGVcIlxuICogICAgICAgY2hlY2tlZD17c3RhdGUuZmVtYWxlfVxuICogICAgLz5cbiAqIDwvUmFkaW9Hcm91cD5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGlzUmFkaW9DaGVja2VkOiBJVmFsaWRhdGlvblZhcmlhYmxlID0gY3VzdG9tVmFsaWRhdG9yKChfICwgdmFsdWUsIGNvbnRleHQpID0+IHtcbiAgICBpZighdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtgVGhpcyBvcHRpb24gbXVzdCBiZSBzZWxlY3RlZGBdO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFRoZSBgaXNDaGVja2VkYCB2YWxpZGF0b3Igd2lsbCBkaXNwbGF5IGEgd2FybmluZyBpZiB0aGUgdXNlciBoYXMgc2VsZWN0ZWQgdGhlIGNoZWNrYm94ICZcbiAqIHRoZW4gZGVzZWxlY3RlZCBpdC4gVGhpcyByZXF1aXJlcyBhICpib29sZWFuKiB0eXBlIHRvIGJlIHNldCBpbiB5b3VyIHN0YXRlLCBzZWUgYmVsb3cuXG4gKiBUaGlzIHZhbGlkYXRvciBkb2Vzbid0IHJlcXVpcmUgYW55IGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgaW4uXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHtDaGVja0JveEZpZWxkLCBpc0NoZWNrZWR9IGZyb20gXCJyZWFjdC1iYXNlLWZvcm1zXCJcbiAqXG4gKiBjb25zdCBzdGF0ZSA9IHsgdGVybXM6IGZhbHNlIH1cbiAqXG4gKiA8Q2hlY2tCb3hGaWVsZFxuICogICAgbmFtZT1cInRlcm1zXCJcbiAqICAgIGNoZWNrZWQ9e3RoaXMuc3RhdGUudGVybXN9XG4gKiAgICB2YWxpZGF0b3JzPXtbaXNDaGVja2VkKCldfVxuICogLz5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGlzQ2hlY2tlZDogSVZhbGlkYXRpb25WYXJpYWJsZSA9IGN1c3RvbVZhbGlkYXRvcigoXywgZmllbGRWYWx1ZSwgY29udGV4dCkgPT4ge1xuICAgIGlmKGZpZWxkVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBbYE11c3QgYmUgY2hlY2tlZGBdO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIEZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBjYWxsYmFjayB3aGljaCBjb250YWlucyB0aGUgY2FsbGVycyBvd24gdmFsaWRhdGlvbiBsb2dpY1xuICogJiByZXR1cm5zIGFuIGFycmF5IG9mIHN0cmluZyhzKSB3aGljaCBhcmUgdGhlIHZhbGlkYXRpb24gZXJyb3IgbWVzc2FnZSBvciAqdW5kZWZpbmVkKi4gQmVsb3cgaXMgYW5cbiAqIGV4YW1wbGUgb2YgY3JlYXRpbmcgYSBjdXN0b20gdmFsaWRhdG9yIHRvIHRlc3QgaWYgYSBmaWVsZCBoYXMgYSBzdHJpbmcgbGVuZ3RoIG9mIG50aC5cbiAqXG4gKiBUaGVyZSBhcmUgMyBhcmd1bWVudHMgYXZhaWxhYmxlIHRvIHlvdXIgY3VzdG9tIHZhbGlkYXRpb24gY2FsbGJhY2s6XG4gKiAgLSAqKmFyZyoqIFRoaXMgaXMgdGhlIHlvdXIgb3duIHZhbHVlIHVzZWQgdG8gaW4gdGhlIHZhbGlkYXRpb24gY29tcGFyaXNvblxuICogIEBleGFtcGxlXG4gKiAgYGBgXG4gKiAgY29uc3QgbXlBcmcgPSA1O2BcbiAqXG4gKiAgPFRleHRJbnB1dEZpZWxkXG4gKiAgICAvLyBvdGhlciBwcm9wcy4uLlxuICogICAgdmFsaWRhdG9ycz17W215VmFsaWRhdG9yKG15QXJnKV19IC8vIDwtIGBteUFyZ2BcbiAqICAvPlxuICogYGBgXG4gKiAgLSAqKmZpZWxkVmFsdWUqKiBUaGlzIGlzIHRoZSBjdXJyZW50IGZvcm0gZWxlbWVudCB2YWx1ZSBiZWluZyBwYXNzZWQgdG8gdGhlIHZhbGlkYXRvclxuICogIC0gKipjb250ZXh0KiogVGhpcyBpcyB0aGUgY29udGV4dCBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgc3RhdGVcbiAqIEZvciBleGFtcGxlOlxuICogQGV4YW1wbGVcbiAqIGBgYGBcbiAqIGNvbnN0IGlzRmllbGRFbXB0eSA9IGNyZWF0ZVZhbGlkYXRvcigobWluTGVuZ3RoLCBmaWVsZFZhbHVlLCBjb250ZXh0KSA9PiB7XG4gKiAgICAgY29uc3QgaXNWYWxpZCA9IChmaWVsZFZhbHVlLmxlbmd0aCA+PSBtaW5MZW5ndGgpO1xuICogICAgIGlmKCFpc1ZhbGlkKSB7XG4gKiAgICAgICAgIHJldHVybiBbYE11c3QgYmUgYXQgbGVhc3QgJHttaW5MZW5ndGh9IGNoYXJhY3RlcnNgXTtcbiAqICAgICB9XG4gKiB9KTtcbiAqIGBgYGBcbiAqIFlvdSBvbmx5IG5lZWQgdG8gcmV0dXJuIHR5cGUgYW4gYXJyYXkgb2Ygc3RyaW5nKHMpICh3aGljaCBpcyB5b3VyIHZhbGlkYXRpb24gbWVzc2FnZSlcbiAqIGlmIHRoZSBgZmllbGRWYWx1ZWBpcyAqKk5PVCoqIHZhbGlkYXRlZC5cbiAqIEBwYXJhbSBjYWxsYmFja1xuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21WYWxpZGF0b3IoY2FsbGJhY2s6IElDdXN0b21WYWxpZGF0b3JDYWxsYmFjayk6IChhcmc6IGFueSkgPT4gSVZhbGlkYXRpb25GdW5jdGlvbiAge1xuICAgIHJldHVybiAoYXJnOiBhbnkgPSBudWxsKTogSVZhbGlkYXRpb25GdW5jdGlvbiA9PiB7XG4gICAgICAgIHJldHVybiAoLi4uYXJnczogQXJyYXk8YW55PikgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETyBjdXN0b20gZXhjZXB0aW9ucyBmb3IgdGhlIGJlbG93IGFyZ3NcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkVmFsdWU6IGFueSA9IGFyZ3NbMF07XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0OiBJRm9ybUNvbnRleHQgPSBhcmdzWzFdO1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBjYWxsYmFjayhhcmcsIGZpZWxkVmFsdWUsIGNvbnRleHQpO1xuICAgICAgICAgICAgbGV0IHZhbGlkYXRpb25EYXRhO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWVzc2FnZXMpICYmIG1lc3NhZ2VzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbkRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRpb25EYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25EYXRhO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgY29ycmVjdCBzdGF0ZSBmcm9tIHRoZSBjb250ZXh0IG9iamVjdCB3aXRoaW4gYSB2YWxpZGF0b3I6XG4gKiAgLSAqKmFyZyoqIGNvbnRleHQge0lGb3JtQ29udGV4dH1cbiAqICBAZXhhbXBsZVxuICogIGBgYFxuICogIGxldCBjb250ZXh0U3RhdGUgPSBnZXRGb3JtU3RhdGVGcm9tQ29udGV4dChjb250ZXh0KTtcbiAqIGBgYFxuICogQHBhcmFtIGNvbnRleHRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybVN0YXRlRnJvbUNvbnRleHQoY29udGV4dDogSUZvcm1Db250ZXh0KSB7XG4gICAgaWYoY29udGV4dC5mb3JtS2V5KSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LnN0YXRlW2NvbnRleHQuZm9ybUtleV07XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0LnN0YXRlO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==