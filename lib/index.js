!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports["react-bare-lib"]=e(require("react")):t["react-bare-lib"]=e(t.react)}(window,(function(t){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([function(e,n){e.exports=t},function(t,e,n){"use strict";n.d(e,"c",(function(){return r})),n.d(e,"k",(function(){return p})),n.d(e,"b",(function(){return f})),n.d(e,"e",(function(){return l})),n.d(e,"a",(function(){return d})),n.d(e,"j",(function(){return h})),n.d(e,"g",(function(){return m})),n.d(e,"f",(function(){return y})),n.d(e,"h",(function(){return v})),n.d(e,"d",(function(){return b})),n.d(e,"i",(function(){return O}));var r,o=n(0),a=n.n(o),i=n(3),u=n(8),c=n(4),s=function(){return(s=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(t){t.TEXT="text",t.EMAIL="email",t.PASSWORD="password",t.TEXTAREA="textArea",t.RADIO="radio",t.CHECKBOX="checkbox",t.SELECT="select",t.FILE="file"}(r||(r={}));var p=function(t){return new c.c(r.TEXT,t).create()},f=function(t){return new c.c(r.EMAIL,t).create()},l=function(t){return new c.c(r.PASSWORD,t).create()},d=function(t){return new c.a(r.CHECKBOX,t).create()},h=function(t){return new c.i(r.TEXTAREA,t).create()};function m(t){var e={parent:{name:t.name},children:t.children};return a.a.createElement(i.e.Provider,{value:e},t.children)}var y=function(t){return new c.g(r.RADIO,t).create()},v=function(t){return new c.h(r.SELECT,t).create()},b=a.a.forwardRef((function(t,e){var n=s(s({},t),{ref:e});return new c.b(r.FILE,n).create()})),O=(new u.a).create()},function(t,e,n){"use strict";n.d(e,"d",(function(){return p})),n.d(e,"a",(function(){return O})),n.d(e,"c",(function(){return c.a})),n.d(e,"b",(function(){return u})),n.d(e,"e",(function(){return b})),n.d(e,"f",(function(){return v})),n.d(e,"h",(function(){return d})),n.d(e,"g",(function(){return y})),n.d(e,"i",(function(){return h}));var r=n(0),o=n.n(r),a=n(3);function i(t){var e=t.results,n=t.styles;return o.a.createElement(o.a.Fragment,null,e.map((function(t){return t.messages.map((function(t,e){return o.a.createElement("div",{key:e,className:n},t)}))})))}var u=function(t){var e=Object(r.useContext)(a.c).bare?t.className:"alert mt-2 alert-danger "+t.className;return t.isTouched?o.a.createElement(i,{results:t.results,styles:e||""}):null},c=n(7),s=n(6);function p(t){var e=Object(s.b)(t);return e?{name:e.name,lastModified:e.lastModified,lastModifiedDate:e.lastModifiedDate,size:e.size,type:e.type}:null}var f=function(){return(f=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function l(t,e,n){var r;return void 0===e&&(e=""),void 0===n&&(n={}),e?((r={})[e]=f(f({},t[e]),n),r):f(f({},t),n)}function d(t,e,n){return void 0===n&&(n=""),function(r,o){var a;e(f(f({},t),l(t,n,((a={})[o]=r.target.value,a))))}}function h(t,e,n){return void 0===n&&(n=""),function(r,o,a){var i,u;if(a){for(var c=f(f({},t),l(t,n,((i={})[o]=!0,i))),s=0,p=a.children;s<p.length;s++){var d=p[s];d.props.name!==o&&(c=f(f({},c),l(c,n,((u={})[d.props.name]=!1,u))))}e(c)}}}var m=n(1);function y(t,e,n){var r="";return n||(r+=t+" "),e&&(r+=""+e),r}function v(t){switch(t){case m.c.TEXT:case m.c.EMAIL:case m.c.PASSWORD:case m.c.TEXTAREA:return a.d.INPUTS;case m.c.RADIO:return a.d.RADIO_GROUPS;case m.c.CHECKBOX:return a.d.CHECKBOXES;case m.c.SELECT:return a.d.INPUTS;case m.c.FILE:return a.d.FILES;default:return a.d.INPUTS}}function b(t){switch(t){case m.c.TEXT:case m.c.EMAIL:case m.c.PASSWORD:case m.c.TEXTAREA:return"value";case m.c.CHECKBOX:return"checked";case m.c.SELECT:return"value";case m.c.FILE:return"file";case m.c.RADIO:return"checked";default:return"value"}}var O=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/},function(t,e,n){"use strict";n.d(e,"d",(function(){return r})),n.d(e,"e",(function(){return m})),n.d(e,"c",(function(){return y})),n.d(e,"b",(function(){return b})),n.d(e,"a",(function(){return g}));var r,o=n(0),a=n.n(o),i=n(2),u=n(4),c=n(7),s=function(){return(s=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};!function(t){t.INPUTS="inputs",t.RADIO_GROUPS="radioGroups",t.FILES="files",t.CHECKBOXES="checkboxes"}(r||(r={}));var p={},f={},l={},d={},h={bare:!1,state:{},formKey:null,debug:!1,dynamic:!0,metadata:{inputs:null,radioGroups:null,files:null,checkboxes:null}},m=a.a.createContext(f),y=a.a.createContext(h),v=y.Provider,b=y.Consumer,O=function(t){return function(e){e.preventDefault();var n=t.callback;"function"==typeof n&&n()&&n()}},g=function(t){var e,n=Object(o.useState)(t.state),m=n[0],y=n[1],b=Object(o.useState)(h),g=b[0],_=(b[1],Object(o.useState)(p)),j=_[0],E=_[1],P=Object(o.useState)(d),F=P[0],S=P[1],w=Object(o.useState)(l),x=w[0],T=w[1],N=Object(o.useState)(f),C=N[0],A=N[1];if(t.context&&"setState"in t.context)Object(o.useEffect)((function(){t.context.setState(s({},m))}),[m]);else{if(!t.context)throw new i.c(c.b);Object(o.useEffect)((function(){t.context(s({},m))}),[m])}var R={bare:t.bare||g.bare,state:t.state,formKey:t.formKey,debug:t.debug||g.debug,dynamic:t.dynamic||g.dynamic,updateParentState:Object(i.h)(m,y,t.formKey),updateRadioGroupStateFromPassedInContext:Object(i.i)(m,y,t.formKey),metadata:(e={},e[r.INPUTS]=new u.d(j,E,r.INPUTS),e[r.CHECKBOXES]=new u.d(F,S,r.CHECKBOXES),e[r.FILES]=new u.e(x,T,r.FILES),e[r.RADIO_GROUPS]=new u.f(C,A,r.RADIO_GROUPS),e)};return a.a.createElement(v,{value:R},a.a.createElement("form",{onSubmit:O(t)},t.children))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return m})),n.d(e,"b",(function(){return b})),n.d(e,"c",(function(){return _})),n.d(e,"d",(function(){return P})),n.d(e,"e",(function(){return w})),n.d(e,"f",(function(){return N})),n.d(e,"g",(function(){return R})),n.d(e,"h",(function(){return I})),n.d(e,"i",(function(){return D}));var r=n(0),o=n.n(r),a=n(2),i=n(3),u=function(){return(u=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},c=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};function s(t,e){return o.a.createElement("div",{className:"form-group"},t.labeltext&&o.a.createElement("label",null,t.labeltext),e,t.hint&&o.a.createElement("small",{className:"form-text text-muted"},t.hint))}var p,f=function(){function t(t,e){this.type=e,this.props=t,this.init()}return Object.defineProperty(t.prototype,"parentName",{get:function(){return this._parentName},set:function(t){this._parentName=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bare",{get:function(){return Boolean(this._bare)},set:function(t){this._bare=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"metadata",{get:function(){return this._metadata},set:function(t){this._metadata=t},enumerable:!1,configurable:!0}),t.prototype.init=function(){this.context=Object(r.useContext)(i.c),this.metadata=this.context.metadata[Object(a.f)(this.type)],this.metadata.init(this.props.name,this.type),this.bare=Boolean(this.context.bare)},t.prototype.getProps=function(){return this.props},t.prototype.createField=function(t){var e=this.props.validators||this.parentName?o.a.createElement(a.b,{isTouched:this.metadata.isFieldTouched(),results:this.validate(),name:this.props.name,type:Object(a.f)(this.type),parent:this.parent}):null;return this.bare?o.a.createElement(o.a.Fragment,null,t(this.metadata.state),e):o.a.createElement(o.a.Fragment,null,this.formGroup(t(this.metadata.state)),e)},t.prototype.doValidation=function(t){var e=[];if(this.props.validators)for(var n=0,r=this.props.validators;n<r.length;n++){var o=r[n];e=c(e,[o(t,this.context)])}return e},t.prototype.validate=function(){var t=this.getFieldValue(this.props),e=this.doValidation(t);return this.metadata.update(t,e),e},t.prototype.getFieldValue=function(t){var e=Object(a.e)(this.type);return this.props[e]},t.mergeDefaultCssWithProps=function(t,e,n){var r="";return n||(r+=t+" "),e&&(r+=""+e),r},t.prototype.overrideEvent=function(t,e){return u(u({},t),{target:u(u({},t.target),{value:!e})})},t.prototype.getStatePositionFromFormKey=function(){var t,e;return(null===(t=this.context)||void 0===t?void 0:t.formKey)?this.context.state[this.context.formKey]:null===(e=this.context)||void 0===e?void 0:e.state},t}(),l=function(){function t(t,e,n){this.state=t,this.updateState=e,this.metaType=n}return Object.defineProperty(t.prototype,"name",{get:function(){return this._name},set:function(t){this._name=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fieldType",{get:function(){return this._fieldType},set:function(t){this._fieldType=t},enumerable:!1,configurable:!0}),t.prototype.isFieldTouched=function(){return!!this.state[this.name]&&this.state[this.name].isTouched},t}(),d=(p=function(t,e){return(p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}p(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),h=function(){return(h=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},m=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return d(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return o.a.createElement("div",{className:"form-group form-check"},t,this.props.labeltext&&o.a.createElement("label",{className:"form-check-label"},this.props.labeltext),this.props.hint&&o.a.createElement("small",{className:"form-text text-muted"},this.props.hint))},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",h({},t.props,{type:t.type,checked:t.getStatePositionFromFormKey()[t.props.name]||!1,onChange:function(e){return t.context.updateParentState(t.overrideEvent(e,t.getStatePositionFromFormKey()[t.props.name]),t.props.name)},name:t.props.name,className:f.mergeDefaultCssWithProps("form-check-input",t.props.className,t.context.bare)})))}},e}(f),y=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),v=function(){return(v=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},b=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r._updateFieldValidation=function(){r.file=Object(a.d)(r.props.ref),void 0!==r.file&&r.validate()},r.type=e,r.props=n,r}return y(e,t),Object.defineProperty(e.prototype,"file",{get:function(){return this._file},set:function(t){this._file=t},enumerable:!1,configurable:!0}),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return s(this.props,t)},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",v({},t.props,{ref:t.props.ref,type:t.type,onChange:t._updateFieldValidation.bind(t),className:f.mergeDefaultCssWithProps("form-control-file",t.props.className,t.context.bare)})))}},e.prototype.getFieldValue=function(t){return this.props.ref.current?Object(a.d)(this.props.ref):null},e}(f),O=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),g=function(){return(g=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},_=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return O(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return s(this.props,t)},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",g({},t.props,{type:t.type,value:t.getStatePositionFromFormKey()[t.props.name]||"",onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name,className:f.mergeDefaultCssWithProps("form-control",t.props.className,t.bare)})))}},e}(f),j=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),E=function(){return(E=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},P=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return j(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype.update=function(t,e){var n,o,i,u=this;this.name in this.state?this.state[this.name]&&t!==this.state[this.name].fieldValues.currentValue&&(i=E(E({},this.state),((o={})[this.name]={name:this.name,validation:e,fieldValues:{type:Object(a.e)(this.fieldType),currentValue:t},isTouched:!0},o)),Object(r.useEffect)((function(){u.updateState(i)}),[i])):(i=E(E({},this.state),((n={})[this.name]={name:this.name,validation:e,isTouched:!1,fieldValues:{type:Object(a.e)(this.fieldType),currentValue:t}},n)),Object(r.useEffect)((function(){u.updateState(i)}),[i]))},e}(l),F=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),S=function(){return(S=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},w=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return F(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype.update=function(t,e){var n,o,i,u=this;if(!(this.name in this.state))return i=S(S({},this.state),((n={})[this.name]={name:this.name,validation:e,isTouched:!1,fieldValues:{type:Object(a.e)(this.fieldType),currentValue:{}}},n)),void Object(r.useEffect)((function(){u.updateState(i)}),[i]);if(this.state[this.name]){var c=this.state[this.name].fieldValues.currentValue;(null===t&&Object.keys(c).length||t&&t.name!==c.name)&&(i=S(S({},this.state),((o={})[this.name]={name:this.name,validation:e,fieldValues:{type:Object(a.e)(this.fieldType),currentValue:t||{}},isTouched:!0},o)),this.updateState(i))}},e}(l),x=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),T=function(){return(T=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},N=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.defaultState={},o}return x(e,t),e.prototype.init=function(t,e){this.name=t,this.fieldType=e},e.prototype._createGroupState=function(t,e,n){var r,o;return void 0===n&&(n=!0),T(T({},this.state),((r={})[t.parentName]=T(T({},this.state[t.parentName]),((o={})[this.name]={parent:t.parentName,name:this.name,validation:e||[],isTouched:n,fieldValues:{type:Object(a.e)(this.fieldType),value:t.value}},o)),r))},e.prototype.update=function(t,e){var n=this,o={};this.state[t.parentName]?(this.state[t.parentName]&&!(this.name in this.state[t.parentName])||this.state[t.parentName][this.name]&&this.state[t.parentName][this.name].fieldValues.value!==t.value)&&(o=this._createGroupState(t,e),Object(r.useEffect)((function(){n.updateState(o)}))):(o=this._createGroupState(t,e,!1),Object(r.useEffect)((function(){n.updateState(o)})))},e.prototype.isFieldTouched=function(){if(this.state&&this.parentName&&this.name&&this.state[this.parentName]){var t=this.state[this.parentName][this.name];if(t)return t.isTouched}return!1},e}(l),C=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),A=function(){return(A=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},R=function(t){function e(e,n){var o=t.call(this,n,e)||this;return o.handleOnChange=function(t,e){var n=o.overrideEvent(t,t.target.value);o.context.updateRadioGroupStateFromPassedInContext(n,o.props.name,e)},o.props=n,o.type=e,o.radioContext=Object(r.useContext)(i.e),o.radioContext&&o.radioContext.parent&&(o.parentName=o.radioContext.parent.name,o.metadata.parentName=o.parentName),o}return C(e,t),Object.defineProperty(e.prototype,"parentName",{get:function(){return this.__parentName},set:function(t){this.__parentName=t},enumerable:!1,configurable:!0}),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return o.a.createElement("div",{className:"form-group form-check"},t,this.props.labeltext&&o.a.createElement("label",{className:"form-check-label"},this.props.labelText),this.props.hint&&o.a.createElement("small",{className:"form-text text-muted"},this.props.hint))},e.prototype.getField=function(){var t=this;return function(){return o.a.createElement("input",A({},t.props,{type:t.type,checked:t.getStatePositionFromFormKey()[t.props.name]||!1,name:t.props.name,onChange:function(e){return t.handleOnChange(e,t.radioContext)},className:f.mergeDefaultCssWithProps("form-check-input",t.props.className,t.context.bare)}))}},e.prototype.getFieldValue=function(t){var e,n,r,o=null===(e=this.context)||void 0===e?void 0:e.formKey;return o?(null===(n=this.context)||void 0===n?void 0:n.state[o][this.props.name])||!1:(null===(r=this.context)||void 0===r?void 0:r.state[this.props.name])||!1},e.prototype.validate=function(){var t=this.getFieldValue(this.props),e=this.doValidation(t);return this.metadata.update({value:t,parentName:this.parentName,name:this.props.name},e),e},e}(f),k=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),V=function(){return(V=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},I=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return k(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return s(this.props,t)},e.prototype._getOptions=function(t){var e=this;return void 0===t&&(t=[]),this.props.objectkey&&this.props.objectvalue?t.map((function(t,n){return o.a.createElement("option",{value:t[e.props.objectkey],key:n},t[e.props.objectvalue])})):t.map((function(t,e){return o.a.createElement("option",{value:t,key:e},t)}))},e.prototype.getField=function(){var t=this,e=this.props,n=e.options,r=void 0===n?[]:n,a=(e.size,this._getOptions(r));return function(){return o.a.createElement("select",V({},t.props,{onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name,className:f.mergeDefaultCssWithProps(t.getSelectCssName(t.props.size),t.props.className,t.context.bare)}),a||null)}},e.prototype.getSelectCssName=function(t){return"default"===t?"form-control":"form-control form-control-"+t},e}(f),G=(n(8),function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),K=function(){return(K=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},D=function(t){function e(e,n){var r=t.call(this,n,e)||this;return r.type=e,r.props=n,r}return G(e,t),e.prototype.create=function(){return this.createField(this.getField())},e.prototype.formGroup=function(t){return s(this.props,t)},e.prototype.getField=function(){var t=this,e=this.props.rows,n=void 0===e?5:e;return function(){return o.a.createElement("textarea",K({},t.props,{className:Object(a.g)("form-control",t.props.className,t.context.bare),rows:n,value:t.getStatePositionFromFormKey()[t.props.name]||"",onChange:function(e){return t.context.updateParentState(e,t.props.name)},name:t.props.name}))}},e}(f)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o})),n.d(e,"e",(function(){return a})),n.d(e,"d",(function(){return i})),n.d(e,"f",(function(){return u})),n.d(e,"g",(function(){return c})),n.d(e,"c",(function(){return s})),n.d(e,"b",(function(){return p}));var r=n(2),o=p((function(t,e,n){var r=function(t){if(t.formKey)return t.state[t.formKey];return t.state}(n);if(!(t in r))throw new Error("React-BareForms Error: No Field with name of "+t+" exists when calling 'areFieldsEqual' validator function.\n For more info, visit: https://joegasewicz.github.io/react-bare-forms/modules/_validators_.html#arefieldsequal");if(!r[t]||!e||e!==r[t])return["Fields do not match"]})),a=p((function(t,e,n){if(!(void 0!==e&&e.length>=t))return["Must be at least "+t+" characters"]})),i=p((function(t,e,n){if(!r.a.test(String(e).toLowerCase()))return["Must be a valid email"]})),u=p((function(t,e,n){if(!e)return["Must be a file type"]})),c=p((function(t,e,n){if(!e)return["This option must be selected"]})),s=p((function(t,e,n){if(!1===e)return["Must be checked"]}));function p(t){return function(e){return void 0===e&&(e=null),function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=n[0],a=n[1],i=t(e,o,a);return Array.isArray(i)&&i.length>=1?{isValid:!1,messages:i}:{isValid:!0,messages:[]}}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return a})),n.d(e,"b",(function(){return i}));var r=n(0),o=n.n(r);function a(){return o.a.createRef()}function i(t){return t&&t.current&&Object.keys(t.current.files).length?t.current.files[0]:null}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return u}));var r,o=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),a=function(t,e,n){return"React Bare Forms ERROR:\n\t"+t+" - "+e+"\n\t- "+n},i=(a("Function","isFieldEmpty()","Missing argument: minLength (number)"),function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(Error)),u=a("Required Props","context","You must pass in a context prop. Class components use 'state' & functional components must use useState hook. See https://joegasewicz.github.io/react-bare-forms/modules/_form_.html")},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(0),o=n.n(r),a=n(3),i=function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},u=function(){function t(){this.GROUP_TYPES=["radioGroups"]}return t.prototype.isGroup=function(t){return this.GROUP_TYPES.includes(t)},t.prototype.create=function(){var t=this;return function(e){for(var n=Object(r.useContext)(a.c),u=e.className,c=void 0===u?"btn btn-success btn-lg":u,s=(e.disabled,!1),p=(n.metadata.inputs.state,0),f=Object.keys(n.metadata);p<f.length;p++){var l=f[p],d=n.metadata[l].state;if(t.isGroup(n.metadata[l].metaType))for(var h=0,m=Object.keys(d);h<m.length;h++){E=m[h];for(var y=0,v=Object.keys(d[E]);y<v.length;y++)for(var b=v[y],O=0,g=d[E][b].validation;O<g.length;O++){g[O].isValid||(s=!0)}}else for(var _=0,j=Object.keys(d);_<j.length;_++)for(var E,P=0,F=d[E=j[_]].validation;P<F.length;P++){F[P].isValid||(s=!0)}}return o.a.createElement("button",i({},e,{disabled:s,className:c}),e.children)}},t}()},function(t,e,n){"use strict";n.r(e),function(t){var r=n(3);n.d(e,"FormConsumer",(function(){return r.b})),n.d(e,"Form",(function(){return r.a}));var o=n(1);n.d(e,"CheckBoxField",(function(){return o.a})),n.d(e,"EmailField",(function(){return o.b})),n.d(e,"FileField",(function(){return o.d})),n.d(e,"PasswordField",(function(){return o.e})),n.d(e,"RadioField",(function(){return o.f})),n.d(e,"RadioGroup",(function(){return o.g})),n.d(e,"SubmitButton",(function(){return o.i})),n.d(e,"TextAreaField",(function(){return o.j})),n.d(e,"TextInputField",(function(){return o.k})),n.d(e,"SelectField",(function(){return o.h}));var a=n(5);n.d(e,"areFieldsEqual",(function(){return a.a})),n.d(e,"customValidator",(function(){return a.b})),n.d(e,"isChecked",(function(){return a.c})),n.d(e,"isEmailValid",(function(){return a.d})),n.d(e,"isFieldEmpty",(function(){return a.e})),n.d(e,"isFile",(function(){return a.f})),n.d(e,"isRadioChecked",(function(){return a.g}));var i=n(6);n.d(e,"createFileRef",(function(){return i.a})),n.d(e,"getFileFromRef",(function(){return i.b})),window=window||t.window}.call(this,n(10))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,